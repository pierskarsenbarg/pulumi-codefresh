// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Data Source: codefresh.Registry
 *
 * This data source allows retrieving information on any existing registry
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pierskarsenbarg/codefresh";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const dockerhub = codefresh.getRegistry({
 *     name: "dockerhub",
 * });
 * // example with using data reference to existing registry, not managed by terraform
 * // "dockerhub" registry will be used as fallback for "dockerhub1"
 * const dockerhub1 = new codefresh.Registry("dockerhub1", {
 *     primary: dockerhub.then(dockerhub => !dockerhub.primary),
 *     spec: {
 *         dockerhub: {
 *             username: "test",
 *             password: "test",
 *         },
 *     },
 *     fallbackRegistry: dockerhub.then(dockerhub => dockerhub.id),
 * });
 * ```
 */
export function getRegistry(args: GetRegistryArgs, opts?: pulumi.InvokeOptions): Promise<GetRegistryResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("codefresh:index/getRegistry:getRegistry", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegistry.
 */
export interface GetRegistryArgs {
    /**
     * Name of the registry to be retrieved
     */
    name: string;
}

/**
 * A collection of values returned by getRegistry.
 */
export interface GetRegistryResult {
    /**
     * Bool.
     */
    readonly default: boolean;
    /**
     * String.
     */
    readonly domain: string;
    /**
     * String representing the id of the fallback registry.
     * * `repository prefix` - String representing the optional prefix for registry.
     */
    readonly fallbackRegistry: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kind: string;
    readonly name: string;
    /**
     * Bool.
     */
    readonly primary: boolean;
    /**
     * String identifying the type of registry. E.g. `dockerhub, ecr, acr` and others
     */
    readonly registryProvider: string;
    readonly repositoryPrefix: string;
}

export function getRegistryOutput(args: GetRegistryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegistryResult> {
    return pulumi.output(args).apply(a => getRegistry(a, opts))
}

/**
 * A collection of arguments for invoking getRegistry.
 */
export interface GetRegistryOutputArgs {
    /**
     * Name of the registry to be retrieved
     */
    name: pulumi.Input<string>;
}
