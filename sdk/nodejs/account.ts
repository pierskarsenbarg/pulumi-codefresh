// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Account resource
 *
 * By creating different accounts for different teams within the same company a customer can achieve complete segregation of assets between the teams.
 * See the [documentation](https://codefresh.io/docs/docs/administration/ent-account-mng/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const test = new codefresh.Account("test", {
 *     builds: [{
 *         parallel: 27,
 *     }],
 *     features: {
 *         OfflineLogging: true,
 *         abac: true,
 *         customKubernetesCluster: true,
 *         launchDarklyManagement: false,
 *         ssoManagement: true,
 *         teamsManagement: true,
 *     },
 *     limits: [{
 *         collaborators: 25,
 *         dataRetentionWeeks: 5,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import codefresh:index/account:Account test xxxxxxxxxxxxxxxxxxx
 * ```
 */
export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/account:Account';

    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Account {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }

    /**
     * A collection of `build` blocks as documented below.
     */
    public readonly builds!: pulumi.Output<outputs.AccountBuild[] | undefined>;
    /**
     * map of supported features toggles 
     * ---
     */
    public readonly features!: pulumi.Output<{[key: string]: boolean} | undefined>;
    /**
     * A collection of `limits` blocks as documented below.
     */
    public readonly limits!: pulumi.Output<outputs.AccountLimit[] | undefined>;
    /**
     * The display name for the account.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountState | undefined;
            resourceInputs["builds"] = state ? state.builds : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            resourceInputs["builds"] = args ? args.builds : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Account.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    /**
     * A collection of `build` blocks as documented below.
     */
    builds?: pulumi.Input<pulumi.Input<inputs.AccountBuild>[]>;
    /**
     * map of supported features toggles 
     * ---
     */
    features?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * A collection of `limits` blocks as documented below.
     */
    limits?: pulumi.Input<pulumi.Input<inputs.AccountLimit>[]>;
    /**
     * The display name for the account.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    /**
     * A collection of `build` blocks as documented below.
     */
    builds?: pulumi.Input<pulumi.Input<inputs.AccountBuild>[]>;
    /**
     * map of supported features toggles 
     * ---
     */
    features?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * A collection of `limits` blocks as documented below.
     */
    limits?: pulumi.Input<pulumi.Input<inputs.AccountLimit>[]>;
    /**
     * The display name for the account.
     */
    name?: pulumi.Input<string>;
}
