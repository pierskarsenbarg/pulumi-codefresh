// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AccountBuild {
    nodes?: pulumi.Input<number>;
    /**
     * How many pipelines can be run in parallel.
     * ` `node` - (Optional) Number of nodes.
     */
    parallel: pulumi.Input<number>;
}

export interface AccountLimit {
    /**
     * Max account's collaborators number.
     */
    collaborators: pulumi.Input<number>;
    /**
     * -(Optional) How long in weeks will the builds be stored.
     */
    dataRetentionWeeks?: pulumi.Input<number>;
}

export interface ContextSpec {
    /**
     * A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
     */
    config?: pulumi.Input<inputs.ContextSpecConfig>;
    /**
     * A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
     */
    secret?: pulumi.Input<inputs.ContextSpecSecret>;
    /**
     * A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
     */
    secretyaml?: pulumi.Input<inputs.ContextSpecSecretyaml>;
    storageazuref?: pulumi.Input<inputs.ContextSpecStorageazuref>;
    storagegc?: pulumi.Input<inputs.ContextSpecStoragegc>;
    storages3?: pulumi.Input<inputs.ContextSpecStorages3>;
    /**
     * A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
     */
    yaml?: pulumi.Input<inputs.ContextSpecYaml>;
}

export interface ContextSpecConfig {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ContextSpecSecret {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ContextSpecSecretyaml {
    /**
     * String representing a YAML file content
     */
    data: pulumi.Input<string>;
}

export interface ContextSpecStorageazuref {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: pulumi.Input<inputs.ContextSpecStorageazurefData>;
}

export interface ContextSpecStorageazurefData {
    auth: pulumi.Input<inputs.ContextSpecStorageazurefDataAuth>;
}

export interface ContextSpecStorageazurefDataAuth {
    accountKey: pulumi.Input<string>;
    accountName: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ContextSpecStoragegc {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: pulumi.Input<inputs.ContextSpecStoragegcData>;
}

export interface ContextSpecStoragegcData {
    auth: pulumi.Input<inputs.ContextSpecStoragegcDataAuth>;
}

export interface ContextSpecStoragegcDataAuth {
    jsonConfig: pulumi.Input<{[key: string]: any}>;
    type: pulumi.Input<string>;
}

export interface ContextSpecStorages3 {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: pulumi.Input<inputs.ContextSpecStorages3Data>;
}

export interface ContextSpecStorages3Data {
    auth: pulumi.Input<inputs.ContextSpecStorages3DataAuth>;
}

export interface ContextSpecStorages3DataAuth {
    jsonConfig: pulumi.Input<{[key: string]: any}>;
    type: pulumi.Input<string>;
}

export interface ContextSpecYaml {
    /**
     * String representing a YAML file content
     */
    data: pulumi.Input<string>;
}

export interface GetCurrentAccountUserArgs {
    email: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface GetCurrentAccountUser {
    email: string;
    id: string;
    name: string;
}

export interface PipelineSpec {
    /**
     * The maximum amount of concurrent builds that may run for each branch
     */
    branchConcurrency?: pulumi.Input<number>;
    /**
     * The maximum amount of concurrent builds.
     */
    concurrency?: pulumi.Input<number>;
    /**
     * A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
     */
    contexts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `options` block as documented below.
     */
    options?: pulumi.Input<inputs.PipelineSpecOptions>;
    /**
     * SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
     */
    packId?: pulumi.Input<string>;
    /**
     * Helps to organize the order of builds execution in case of reaching the concurrency limit.
     */
    priority?: pulumi.Input<number>;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required)
     */
    requiredAvailableStorage?: pulumi.Input<string>;
    /**
     * A collection of `runtimeEnvironment` blocks as documented below.
     */
    runtimeEnvironments?: pulumi.Input<pulumi.Input<inputs.PipelineSpecRuntimeEnvironment>[]>;
    /**
     * A collection of `specTemplate` blocks as documented below.
     */
    specTemplates?: pulumi.Input<pulumi.Input<inputs.PipelineSpecSpecTemplate>[]>;
    /**
     * A `terminationPolicy` block as documented below.
     */
    terminationPolicy?: pulumi.Input<inputs.PipelineSpecTerminationPolicy>;
    /**
     * The maximum amount of concurrent builds that may run for each trigger.
     */
    triggerConcurrency?: pulumi.Input<number>;
    /**
     * A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTrigger>[]>;
    /**
     * Pipeline variables.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PipelineSpecOptions {
    /**
     * Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
     * * Default (attribute not specified): "Use Setting accounts"
     * * true: "Remain (build remains active)"
     * * false: "Be removed"
     */
    keepPvcsForPendingApproval?: pulumi.Input<boolean>;
    /**
     * Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
     * * Default (attribute not specified): "Use Setting accounts"
     * * true: "Included in concurrency"
     * * false: "Not included in concurrency"
     */
    pendingApprovalConcurrencyApplied?: pulumi.Input<boolean>;
}

export interface PipelineSpecRuntimeEnvironment {
    /**
     * A required amount of CPU.
     */
    cpu?: pulumi.Input<string>;
    /**
     * A pipeline shared storage.
     */
    dindStorage?: pulumi.Input<string>;
    /**
     * A required amount of memory.
     */
    memory?: pulumi.Input<string>;
    /**
     * A name of runtime.
     */
    name?: pulumi.Input<string>;
}

export interface PipelineSpecSpecTemplate {
    /**
     * The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
     */
    context?: pulumi.Input<string>;
    /**
     * Default value - **git**.
     */
    location?: pulumi.Input<string>;
    /**
     * The relative path to the Codefresh pipeline file.
     */
    path: pulumi.Input<string>;
    /**
     * The GitHub `account/repo_name`.
     */
    repo: pulumi.Input<string>;
    /**
     * The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
     */
    revision: pulumi.Input<string>;
}

export interface PipelineSpecTerminationPolicy {
    /**
     * A `onCreateBranch` block as documented below.
     */
    onCreateBranch?: pulumi.Input<inputs.PipelineSpecTerminationPolicyOnCreateBranch>;
    /**
     * Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
     */
    onTerminateAnnotation?: pulumi.Input<boolean>;
}

export interface PipelineSpecTerminationPolicyOnCreateBranch {
    /**
     * A regular expression to filter the branches on with the termination policy applies.
     */
    branchName?: pulumi.Input<string>;
    /**
     * Boolean. See table below for usage.
     */
    ignoreBranch?: pulumi.Input<boolean>;
    /**
     * Boolean. See table below for usage.
     */
    ignoreTrigger?: pulumi.Input<boolean>;
}

export interface PipelineSpecTrigger {
    /**
     * A regular expression and will only trigger for branches that match this naming pattern.
     */
    branchRegex?: pulumi.Input<string>;
    /**
     * Flag to manage how the `branchRegex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
     */
    branchRegexInput?: pulumi.Input<string>;
    /**
     * A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
     */
    commentRegex?: pulumi.Input<string>;
    /**
     * The commit status title pushed to the GIT version control system.
     */
    commitStatusTitle?: pulumi.Input<string>;
    /**
     * Codefresh Git context.
     */
    context?: pulumi.Input<string>;
    /**
     * A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
     */
    contexts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The trigger description.
     */
    description?: pulumi.Input<string>;
    /**
     * Boolean. If true, trigger will never be activated.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
     */
    modifiedFilesGlob?: pulumi.Input<string>;
    /**
     * The display name for the pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * A `options` block as documented below.
     */
    options?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTriggerOption>[]>;
    /**
     * Default value - **github**.
     */
    provider?: pulumi.Input<string>;
    /**
     * Boolean. If this trigger is also applicable to Git forks.
     */
    pullRequestAllowForkEvents?: pulumi.Input<boolean>;
    /**
     * A regular expression and will only trigger for pull requests to branches that match this naming pattern.
     */
    pullRequestTargetBranchRegex?: pulumi.Input<string>;
    /**
     * The GitHub `account/repo_name`.
     */
    repo?: pulumi.Input<string>;
    /**
     * A collection of `runtimeEnvironment` blocks as documented below.
     * - `options`: (Optional) A collection `option` blocks as documented below.
     * ---
     */
    runtimeEnvironments?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTriggerRuntimeEnvironment>[]>;
    /**
     * The trigger type. Default value - **git**.
     */
    type?: pulumi.Input<string>;
    /**
     * Trigger variables.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PipelineSpecTriggerOption {
    /**
     * Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
     */
    enableNotifications?: pulumi.Input<boolean>;
    /**
     * Boolean. If true, docker layer cache is disabled. Default false
     */
    noCache?: pulumi.Input<boolean>;
    /**
     * Boolean. If true, extra Codefresh caching is disabled. Default false
     */
    noCfCache?: pulumi.Input<boolean>;
    /**
     * Boolean. If true, all files on volume will be deleted before each execution. Default false
     */
    resetVolume?: pulumi.Input<boolean>;
}

export interface PipelineSpecTriggerRuntimeEnvironment {
    /**
     * A required amount of CPU.
     */
    cpu?: pulumi.Input<string>;
    /**
     * A pipeline shared storage.
     */
    dindStorage?: pulumi.Input<string>;
    /**
     * A required amount of memory.
     */
    memory?: pulumi.Input<string>;
    /**
     * A name of runtime.
     */
    name?: pulumi.Input<string>;
}

export interface RegistrySpec {
    acr?: pulumi.Input<inputs.RegistrySpecAcr>;
    bintray?: pulumi.Input<inputs.RegistrySpecBintray>;
    dockerhub?: pulumi.Input<inputs.RegistrySpecDockerhub>;
    ecr?: pulumi.Input<inputs.RegistrySpecEcr>;
    gar?: pulumi.Input<inputs.RegistrySpecGar>;
    gcr?: pulumi.Input<inputs.RegistrySpecGcr>;
    other?: pulumi.Input<inputs.RegistrySpecOther>;
}

export interface RegistrySpecAcr {
    /**
     * _(Required)_ String representing client id.
     */
    clientId: pulumi.Input<string>;
    /**
     * _(Required)_ String representing client secret.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * _(Required)_ String representing your acr registry domain.
     */
    domain: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecBintray {
    /**
     * _(Required)_ String representing the bintray domain
     */
    domain: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * _(Required)_ String representing token
     */
    token: pulumi.Input<string>;
    /**
     * _(Required)_ String representing the username
     */
    username: pulumi.Input<string>;
}

export interface RegistrySpecDockerhub {
    /**
     * _(Required, Sensitive)_ String.
     */
    password: pulumi.Input<string>;
    /**
     * _(Required)_ String.
     */
    username: pulumi.Input<string>;
}

export interface RegistrySpecEcr {
    /**
     * _(Required)_ String representing access key id
     */
    accessKeyId: pulumi.Input<string>;
    /**
     * _(Required)_ String representing one of the Amazon regions
     */
    region: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * _(Required)_ String representing secret access key
     */
    secretAccessKey: pulumi.Input<string>;
}

export interface RegistrySpecGar {
    /**
     * _(Required)_ String representing service account json file contents
     */
    keyfile: pulumi.Input<string>;
    /**
     * _(Required)_ String representing one of the Google's gar locations
     */
    location: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecGcr {
    /**
     * _(Required)_ String representing one of the Google's gcr domains
     */
    domain: pulumi.Input<string>;
    /**
     * _(Required)_ String representing service account json file contents
     */
    keyfile: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecOther {
    /**
     * _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
     */
    behindFirewall?: pulumi.Input<boolean>;
    /**
     * _(Required)_ String representing the bintray domain
     */
    domain: pulumi.Input<string>;
    /**
     * _(Required)_ String representing token
     */
    password: pulumi.Input<string>;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * _(Required)_ String representing the username
     */
    username: pulumi.Input<string>;
}

export interface StepTypesVersion {
    /**
     * YAML String containing a valid definition of a typed plugin
     */
    stepTypesYaml: pulumi.Input<string>;
    /**
     * String representing the semVer for the step
     */
    versionNumber: pulumi.Input<string>;
}

export interface UserLogin {
    /**
     * The id of IDP to the user to.
     */
    idpId?: pulumi.Input<string>;
    sso?: pulumi.Input<boolean>;
}

export interface UserPersonal {
    /**
     * .
     */
    companyName?: pulumi.Input<string>;
    /**
     * .
     */
    country?: pulumi.Input<string>;
    /**
     * .
     */
    firstName?: pulumi.Input<string>;
    /**
     * .
     */
    lastName?: pulumi.Input<string>;
    /**
     * .
     */
    phoneNumber?: pulumi.Input<string>;
}

export interface UserShortProfile {
    /**
     * The new user name.
     */
    userName?: pulumi.Input<string>;
}

