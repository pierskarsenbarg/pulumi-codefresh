// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AccountBuild {
    nodes?: number;
    /**
     * How many pipelines can be run in parallel.
     * ` `node` - (Optional) Number of nodes.
     */
    parallel: number;
}

export interface AccountLimit {
    /**
     * Max account's collaborators number.
     */
    collaborators: number;
    /**
     * -(Optional) How long in weeks will the builds be stored.
     */
    dataRetentionWeeks?: number;
}

export interface ContextSpec {
    /**
     * A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
     */
    config?: outputs.ContextSpecConfig;
    /**
     * A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
     */
    secret?: outputs.ContextSpecSecret;
    /**
     * A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
     */
    secretyaml?: outputs.ContextSpecSecretyaml;
    storageazuref?: outputs.ContextSpecStorageazuref;
    storagegc?: outputs.ContextSpecStoragegc;
    storages3?: outputs.ContextSpecStorages3;
    /**
     * A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
     */
    yaml?: outputs.ContextSpecYaml;
}

export interface ContextSpecConfig {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: {[key: string]: string};
}

export interface ContextSpecSecret {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: {[key: string]: string};
}

export interface ContextSpecSecretyaml {
    /**
     * String representing a YAML file content
     */
    data: string;
}

export interface ContextSpecStorageazuref {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: outputs.ContextSpecStorageazurefData;
}

export interface ContextSpecStorageazurefData {
    auth: outputs.ContextSpecStorageazurefDataAuth;
}

export interface ContextSpecStorageazurefDataAuth {
    accountKey: string;
    accountName: string;
    type: string;
}

export interface ContextSpecStoragegc {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: outputs.ContextSpecStoragegcData;
}

export interface ContextSpecStoragegcData {
    auth: outputs.ContextSpecStoragegcDataAuth;
}

export interface ContextSpecStoragegcDataAuth {
    jsonConfig: {[key: string]: any};
    type: string;
}

export interface ContextSpecStorages3 {
    /**
     * Map of strings representing the variables to be defined in the Shared Config.
     */
    data: outputs.ContextSpecStorages3Data;
}

export interface ContextSpecStorages3Data {
    auth: outputs.ContextSpecStorages3DataAuth;
}

export interface ContextSpecStorages3DataAuth {
    jsonConfig: {[key: string]: any};
    type: string;
}

export interface ContextSpecYaml {
    /**
     * String representing a YAML file content
     */
    data: string;
}

export interface GetCurrentAccountUser {
    email: string;
    id: string;
    name: string;
}

export interface GetStepTypesVersion {
    /**
     * YAML String containing the definition of a typed plugin
     */
    stepTypesYaml: string;
    /**
     * String representing the semVer for the step
     */
    versionNumber: string;
}

export interface GetUserLogin {
    credentials?: outputs.GetUserLoginCredential[];
    idps?: outputs.GetUserLoginIdp[];
}

export interface GetUserLoginCredential {
    permissions?: string[];
}

export interface GetUserLoginIdp {
    clientType?: string;
    id?: string;
}

export interface GetUserPersonal {
    companyName?: string;
    country?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
}

export interface GetUserShortProfile {
    userName?: string;
}

export interface GetUsersUser {
    email: string;
    logins: outputs.GetUsersUserLogin[];
    personals: outputs.GetUsersUserPersonal[];
    roles: string[];
    shortProfiles: outputs.GetUsersUserShortProfile[];
    status: string;
    userId: string;
    userName: string;
}

export interface GetUsersUserLogin {
    credentials?: outputs.GetUsersUserLoginCredential[];
    idps?: outputs.GetUsersUserLoginIdp[];
}

export interface GetUsersUserLoginCredential {
    permissions?: string[];
}

export interface GetUsersUserLoginIdp {
    clientType?: string;
    id?: string;
}

export interface GetUsersUserPersonal {
    companyName?: string;
    country?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
}

export interface GetUsersUserShortProfile {
    userName?: string;
}

export interface PipelineSpec {
    /**
     * The maximum amount of concurrent builds that may run for each branch
     */
    branchConcurrency?: number;
    /**
     * The maximum amount of concurrent builds.
     */
    concurrency?: number;
    /**
     * A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
     */
    contexts?: string[];
    /**
     * A `options` block as documented below.
     */
    options?: outputs.PipelineSpecOptions;
    /**
     * SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
     */
    packId?: string;
    /**
     * Helps to organize the order of builds execution in case of reaching the concurrency limit.
     */
    priority?: number;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required)
     */
    requiredAvailableStorage?: string;
    /**
     * A collection of `runtimeEnvironment` blocks as documented below.
     */
    runtimeEnvironments?: outputs.PipelineSpecRuntimeEnvironment[];
    /**
     * A collection of `specTemplate` blocks as documented below.
     */
    specTemplates?: outputs.PipelineSpecSpecTemplate[];
    /**
     * A `terminationPolicy` block as documented below.
     */
    terminationPolicy?: outputs.PipelineSpecTerminationPolicy;
    /**
     * The maximum amount of concurrent builds that may run for each trigger.
     */
    triggerConcurrency?: number;
    /**
     * A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
     */
    triggers?: outputs.PipelineSpecTrigger[];
    /**
     * Pipeline variables.
     */
    variables?: {[key: string]: string};
}

export interface PipelineSpecOptions {
    /**
     * Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
     * * Default (attribute not specified): "Use Setting accounts"
     * * true: "Remain (build remains active)"
     * * false: "Be removed"
     */
    keepPvcsForPendingApproval?: boolean;
    /**
     * Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
     * * Default (attribute not specified): "Use Setting accounts"
     * * true: "Included in concurrency"
     * * false: "Not included in concurrency"
     */
    pendingApprovalConcurrencyApplied?: boolean;
}

export interface PipelineSpecRuntimeEnvironment {
    /**
     * A required amount of CPU.
     */
    cpu?: string;
    /**
     * A pipeline shared storage.
     */
    dindStorage?: string;
    /**
     * A required amount of memory.
     */
    memory?: string;
    /**
     * A name of runtime.
     */
    name?: string;
}

export interface PipelineSpecSpecTemplate {
    /**
     * The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
     */
    context?: string;
    /**
     * Default value - **git**.
     */
    location?: string;
    /**
     * The relative path to the Codefresh pipeline file.
     */
    path: string;
    /**
     * The GitHub `account/repo_name`.
     */
    repo: string;
    /**
     * The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
     */
    revision: string;
}

export interface PipelineSpecTerminationPolicy {
    /**
     * A `onCreateBranch` block as documented below.
     */
    onCreateBranch?: outputs.PipelineSpecTerminationPolicyOnCreateBranch;
    /**
     * Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
     */
    onTerminateAnnotation?: boolean;
}

export interface PipelineSpecTerminationPolicyOnCreateBranch {
    /**
     * A regular expression to filter the branches on with the termination policy applies.
     */
    branchName?: string;
    /**
     * Boolean. See table below for usage.
     */
    ignoreBranch?: boolean;
    /**
     * Boolean. See table below for usage.
     */
    ignoreTrigger?: boolean;
}

export interface PipelineSpecTrigger {
    /**
     * A regular expression and will only trigger for branches that match this naming pattern.
     */
    branchRegex?: string;
    /**
     * Flag to manage how the `branchRegex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
     */
    branchRegexInput?: string;
    /**
     * A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
     */
    commentRegex?: string;
    /**
     * The commit status title pushed to the GIT version control system.
     */
    commitStatusTitle?: string;
    /**
     * Codefresh Git context.
     */
    context?: string;
    /**
     * A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
     */
    contexts?: string[];
    /**
     * The trigger description.
     */
    description?: string;
    /**
     * Boolean. If true, trigger will never be activated.
     */
    disabled?: boolean;
    /**
     * A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
     */
    events?: string[];
    /**
     * Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
     */
    modifiedFilesGlob?: string;
    /**
     * The display name for the pipeline.
     */
    name?: string;
    /**
     * A `options` block as documented below.
     */
    options?: outputs.PipelineSpecTriggerOption[];
    /**
     * Default value - **github**.
     */
    provider?: string;
    /**
     * Boolean. If this trigger is also applicable to Git forks.
     */
    pullRequestAllowForkEvents?: boolean;
    /**
     * A regular expression and will only trigger for pull requests to branches that match this naming pattern.
     */
    pullRequestTargetBranchRegex?: string;
    /**
     * The GitHub `account/repo_name`.
     */
    repo?: string;
    /**
     * A collection of `runtimeEnvironment` blocks as documented below.
     * - `options`: (Optional) A collection `option` blocks as documented below.
     * ---
     */
    runtimeEnvironments?: outputs.PipelineSpecTriggerRuntimeEnvironment[];
    /**
     * The trigger type. Default value - **git**.
     */
    type?: string;
    /**
     * Trigger variables.
     */
    variables?: {[key: string]: string};
}

export interface PipelineSpecTriggerOption {
    /**
     * Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
     */
    enableNotifications?: boolean;
    /**
     * Boolean. If true, docker layer cache is disabled. Default false
     */
    noCache?: boolean;
    /**
     * Boolean. If true, extra Codefresh caching is disabled. Default false
     */
    noCfCache?: boolean;
    /**
     * Boolean. If true, all files on volume will be deleted before each execution. Default false
     */
    resetVolume?: boolean;
}

export interface PipelineSpecTriggerRuntimeEnvironment {
    /**
     * A required amount of CPU.
     */
    cpu?: string;
    /**
     * A pipeline shared storage.
     */
    dindStorage?: string;
    /**
     * A required amount of memory.
     */
    memory?: string;
    /**
     * A name of runtime.
     */
    name?: string;
}

export interface RegistrySpec {
    acr?: outputs.RegistrySpecAcr;
    bintray?: outputs.RegistrySpecBintray;
    dockerhub?: outputs.RegistrySpecDockerhub;
    ecr?: outputs.RegistrySpecEcr;
    gar?: outputs.RegistrySpecGar;
    gcr?: outputs.RegistrySpecGcr;
    other?: outputs.RegistrySpecOther;
}

export interface RegistrySpecAcr {
    /**
     * _(Required)_ String representing client id.
     */
    clientId: string;
    /**
     * _(Required)_ String representing client secret.
     */
    clientSecret: string;
    /**
     * _(Required)_ String representing your acr registry domain.
     */
    domain: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
}

export interface RegistrySpecBintray {
    /**
     * _(Required)_ String representing the bintray domain
     */
    domain: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
    /**
     * _(Required)_ String representing token
     */
    token: string;
    /**
     * _(Required)_ String representing the username
     */
    username: string;
}

export interface RegistrySpecDockerhub {
    /**
     * _(Required, Sensitive)_ String.
     */
    password: string;
    /**
     * _(Required)_ String.
     */
    username: string;
}

export interface RegistrySpecEcr {
    /**
     * _(Required)_ String representing access key id
     */
    accessKeyId: string;
    /**
     * _(Required)_ String representing one of the Amazon regions
     */
    region: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
    /**
     * _(Required)_ String representing secret access key
     */
    secretAccessKey: string;
}

export interface RegistrySpecGar {
    /**
     * _(Required)_ String representing service account json file contents
     */
    keyfile: string;
    /**
     * _(Required)_ String representing one of the Google's gar locations
     */
    location: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
}

export interface RegistrySpecGcr {
    /**
     * _(Required)_ String representing one of the Google's gcr domains
     */
    domain: string;
    /**
     * _(Required)_ String representing service account json file contents
     */
    keyfile: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
}

export interface RegistrySpecOther {
    /**
     * _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
     */
    behindFirewall?: boolean;
    /**
     * _(Required)_ String representing the bintray domain
     */
    domain: string;
    /**
     * _(Required)_ String representing token
     */
    password: string;
    /**
     * _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: string;
    /**
     * _(Required)_ String representing the username
     */
    username: string;
}

export interface StepTypesVersion {
    /**
     * YAML String containing a valid definition of a typed plugin
     */
    stepTypesYaml: string;
    /**
     * String representing the semVer for the step
     */
    versionNumber: string;
}

export interface UserLogin {
    /**
     * The id of IDP to the user to.
     */
    idpId?: string;
    sso?: boolean;
}

export interface UserPersonal {
    /**
     * .
     */
    companyName?: string;
    /**
     * .
     */
    country?: string;
    /**
     * .
     */
    firstName?: string;
    /**
     * .
     */
    lastName?: string;
    /**
     * .
     */
    phoneNumber?: string;
}

export interface UserShortProfile {
    /**
     * The new user name.
     */
    userName?: string;
}
