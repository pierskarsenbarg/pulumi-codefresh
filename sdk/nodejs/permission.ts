// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # resource codefresh.Permission
 *
 * Permission are used to setup access control and allow to define which teams have access to which clusters and pipelines based on tags
 * See the [documentation](https://codefresh.io/docs/docs/administration/access-control/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pierskarsenbarg/codefresh";
 *
 * const developersTeam = new codefresh.Team("developersTeam", {users: [
 *     "5efc3cb6355c6647041b6e49",
 *     "59009221c102763beda7cf04",
 * ]});
 * const developersPermission = new codefresh.Permission("developersPermission", {
 *     team: developersTeam.id,
 *     resource: "pipeline",
 *     action: "run",
 *     tags: [
 *         "demo",
 *         "test",
 *     ],
 * });
 * ```
 */
export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    public readonly _id!: pulumi.Output<string>;
    /**
     * Action to be allowed. Possible values:
     * - __create__
     * - __read__
     * - __update__
     * - __delete__
     * - __run__ (Only valid for `pipeline` resource)
     * - __approve__ (Only valid for `pipeline` resource)
     * - __debug__ (Only valid for `pipeline` resource)
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The type of resource the permission applies to. Possible values:
     * - __pipeline__
     * - __cluster__
     */
    public readonly resource!: pulumi.Output<string>;
    /**
     * The effective tags to apply the permission. It supports 2 custom tags:
     * - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
     * - __*__ (the star character) means all tags.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The Id of the team the permissions apply to.
     */
    public readonly team!: pulumi.Output<string>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["_id"] = state ? state._id : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["team"] = state ? state.team : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.team === undefined) && !opts.urn) {
                throw new Error("Missing required property 'team'");
            }
            resourceInputs["_id"] = args ? args._id : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["team"] = args ? args.team : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    _id?: pulumi.Input<string>;
    /**
     * Action to be allowed. Possible values:
     * - __create__
     * - __read__
     * - __update__
     * - __delete__
     * - __run__ (Only valid for `pipeline` resource)
     * - __approve__ (Only valid for `pipeline` resource)
     * - __debug__ (Only valid for `pipeline` resource)
     */
    action?: pulumi.Input<string>;
    /**
     * The type of resource the permission applies to. Possible values:
     * - __pipeline__
     * - __cluster__
     */
    resource?: pulumi.Input<string>;
    /**
     * The effective tags to apply the permission. It supports 2 custom tags:
     * - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
     * - __*__ (the star character) means all tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Id of the team the permissions apply to.
     */
    team?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    _id?: pulumi.Input<string>;
    /**
     * Action to be allowed. Possible values:
     * - __create__
     * - __read__
     * - __update__
     * - __delete__
     * - __run__ (Only valid for `pipeline` resource)
     * - __approve__ (Only valid for `pipeline` resource)
     * - __debug__ (Only valid for `pipeline` resource)
     */
    action: pulumi.Input<string>;
    /**
     * The type of resource the permission applies to. Possible values:
     * - __pipeline__
     * - __cluster__
     */
    resource: pulumi.Input<string>;
    /**
     * The effective tags to apply the permission. It supports 2 custom tags:
     * - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
     * - __*__ (the star character) means all tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Id of the team the permissions apply to.
     */
    team: pulumi.Input<string>;
}
