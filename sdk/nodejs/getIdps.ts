// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # data codefresh.getIdps
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pierskarsenbarg/codefresh";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const idpAzure = codefresh.getIdps({
 *     displayName: "codefresh-onprem-tst-2",
 *     clientType: "azure",
 * });
 * const local = codefresh.getIdps({
 *     displayName: "local",
 * });
 * const acc = new codefresh.Account("acc", {
 *     features: _var.accountFeatures,
 *     limits: [{
 *         collaborators: 25,
 *         dataRetentionWeeks: 5,
 *     }],
 *     builds: [{
 *         parallel: 25,
 *         nodes: 7,
 *     }],
 * });
 * const user1 = new codefresh.User("user1", {
 *     email: "user1@example.com",
 *     userName: "user1",
 *     activate: true,
 *     roles: [
 *         "Admin",
 *         "User",
 *     ],
 *     logins: [
 *         {
 *             idpId: idpAzure.then(idpAzure => idpAzure.id),
 *             sso: true,
 *         },
 *         {
 *             idpId: local.then(local => local.id),
 *         },
 *     ],
 *     personal: {
 *         firstName: "John",
 *         lastName: "Smith",
 *     },
 *     accounts: [acc.id],
 * });
 * const accIdp = new codefresh.IdpAccounts("accIdp", {
 *     idpId: idpAzure.then(idpAzure => idpAzure.id),
 *     accountIds: [acc.id],
 * });
 * ```
 */
export function getIdps(args?: GetIdpsArgs, opts?: pulumi.InvokeOptions): Promise<GetIdpsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("codefresh:index/getIdps:getIdps", {
        "_id": args._id,
        "clientName": args.clientName,
        "clientType": args.clientType,
        "displayName": args.displayName,
    }, opts);
}

/**
 * A collection of arguments for invoking getIdps.
 */
export interface GetIdpsArgs {
    _id?: string;
    clientName?: string;
    clientType?: string;
    displayName?: string;
}

/**
 * A collection of values returned by getIdps.
 */
export interface GetIdpsResult {
    readonly _id?: string;
    readonly accessToken: string;
    readonly accounts: string[];
    readonly appId: string;
    readonly clientHost: string;
    readonly clientId: string;
    readonly clientName?: string;
    readonly clientSecret: string;
    readonly clientType?: string;
    readonly cookieIv: string;
    readonly cookieKey: string;
    readonly displayName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly scopes: string[];
    readonly tenant: string;
}

export function getIdpsOutput(args?: GetIdpsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdpsResult> {
    return pulumi.output(args).apply(a => getIdps(a, opts))
}

/**
 * A collection of arguments for invoking getIdps.
 */
export interface GetIdpsOutputArgs {
    _id?: pulumi.Input<string>;
    clientName?: pulumi.Input<string>;
    clientType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
}
