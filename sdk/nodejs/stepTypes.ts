// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Step-types Resource
 *
 * The Step-types resource allows to create your own typed step and manage all it's published versions.
 * The resource allows to handle the life-cycle of the version by allowing specifying multiple blocks `version` where the user provides a version number and the yaml file representing the plugin.
 * More about custom steps in the [official documentation](https://codefresh.io/docs/docs/codefresh-yaml/steps/#creating-a-typed-codefresh-plugin).
 *
 * ## Known limitations and disclaimers
 *
 * ### Version and name in yaml Metadata are ignored.
 * The version and name of the step declared in the yaml files are superseeded by the attributes specified at resource level:
 * - `name` : at top level
 * - `versionNumer`: specified in the `version` block
 *   The above are added/replaced at runtime time.
 *
 * ### Number of API requests
 * This resource makes a lot of additional API calls to validate the steps and retrieve all the version available.
 * Caution is recommended on the amount of versions maintained and the number of resources defined in a single project.
 */
export class StepTypes extends pulumi.CustomResource {
    /**
     * Get an existing StepTypes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StepTypesState, opts?: pulumi.CustomResourceOptions): StepTypes {
        return new StepTypes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/stepTypes:StepTypes';

    /**
     * Returns true if the given object is an instance of StepTypes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StepTypes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StepTypes.__pulumiType;
    }

    /**
     * The name for the step-type
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A collection of `version` blocks as documented below.
     */
    public readonly versions!: pulumi.Output<outputs.StepTypesVersion[]>;

    /**
     * Create a StepTypes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StepTypesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StepTypesArgs | StepTypesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StepTypesState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["versions"] = state ? state.versions : undefined;
        } else {
            const args = argsOrState as StepTypesArgs | undefined;
            if ((!args || args.versions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versions'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["versions"] = args ? args.versions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StepTypes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StepTypes resources.
 */
export interface StepTypesState {
    /**
     * The name for the step-type
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of `version` blocks as documented below.
     */
    versions?: pulumi.Input<pulumi.Input<inputs.StepTypesVersion>[]>;
}

/**
 * The set of arguments for constructing a StepTypes resource.
 */
export interface StepTypesArgs {
    /**
     * The name for the step-type
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of `version` blocks as documented below.
     */
    versions: pulumi.Input<pulumi.Input<inputs.StepTypesVersion>[]>;
}
