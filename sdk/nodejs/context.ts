// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Context Resource
 *
 * A Context is an  authentication/configuration that is used by Codefresh system and engine.
 * There are multiple types of context available in Codefresh but they all have the following main components to define them:
 * * Name: A unique identifier for the context
 * * Type: A string representing the type of context
 * * Data: A data structure that provide the information related to the Context. This differs based on the type of context selected
 *   For more details of the Context spec see in the [CLI official documentation](https://codefresh-io.github.io/cli/contexts/spec/)
 *
 * ## Supported types
 *
 * Currently the provider support the following types of Context:
 * * config (Shared Config )
 * * secret (Shared Secret)
 * * yaml (YAML Configuration Context)
 * * secret-yaml (Secret YAML Configuration Context)
 *
 * ### Shared Configuration
 * A Shared Configuration is the entity in Codefresh that allow to create values in a central place that can then be consumed in pipelines to keep them DRY.
 * More details in the official [Shared Configuration documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)
 *
 * #### Example Usage of config (Shared Config)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const test_config = new codefresh.Context("test-config", {
 *     spec: {
 *         config: {
 *             data: {
 *                 var1: "value1",
 *                 var2: "value2",
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * #### Example Usage of secret (Shared Secret)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const test_secret = new codefresh.Context("test-secret", {
 *     spec: {
 *         secret: {
 *             data: {
 *                 var1: "value1",
 *                 var2: "value2",
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * #### Example Usage of yaml (YAML Configuration Context)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pulumi/codefresh";
 *
 * const test_yaml = new codefresh.Context("test-yaml", {
 *     spec: {
 *         // NOTE: you can also load the yaml from a file with `yaml = file("PATH-TO-FILE.yaml")`
 *         yaml: `test:
 *   nested_value: value1
 *   list:
 *     - test2
 *     - test3
 * another_element: value
 * `,
 *     },
 * });
 * ```
 *
 * #### Example Usage of secret-yaml (Secret YAML Configuration Context)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as codefresh from "@pierskarsenbarg/codefresh";
 * import * as fs from "fs";
 *
 * const test_secret_yaml = new codefresh.Context("test-secret-yaml", {spec: {
 *     secretyaml: fs.readFileSync("test.yaml"),
 * }});
 * ```
 */
export class Context extends pulumi.CustomResource {
    /**
     * Get an existing Context resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContextState, opts?: pulumi.CustomResourceOptions): Context {
        return new Context(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/context:Context';

    /**
     * Returns true if the given object is an instance of Context.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Context {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Context.__pulumiType;
    }

    /**
     * The display name for the context.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `spec` block as documented below.
     */
    public readonly spec!: pulumi.Output<outputs.ContextSpec>;

    /**
     * Create a Context resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContextArgs | ContextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContextState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as ContextArgs | undefined;
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Context.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Context resources.
 */
export interface ContextState {
    /**
     * The display name for the context.
     */
    name?: pulumi.Input<string>;
    /**
     * A `spec` block as documented below.
     */
    spec?: pulumi.Input<inputs.ContextSpec>;
}

/**
 * The set of arguments for constructing a Context resource.
 */
export interface ContextArgs {
    /**
     * The display name for the context.
     */
    name?: pulumi.Input<string>;
    /**
     * A `spec` block as documented below.
     */
    spec: pulumi.Input<inputs.ContextSpec>;
}
