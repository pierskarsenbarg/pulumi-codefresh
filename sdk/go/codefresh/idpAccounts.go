// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # IDP Admins resource
//
// The resource adds the list of provided account IDs to the IDP.\
// Because of the current Codefresh API limitation it's impossible to remove account from IDP, only adding is supporting.
//
// ## Import
//
// ```sh
//
//	$ pulumi import codefresh:index/idpAccounts:IdpAccounts test xxxxxxxxxxxxxxxxxxx
//
// ```
type IdpAccounts struct {
	pulumi.CustomResourceState

	AccountIds pulumi.StringArrayOutput `pulumi:"accountIds"`
	IdpId      pulumi.StringOutput      `pulumi:"idpId"`
}

// NewIdpAccounts registers a new resource with the given unique name, arguments, and options.
func NewIdpAccounts(ctx *pulumi.Context,
	name string, args *IdpAccountsArgs, opts ...pulumi.ResourceOption) (*IdpAccounts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountIds == nil {
		return nil, errors.New("invalid value for required argument 'AccountIds'")
	}
	if args.IdpId == nil {
		return nil, errors.New("invalid value for required argument 'IdpId'")
	}
	var resource IdpAccounts
	err := ctx.RegisterResource("codefresh:index/idpAccounts:IdpAccounts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdpAccounts gets an existing IdpAccounts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdpAccounts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdpAccountsState, opts ...pulumi.ResourceOption) (*IdpAccounts, error) {
	var resource IdpAccounts
	err := ctx.ReadResource("codefresh:index/idpAccounts:IdpAccounts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdpAccounts resources.
type idpAccountsState struct {
	AccountIds []string `pulumi:"accountIds"`
	IdpId      *string  `pulumi:"idpId"`
}

type IdpAccountsState struct {
	AccountIds pulumi.StringArrayInput
	IdpId      pulumi.StringPtrInput
}

func (IdpAccountsState) ElementType() reflect.Type {
	return reflect.TypeOf((*idpAccountsState)(nil)).Elem()
}

type idpAccountsArgs struct {
	AccountIds []string `pulumi:"accountIds"`
	IdpId      string   `pulumi:"idpId"`
}

// The set of arguments for constructing a IdpAccounts resource.
type IdpAccountsArgs struct {
	AccountIds pulumi.StringArrayInput
	IdpId      pulumi.StringInput
}

func (IdpAccountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idpAccountsArgs)(nil)).Elem()
}

type IdpAccountsInput interface {
	pulumi.Input

	ToIdpAccountsOutput() IdpAccountsOutput
	ToIdpAccountsOutputWithContext(ctx context.Context) IdpAccountsOutput
}

func (*IdpAccounts) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpAccounts)(nil)).Elem()
}

func (i *IdpAccounts) ToIdpAccountsOutput() IdpAccountsOutput {
	return i.ToIdpAccountsOutputWithContext(context.Background())
}

func (i *IdpAccounts) ToIdpAccountsOutputWithContext(ctx context.Context) IdpAccountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpAccountsOutput)
}

// IdpAccountsArrayInput is an input type that accepts IdpAccountsArray and IdpAccountsArrayOutput values.
// You can construct a concrete instance of `IdpAccountsArrayInput` via:
//
//	IdpAccountsArray{ IdpAccountsArgs{...} }
type IdpAccountsArrayInput interface {
	pulumi.Input

	ToIdpAccountsArrayOutput() IdpAccountsArrayOutput
	ToIdpAccountsArrayOutputWithContext(context.Context) IdpAccountsArrayOutput
}

type IdpAccountsArray []IdpAccountsInput

func (IdpAccountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpAccounts)(nil)).Elem()
}

func (i IdpAccountsArray) ToIdpAccountsArrayOutput() IdpAccountsArrayOutput {
	return i.ToIdpAccountsArrayOutputWithContext(context.Background())
}

func (i IdpAccountsArray) ToIdpAccountsArrayOutputWithContext(ctx context.Context) IdpAccountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpAccountsArrayOutput)
}

// IdpAccountsMapInput is an input type that accepts IdpAccountsMap and IdpAccountsMapOutput values.
// You can construct a concrete instance of `IdpAccountsMapInput` via:
//
//	IdpAccountsMap{ "key": IdpAccountsArgs{...} }
type IdpAccountsMapInput interface {
	pulumi.Input

	ToIdpAccountsMapOutput() IdpAccountsMapOutput
	ToIdpAccountsMapOutputWithContext(context.Context) IdpAccountsMapOutput
}

type IdpAccountsMap map[string]IdpAccountsInput

func (IdpAccountsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpAccounts)(nil)).Elem()
}

func (i IdpAccountsMap) ToIdpAccountsMapOutput() IdpAccountsMapOutput {
	return i.ToIdpAccountsMapOutputWithContext(context.Background())
}

func (i IdpAccountsMap) ToIdpAccountsMapOutputWithContext(ctx context.Context) IdpAccountsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpAccountsMapOutput)
}

type IdpAccountsOutput struct{ *pulumi.OutputState }

func (IdpAccountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpAccounts)(nil)).Elem()
}

func (o IdpAccountsOutput) ToIdpAccountsOutput() IdpAccountsOutput {
	return o
}

func (o IdpAccountsOutput) ToIdpAccountsOutputWithContext(ctx context.Context) IdpAccountsOutput {
	return o
}

func (o IdpAccountsOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdpAccounts) pulumi.StringArrayOutput { return v.AccountIds }).(pulumi.StringArrayOutput)
}

func (o IdpAccountsOutput) IdpId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpAccounts) pulumi.StringOutput { return v.IdpId }).(pulumi.StringOutput)
}

type IdpAccountsArrayOutput struct{ *pulumi.OutputState }

func (IdpAccountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpAccounts)(nil)).Elem()
}

func (o IdpAccountsArrayOutput) ToIdpAccountsArrayOutput() IdpAccountsArrayOutput {
	return o
}

func (o IdpAccountsArrayOutput) ToIdpAccountsArrayOutputWithContext(ctx context.Context) IdpAccountsArrayOutput {
	return o
}

func (o IdpAccountsArrayOutput) Index(i pulumi.IntInput) IdpAccountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdpAccounts {
		return vs[0].([]*IdpAccounts)[vs[1].(int)]
	}).(IdpAccountsOutput)
}

type IdpAccountsMapOutput struct{ *pulumi.OutputState }

func (IdpAccountsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpAccounts)(nil)).Elem()
}

func (o IdpAccountsMapOutput) ToIdpAccountsMapOutput() IdpAccountsMapOutput {
	return o
}

func (o IdpAccountsMapOutput) ToIdpAccountsMapOutputWithContext(ctx context.Context) IdpAccountsMapOutput {
	return o
}

func (o IdpAccountsMapOutput) MapIndex(k pulumi.StringInput) IdpAccountsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdpAccounts {
		return vs[0].(map[string]*IdpAccounts)[vs[1].(string)]
	}).(IdpAccountsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdpAccountsInput)(nil)).Elem(), &IdpAccounts{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpAccountsArrayInput)(nil)).Elem(), IdpAccountsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpAccountsMapInput)(nil)).Elem(), IdpAccountsMap{})
	pulumi.RegisterOutputType(IdpAccountsOutput{})
	pulumi.RegisterOutputType(IdpAccountsArrayOutput{})
	pulumi.RegisterOutputType(IdpAccountsMapOutput{})
}
