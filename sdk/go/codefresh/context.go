// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Context Resource
//
// A Context is an  authentication/configuration that is used by Codefresh system and engine.
// There are multiple types of context available in Codefresh but they all have the following main components to define them:
//   - Name: A unique identifier for the context
//   - Type: A string representing the type of context
//   - Data: A data structure that provide the information related to the Context. This differs based on the type of context selected
//     For more details of the Context spec see in the [CLI official documentation](https://codefresh-io.github.io/cli/contexts/spec/)
//
// ## Supported types
//
// Currently the provider support the following types of Context:
// * config (Shared Config )
// * secret (Shared Secret)
// * yaml (YAML Configuration Context)
// * secret-yaml (Secret YAML Configuration Context)
//
// ### Shared Configuration
// A Shared Configuration is the entity in Codefresh that allow to create values in a central place that can then be consumed in pipelines to keep them DRY.
// More details in the official [Shared Configuration documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)
//
// #### Example Usage of config (Shared Config)
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codefresh.NewContext(ctx, "test-config", &codefresh.ContextArgs{
//				Spec: &ContextSpecArgs{
//					Config: &ContextSpecConfigArgs{
//						Data: pulumi.StringMap{
//							"var1": pulumi.String("value1"),
//							"var2": pulumi.String("value2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// #### Example Usage of secret (Shared Secret)
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codefresh.NewContext(ctx, "test-secret", &codefresh.ContextArgs{
//				Spec: &ContextSpecArgs{
//					Secret: &ContextSpecSecretArgs{
//						Data: pulumi.StringMap{
//							"var1": pulumi.String("value1"),
//							"var2": pulumi.String("value2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// #### Example Usage of yaml (YAML Configuration Context)
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codefresh.NewContext(ctx, "test-yaml", &codefresh.ContextArgs{
//				Spec: &ContextSpecArgs{
//					Yaml: fmt.Sprintf(`test:
//	  nested_value: value1
//	  list:
//	    - test2
//	    - test3
//
// another_element: value
//
// `),
//
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// #### Example Usage of secret-yaml (Secret YAML Configuration Context)
// ```go
// package main
//
// import (
//
//	"io/ioutil"
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codefresh.NewContext(ctx, "test-secret-yaml", &codefresh.ContextArgs{
//				Spec: &ContextSpecArgs{
//					Secretyaml: readFileOrPanic("test.yaml"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Context struct {
	pulumi.CustomResourceState

	// The display name for the context.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `spec` block as documented below.
	Spec ContextSpecOutput `pulumi:"spec"`
}

// NewContext registers a new resource with the given unique name, arguments, and options.
func NewContext(ctx *pulumi.Context,
	name string, args *ContextArgs, opts ...pulumi.ResourceOption) (*Context, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	var resource Context
	err := ctx.RegisterResource("codefresh:index/context:Context", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContext gets an existing Context resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContextState, opts ...pulumi.ResourceOption) (*Context, error) {
	var resource Context
	err := ctx.ReadResource("codefresh:index/context:Context", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Context resources.
type contextState struct {
	// The display name for the context.
	Name *string `pulumi:"name"`
	// A `spec` block as documented below.
	Spec *ContextSpec `pulumi:"spec"`
}

type ContextState struct {
	// The display name for the context.
	Name pulumi.StringPtrInput
	// A `spec` block as documented below.
	Spec ContextSpecPtrInput
}

func (ContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*contextState)(nil)).Elem()
}

type contextArgs struct {
	// The display name for the context.
	Name *string `pulumi:"name"`
	// A `spec` block as documented below.
	Spec ContextSpec `pulumi:"spec"`
}

// The set of arguments for constructing a Context resource.
type ContextArgs struct {
	// The display name for the context.
	Name pulumi.StringPtrInput
	// A `spec` block as documented below.
	Spec ContextSpecInput
}

func (ContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contextArgs)(nil)).Elem()
}

type ContextInput interface {
	pulumi.Input

	ToContextOutput() ContextOutput
	ToContextOutputWithContext(ctx context.Context) ContextOutput
}

func (*Context) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (i *Context) ToContextOutput() ContextOutput {
	return i.ToContextOutputWithContext(context.Background())
}

func (i *Context) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput)
}

// ContextArrayInput is an input type that accepts ContextArray and ContextArrayOutput values.
// You can construct a concrete instance of `ContextArrayInput` via:
//
//	ContextArray{ ContextArgs{...} }
type ContextArrayInput interface {
	pulumi.Input

	ToContextArrayOutput() ContextArrayOutput
	ToContextArrayOutputWithContext(context.Context) ContextArrayOutput
}

type ContextArray []ContextInput

func (ContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Context)(nil)).Elem()
}

func (i ContextArray) ToContextArrayOutput() ContextArrayOutput {
	return i.ToContextArrayOutputWithContext(context.Background())
}

func (i ContextArray) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextArrayOutput)
}

// ContextMapInput is an input type that accepts ContextMap and ContextMapOutput values.
// You can construct a concrete instance of `ContextMapInput` via:
//
//	ContextMap{ "key": ContextArgs{...} }
type ContextMapInput interface {
	pulumi.Input

	ToContextMapOutput() ContextMapOutput
	ToContextMapOutputWithContext(context.Context) ContextMapOutput
}

type ContextMap map[string]ContextInput

func (ContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Context)(nil)).Elem()
}

func (i ContextMap) ToContextMapOutput() ContextMapOutput {
	return i.ToContextMapOutputWithContext(context.Background())
}

func (i ContextMap) ToContextMapOutputWithContext(ctx context.Context) ContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextMapOutput)
}

type ContextOutput struct{ *pulumi.OutputState }

func (ContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (o ContextOutput) ToContextOutput() ContextOutput {
	return o
}

func (o ContextOutput) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return o
}

// The display name for the context.
func (o ContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `spec` block as documented below.
func (o ContextOutput) Spec() ContextSpecOutput {
	return o.ApplyT(func(v *Context) ContextSpecOutput { return v.Spec }).(ContextSpecOutput)
}

type ContextArrayOutput struct{ *pulumi.OutputState }

func (ContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Context)(nil)).Elem()
}

func (o ContextArrayOutput) ToContextArrayOutput() ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) Index(i pulumi.IntInput) ContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Context {
		return vs[0].([]*Context)[vs[1].(int)]
	}).(ContextOutput)
}

type ContextMapOutput struct{ *pulumi.OutputState }

func (ContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Context)(nil)).Elem()
}

func (o ContextMapOutput) ToContextMapOutput() ContextMapOutput {
	return o
}

func (o ContextMapOutput) ToContextMapOutputWithContext(ctx context.Context) ContextMapOutput {
	return o
}

func (o ContextMapOutput) MapIndex(k pulumi.StringInput) ContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Context {
		return vs[0].(map[string]*Context)[vs[1].(string)]
	}).(ContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContextInput)(nil)).Elem(), &Context{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextArrayInput)(nil)).Elem(), ContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextMapInput)(nil)).Elem(), ContextMap{})
	pulumi.RegisterOutputType(ContextOutput{})
	pulumi.RegisterOutputType(ContextArrayOutput{})
	pulumi.RegisterOutputType(ContextMapOutput{})
}
