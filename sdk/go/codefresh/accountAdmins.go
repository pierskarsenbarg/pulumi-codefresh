// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Account Admins resource
//
// Use this resource to set a list of admins for any account.
//
// ## Example Usage
// ### Example 2
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAccount, err := codefresh.NewAccount(ctx, "testAccount", &codefresh.AccountArgs{
//				Limits: AccountLimitArray{
//					&AccountLimitArgs{
//						Collaborators:      pulumi.Int(25),
//						DataRetentionWeeks: pulumi.Int(5),
//					},
//				},
//				Builds: AccountBuildArray{
//					&AccountBuildArgs{
//						Parallel: pulumi.Int(2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := codefresh.LookupUser(ctx, &GetUserArgs{
//				Email: "<EXISTING USER EMAIL>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = codefresh.NewAccountAdmins(ctx, "testAccountAdmins", &codefresh.AccountAdminsArgs{
//				AccountId: testAccount.ID(),
//				Users: pulumi.StringArray{
//					pulumi.String(admin.UserId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import codefresh:index/accountAdmins:AccountAdmins test xxxxxxxxxxxxxxxxxxx
//
// ```
type AccountAdmins struct {
	pulumi.CustomResourceState

	// The account id where to set up a list of admins.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A list of users to set up as account admins.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewAccountAdmins registers a new resource with the given unique name, arguments, and options.
func NewAccountAdmins(ctx *pulumi.Context,
	name string, args *AccountAdminsArgs, opts ...pulumi.ResourceOption) (*AccountAdmins, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource AccountAdmins
	err := ctx.RegisterResource("codefresh:index/accountAdmins:AccountAdmins", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountAdmins gets an existing AccountAdmins resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountAdmins(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountAdminsState, opts ...pulumi.ResourceOption) (*AccountAdmins, error) {
	var resource AccountAdmins
	err := ctx.ReadResource("codefresh:index/accountAdmins:AccountAdmins", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountAdmins resources.
type accountAdminsState struct {
	// The account id where to set up a list of admins.
	AccountId *string `pulumi:"accountId"`
	// A list of users to set up as account admins.
	Users []string `pulumi:"users"`
}

type AccountAdminsState struct {
	// The account id where to set up a list of admins.
	AccountId pulumi.StringPtrInput
	// A list of users to set up as account admins.
	Users pulumi.StringArrayInput
}

func (AccountAdminsState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountAdminsState)(nil)).Elem()
}

type accountAdminsArgs struct {
	// The account id where to set up a list of admins.
	AccountId string `pulumi:"accountId"`
	// A list of users to set up as account admins.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a AccountAdmins resource.
type AccountAdminsArgs struct {
	// The account id where to set up a list of admins.
	AccountId pulumi.StringInput
	// A list of users to set up as account admins.
	Users pulumi.StringArrayInput
}

func (AccountAdminsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountAdminsArgs)(nil)).Elem()
}

type AccountAdminsInput interface {
	pulumi.Input

	ToAccountAdminsOutput() AccountAdminsOutput
	ToAccountAdminsOutputWithContext(ctx context.Context) AccountAdminsOutput
}

func (*AccountAdmins) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountAdmins)(nil)).Elem()
}

func (i *AccountAdmins) ToAccountAdminsOutput() AccountAdminsOutput {
	return i.ToAccountAdminsOutputWithContext(context.Background())
}

func (i *AccountAdmins) ToAccountAdminsOutputWithContext(ctx context.Context) AccountAdminsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAdminsOutput)
}

// AccountAdminsArrayInput is an input type that accepts AccountAdminsArray and AccountAdminsArrayOutput values.
// You can construct a concrete instance of `AccountAdminsArrayInput` via:
//
//	AccountAdminsArray{ AccountAdminsArgs{...} }
type AccountAdminsArrayInput interface {
	pulumi.Input

	ToAccountAdminsArrayOutput() AccountAdminsArrayOutput
	ToAccountAdminsArrayOutputWithContext(context.Context) AccountAdminsArrayOutput
}

type AccountAdminsArray []AccountAdminsInput

func (AccountAdminsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountAdmins)(nil)).Elem()
}

func (i AccountAdminsArray) ToAccountAdminsArrayOutput() AccountAdminsArrayOutput {
	return i.ToAccountAdminsArrayOutputWithContext(context.Background())
}

func (i AccountAdminsArray) ToAccountAdminsArrayOutputWithContext(ctx context.Context) AccountAdminsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAdminsArrayOutput)
}

// AccountAdminsMapInput is an input type that accepts AccountAdminsMap and AccountAdminsMapOutput values.
// You can construct a concrete instance of `AccountAdminsMapInput` via:
//
//	AccountAdminsMap{ "key": AccountAdminsArgs{...} }
type AccountAdminsMapInput interface {
	pulumi.Input

	ToAccountAdminsMapOutput() AccountAdminsMapOutput
	ToAccountAdminsMapOutputWithContext(context.Context) AccountAdminsMapOutput
}

type AccountAdminsMap map[string]AccountAdminsInput

func (AccountAdminsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountAdmins)(nil)).Elem()
}

func (i AccountAdminsMap) ToAccountAdminsMapOutput() AccountAdminsMapOutput {
	return i.ToAccountAdminsMapOutputWithContext(context.Background())
}

func (i AccountAdminsMap) ToAccountAdminsMapOutputWithContext(ctx context.Context) AccountAdminsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAdminsMapOutput)
}

type AccountAdminsOutput struct{ *pulumi.OutputState }

func (AccountAdminsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountAdmins)(nil)).Elem()
}

func (o AccountAdminsOutput) ToAccountAdminsOutput() AccountAdminsOutput {
	return o
}

func (o AccountAdminsOutput) ToAccountAdminsOutputWithContext(ctx context.Context) AccountAdminsOutput {
	return o
}

// The account id where to set up a list of admins.
func (o AccountAdminsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountAdmins) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A list of users to set up as account admins.
func (o AccountAdminsOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountAdmins) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type AccountAdminsArrayOutput struct{ *pulumi.OutputState }

func (AccountAdminsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountAdmins)(nil)).Elem()
}

func (o AccountAdminsArrayOutput) ToAccountAdminsArrayOutput() AccountAdminsArrayOutput {
	return o
}

func (o AccountAdminsArrayOutput) ToAccountAdminsArrayOutputWithContext(ctx context.Context) AccountAdminsArrayOutput {
	return o
}

func (o AccountAdminsArrayOutput) Index(i pulumi.IntInput) AccountAdminsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountAdmins {
		return vs[0].([]*AccountAdmins)[vs[1].(int)]
	}).(AccountAdminsOutput)
}

type AccountAdminsMapOutput struct{ *pulumi.OutputState }

func (AccountAdminsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountAdmins)(nil)).Elem()
}

func (o AccountAdminsMapOutput) ToAccountAdminsMapOutput() AccountAdminsMapOutput {
	return o
}

func (o AccountAdminsMapOutput) ToAccountAdminsMapOutputWithContext(ctx context.Context) AccountAdminsMapOutput {
	return o
}

func (o AccountAdminsMapOutput) MapIndex(k pulumi.StringInput) AccountAdminsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountAdmins {
		return vs[0].(map[string]*AccountAdmins)[vs[1].(string)]
	}).(AccountAdminsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAdminsInput)(nil)).Elem(), &AccountAdmins{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAdminsArrayInput)(nil)).Elem(), AccountAdminsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAdminsMapInput)(nil)).Elem(), AccountAdminsMap{})
	pulumi.RegisterOutputType(AccountAdminsOutput{})
	pulumi.RegisterOutputType(AccountAdminsArrayOutput{})
	pulumi.RegisterOutputType(AccountAdminsMapOutput{})
}
