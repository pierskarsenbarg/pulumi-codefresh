// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Pipeline Cron Trigger resource
//
// Pipeline Cron Trigger is used to create cron-based triggers for pipeilnes.
// See the [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/cron-triggers/).
type PipelineCronTrigger struct {
	pulumi.CustomResourceState

	// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// The message which will be passed to the pipeline upon each trigger.
	Message pulumi.StringOutput `pulumi:"message"`
	// The pipeline to which this trigger belongs.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
}

// NewPipelineCronTrigger registers a new resource with the given unique name, arguments, and options.
func NewPipelineCronTrigger(ctx *pulumi.Context,
	name string, args *PipelineCronTriggerArgs, opts ...pulumi.ResourceOption) (*PipelineCronTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	var resource PipelineCronTrigger
	err := ctx.RegisterResource("codefresh:index/pipelineCronTrigger:PipelineCronTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineCronTrigger gets an existing PipelineCronTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineCronTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineCronTriggerState, opts ...pulumi.ResourceOption) (*PipelineCronTrigger, error) {
	var resource PipelineCronTrigger
	err := ctx.ReadResource("codefresh:index/pipelineCronTrigger:PipelineCronTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineCronTrigger resources.
type pipelineCronTriggerState struct {
	// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
	Expression *string `pulumi:"expression"`
	// The message which will be passed to the pipeline upon each trigger.
	Message *string `pulumi:"message"`
	// The pipeline to which this trigger belongs.
	PipelineId *string `pulumi:"pipelineId"`
}

type PipelineCronTriggerState struct {
	// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
	Expression pulumi.StringPtrInput
	// The message which will be passed to the pipeline upon each trigger.
	Message pulumi.StringPtrInput
	// The pipeline to which this trigger belongs.
	PipelineId pulumi.StringPtrInput
}

func (PipelineCronTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineCronTriggerState)(nil)).Elem()
}

type pipelineCronTriggerArgs struct {
	// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
	Expression string `pulumi:"expression"`
	// The message which will be passed to the pipeline upon each trigger.
	Message string `pulumi:"message"`
	// The pipeline to which this trigger belongs.
	PipelineId string `pulumi:"pipelineId"`
}

// The set of arguments for constructing a PipelineCronTrigger resource.
type PipelineCronTriggerArgs struct {
	// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
	Expression pulumi.StringInput
	// The message which will be passed to the pipeline upon each trigger.
	Message pulumi.StringInput
	// The pipeline to which this trigger belongs.
	PipelineId pulumi.StringInput
}

func (PipelineCronTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineCronTriggerArgs)(nil)).Elem()
}

type PipelineCronTriggerInput interface {
	pulumi.Input

	ToPipelineCronTriggerOutput() PipelineCronTriggerOutput
	ToPipelineCronTriggerOutputWithContext(ctx context.Context) PipelineCronTriggerOutput
}

func (*PipelineCronTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineCronTrigger)(nil)).Elem()
}

func (i *PipelineCronTrigger) ToPipelineCronTriggerOutput() PipelineCronTriggerOutput {
	return i.ToPipelineCronTriggerOutputWithContext(context.Background())
}

func (i *PipelineCronTrigger) ToPipelineCronTriggerOutputWithContext(ctx context.Context) PipelineCronTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCronTriggerOutput)
}

// PipelineCronTriggerArrayInput is an input type that accepts PipelineCronTriggerArray and PipelineCronTriggerArrayOutput values.
// You can construct a concrete instance of `PipelineCronTriggerArrayInput` via:
//
//	PipelineCronTriggerArray{ PipelineCronTriggerArgs{...} }
type PipelineCronTriggerArrayInput interface {
	pulumi.Input

	ToPipelineCronTriggerArrayOutput() PipelineCronTriggerArrayOutput
	ToPipelineCronTriggerArrayOutputWithContext(context.Context) PipelineCronTriggerArrayOutput
}

type PipelineCronTriggerArray []PipelineCronTriggerInput

func (PipelineCronTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineCronTrigger)(nil)).Elem()
}

func (i PipelineCronTriggerArray) ToPipelineCronTriggerArrayOutput() PipelineCronTriggerArrayOutput {
	return i.ToPipelineCronTriggerArrayOutputWithContext(context.Background())
}

func (i PipelineCronTriggerArray) ToPipelineCronTriggerArrayOutputWithContext(ctx context.Context) PipelineCronTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCronTriggerArrayOutput)
}

// PipelineCronTriggerMapInput is an input type that accepts PipelineCronTriggerMap and PipelineCronTriggerMapOutput values.
// You can construct a concrete instance of `PipelineCronTriggerMapInput` via:
//
//	PipelineCronTriggerMap{ "key": PipelineCronTriggerArgs{...} }
type PipelineCronTriggerMapInput interface {
	pulumi.Input

	ToPipelineCronTriggerMapOutput() PipelineCronTriggerMapOutput
	ToPipelineCronTriggerMapOutputWithContext(context.Context) PipelineCronTriggerMapOutput
}

type PipelineCronTriggerMap map[string]PipelineCronTriggerInput

func (PipelineCronTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineCronTrigger)(nil)).Elem()
}

func (i PipelineCronTriggerMap) ToPipelineCronTriggerMapOutput() PipelineCronTriggerMapOutput {
	return i.ToPipelineCronTriggerMapOutputWithContext(context.Background())
}

func (i PipelineCronTriggerMap) ToPipelineCronTriggerMapOutputWithContext(ctx context.Context) PipelineCronTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCronTriggerMapOutput)
}

type PipelineCronTriggerOutput struct{ *pulumi.OutputState }

func (PipelineCronTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineCronTrigger)(nil)).Elem()
}

func (o PipelineCronTriggerOutput) ToPipelineCronTriggerOutput() PipelineCronTriggerOutput {
	return o
}

func (o PipelineCronTriggerOutput) ToPipelineCronTriggerOutputWithContext(ctx context.Context) PipelineCronTriggerOutput {
	return o
}

// The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.
func (o PipelineCronTriggerOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCronTrigger) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

// The message which will be passed to the pipeline upon each trigger.
func (o PipelineCronTriggerOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCronTrigger) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The pipeline to which this trigger belongs.
func (o PipelineCronTriggerOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCronTrigger) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

type PipelineCronTriggerArrayOutput struct{ *pulumi.OutputState }

func (PipelineCronTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineCronTrigger)(nil)).Elem()
}

func (o PipelineCronTriggerArrayOutput) ToPipelineCronTriggerArrayOutput() PipelineCronTriggerArrayOutput {
	return o
}

func (o PipelineCronTriggerArrayOutput) ToPipelineCronTriggerArrayOutputWithContext(ctx context.Context) PipelineCronTriggerArrayOutput {
	return o
}

func (o PipelineCronTriggerArrayOutput) Index(i pulumi.IntInput) PipelineCronTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineCronTrigger {
		return vs[0].([]*PipelineCronTrigger)[vs[1].(int)]
	}).(PipelineCronTriggerOutput)
}

type PipelineCronTriggerMapOutput struct{ *pulumi.OutputState }

func (PipelineCronTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineCronTrigger)(nil)).Elem()
}

func (o PipelineCronTriggerMapOutput) ToPipelineCronTriggerMapOutput() PipelineCronTriggerMapOutput {
	return o
}

func (o PipelineCronTriggerMapOutput) ToPipelineCronTriggerMapOutputWithContext(ctx context.Context) PipelineCronTriggerMapOutput {
	return o
}

func (o PipelineCronTriggerMapOutput) MapIndex(k pulumi.StringInput) PipelineCronTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineCronTrigger {
		return vs[0].(map[string]*PipelineCronTrigger)[vs[1].(string)]
	}).(PipelineCronTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCronTriggerInput)(nil)).Elem(), &PipelineCronTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCronTriggerArrayInput)(nil)).Elem(), PipelineCronTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCronTriggerMapInput)(nil)).Elem(), PipelineCronTriggerMap{})
	pulumi.RegisterOutputType(PipelineCronTriggerOutput{})
	pulumi.RegisterOutputType(PipelineCronTriggerArrayOutput{})
	pulumi.RegisterOutputType(PipelineCronTriggerMapOutput{})
}
