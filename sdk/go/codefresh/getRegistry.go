// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: Registry
//
// # This data source allows retrieving information on any existing registry
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dockerhub, err := codefresh.LookupRegistry(ctx, &GetRegistryArgs{
//				Name: "dockerhub",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = codefresh.NewRegistry(ctx, "dockerhub1", &codefresh.RegistryArgs{
//				Primary: !dockerhub.Primary,
//				Spec: &RegistrySpecArgs{
//					Dockerhub: &RegistrySpecDockerhubArgs{
//						Username: pulumi.String("test"),
//						Password: pulumi.String("test"),
//					},
//				},
//				FallbackRegistry: pulumi.String(dockerhub.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRegistry(ctx *pulumi.Context, args *LookupRegistryArgs, opts ...pulumi.InvokeOption) (*LookupRegistryResult, error) {
	var rv LookupRegistryResult
	err := ctx.Invoke("codefresh:index/getRegistry:getRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryArgs struct {
	// Name of the registry to be retrieved
	Name string `pulumi:"name"`
}

// A collection of values returned by getRegistry.
type LookupRegistryResult struct {
	// Bool.
	Default bool `pulumi:"default"`
	// String.
	Domain string `pulumi:"domain"`
	// String representing the id of the fallback registry.
	// * `repository prefix` - String representing the optional prefix for registry.
	FallbackRegistry string `pulumi:"fallbackRegistry"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Kind string `pulumi:"kind"`
	Name string `pulumi:"name"`
	// Bool.
	Primary bool `pulumi:"primary"`
	// String identifying the type of registry. E.g. `dockerhub, ecr, acr` and others
	RegistryProvider string `pulumi:"registryProvider"`
	RepositoryPrefix string `pulumi:"repositoryPrefix"`
}

func LookupRegistryOutput(ctx *pulumi.Context, args LookupRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegistryResult, error) {
			args := v.(LookupRegistryArgs)
			r, err := LookupRegistry(ctx, &args, opts...)
			var s LookupRegistryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegistryResultOutput)
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryOutputArgs struct {
	// Name of the registry to be retrieved
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getRegistry.
type LookupRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryResult)(nil)).Elem()
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutput() LookupRegistryResultOutput {
	return o
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutputWithContext(ctx context.Context) LookupRegistryResultOutput {
	return o
}

// Bool.
func (o LookupRegistryResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegistryResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// String.
func (o LookupRegistryResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Domain }).(pulumi.StringOutput)
}

// String representing the id of the fallback registry.
// * `repository prefix` - String representing the optional prefix for registry.
func (o LookupRegistryResultOutput) FallbackRegistry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.FallbackRegistry }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Kind }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Name }).(pulumi.StringOutput)
}

// Bool.
func (o LookupRegistryResultOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegistryResult) bool { return v.Primary }).(pulumi.BoolOutput)
}

// String identifying the type of registry. E.g. `dockerhub, ecr, acr` and others
func (o LookupRegistryResultOutput) RegistryProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.RegistryProvider }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) RepositoryPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.RepositoryPrefix }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryResultOutput{})
}
