// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountBuild struct {
	Nodes *int `pulumi:"nodes"`
	// How many pipelines can be run in parallel.
	// ` `node` - (Optional) Number of nodes.
	Parallel int `pulumi:"parallel"`
}

// AccountBuildInput is an input type that accepts AccountBuildArgs and AccountBuildOutput values.
// You can construct a concrete instance of `AccountBuildInput` via:
//
//	AccountBuildArgs{...}
type AccountBuildInput interface {
	pulumi.Input

	ToAccountBuildOutput() AccountBuildOutput
	ToAccountBuildOutputWithContext(context.Context) AccountBuildOutput
}

type AccountBuildArgs struct {
	Nodes pulumi.IntPtrInput `pulumi:"nodes"`
	// How many pipelines can be run in parallel.
	// ` `node` - (Optional) Number of nodes.
	Parallel pulumi.IntInput `pulumi:"parallel"`
}

func (AccountBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountBuild)(nil)).Elem()
}

func (i AccountBuildArgs) ToAccountBuildOutput() AccountBuildOutput {
	return i.ToAccountBuildOutputWithContext(context.Background())
}

func (i AccountBuildArgs) ToAccountBuildOutputWithContext(ctx context.Context) AccountBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountBuildOutput)
}

// AccountBuildArrayInput is an input type that accepts AccountBuildArray and AccountBuildArrayOutput values.
// You can construct a concrete instance of `AccountBuildArrayInput` via:
//
//	AccountBuildArray{ AccountBuildArgs{...} }
type AccountBuildArrayInput interface {
	pulumi.Input

	ToAccountBuildArrayOutput() AccountBuildArrayOutput
	ToAccountBuildArrayOutputWithContext(context.Context) AccountBuildArrayOutput
}

type AccountBuildArray []AccountBuildInput

func (AccountBuildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountBuild)(nil)).Elem()
}

func (i AccountBuildArray) ToAccountBuildArrayOutput() AccountBuildArrayOutput {
	return i.ToAccountBuildArrayOutputWithContext(context.Background())
}

func (i AccountBuildArray) ToAccountBuildArrayOutputWithContext(ctx context.Context) AccountBuildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountBuildArrayOutput)
}

type AccountBuildOutput struct{ *pulumi.OutputState }

func (AccountBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountBuild)(nil)).Elem()
}

func (o AccountBuildOutput) ToAccountBuildOutput() AccountBuildOutput {
	return o
}

func (o AccountBuildOutput) ToAccountBuildOutputWithContext(ctx context.Context) AccountBuildOutput {
	return o
}

func (o AccountBuildOutput) Nodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountBuild) *int { return v.Nodes }).(pulumi.IntPtrOutput)
}

// How many pipelines can be run in parallel.
// ` `node` - (Optional) Number of nodes.
func (o AccountBuildOutput) Parallel() pulumi.IntOutput {
	return o.ApplyT(func(v AccountBuild) int { return v.Parallel }).(pulumi.IntOutput)
}

type AccountBuildArrayOutput struct{ *pulumi.OutputState }

func (AccountBuildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountBuild)(nil)).Elem()
}

func (o AccountBuildArrayOutput) ToAccountBuildArrayOutput() AccountBuildArrayOutput {
	return o
}

func (o AccountBuildArrayOutput) ToAccountBuildArrayOutputWithContext(ctx context.Context) AccountBuildArrayOutput {
	return o
}

func (o AccountBuildArrayOutput) Index(i pulumi.IntInput) AccountBuildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountBuild {
		return vs[0].([]AccountBuild)[vs[1].(int)]
	}).(AccountBuildOutput)
}

type AccountLimit struct {
	// Max account's collaborators number.
	Collaborators int `pulumi:"collaborators"`
	// -(Optional) How long in weeks will the builds be stored.
	DataRetentionWeeks *int `pulumi:"dataRetentionWeeks"`
}

// AccountLimitInput is an input type that accepts AccountLimitArgs and AccountLimitOutput values.
// You can construct a concrete instance of `AccountLimitInput` via:
//
//	AccountLimitArgs{...}
type AccountLimitInput interface {
	pulumi.Input

	ToAccountLimitOutput() AccountLimitOutput
	ToAccountLimitOutputWithContext(context.Context) AccountLimitOutput
}

type AccountLimitArgs struct {
	// Max account's collaborators number.
	Collaborators pulumi.IntInput `pulumi:"collaborators"`
	// -(Optional) How long in weeks will the builds be stored.
	DataRetentionWeeks pulumi.IntPtrInput `pulumi:"dataRetentionWeeks"`
}

func (AccountLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountLimit)(nil)).Elem()
}

func (i AccountLimitArgs) ToAccountLimitOutput() AccountLimitOutput {
	return i.ToAccountLimitOutputWithContext(context.Background())
}

func (i AccountLimitArgs) ToAccountLimitOutputWithContext(ctx context.Context) AccountLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountLimitOutput)
}

// AccountLimitArrayInput is an input type that accepts AccountLimitArray and AccountLimitArrayOutput values.
// You can construct a concrete instance of `AccountLimitArrayInput` via:
//
//	AccountLimitArray{ AccountLimitArgs{...} }
type AccountLimitArrayInput interface {
	pulumi.Input

	ToAccountLimitArrayOutput() AccountLimitArrayOutput
	ToAccountLimitArrayOutputWithContext(context.Context) AccountLimitArrayOutput
}

type AccountLimitArray []AccountLimitInput

func (AccountLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountLimit)(nil)).Elem()
}

func (i AccountLimitArray) ToAccountLimitArrayOutput() AccountLimitArrayOutput {
	return i.ToAccountLimitArrayOutputWithContext(context.Background())
}

func (i AccountLimitArray) ToAccountLimitArrayOutputWithContext(ctx context.Context) AccountLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountLimitArrayOutput)
}

type AccountLimitOutput struct{ *pulumi.OutputState }

func (AccountLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountLimit)(nil)).Elem()
}

func (o AccountLimitOutput) ToAccountLimitOutput() AccountLimitOutput {
	return o
}

func (o AccountLimitOutput) ToAccountLimitOutputWithContext(ctx context.Context) AccountLimitOutput {
	return o
}

// Max account's collaborators number.
func (o AccountLimitOutput) Collaborators() pulumi.IntOutput {
	return o.ApplyT(func(v AccountLimit) int { return v.Collaborators }).(pulumi.IntOutput)
}

// -(Optional) How long in weeks will the builds be stored.
func (o AccountLimitOutput) DataRetentionWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountLimit) *int { return v.DataRetentionWeeks }).(pulumi.IntPtrOutput)
}

type AccountLimitArrayOutput struct{ *pulumi.OutputState }

func (AccountLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountLimit)(nil)).Elem()
}

func (o AccountLimitArrayOutput) ToAccountLimitArrayOutput() AccountLimitArrayOutput {
	return o
}

func (o AccountLimitArrayOutput) ToAccountLimitArrayOutputWithContext(ctx context.Context) AccountLimitArrayOutput {
	return o
}

func (o AccountLimitArrayOutput) Index(i pulumi.IntInput) AccountLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountLimit {
		return vs[0].([]AccountLimit)[vs[1].(int)]
	}).(AccountLimitOutput)
}

type ContextSpec struct {
	// A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
	Config *ContextSpecConfig `pulumi:"config"`
	// A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
	Secret *ContextSpecSecret `pulumi:"secret"`
	// A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
	Secretyaml    *ContextSpecSecretyaml    `pulumi:"secretyaml"`
	Storageazuref *ContextSpecStorageazuref `pulumi:"storageazuref"`
	Storagegc     *ContextSpecStoragegc     `pulumi:"storagegc"`
	Storages3     *ContextSpecStorages3     `pulumi:"storages3"`
	// A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
	Yaml *ContextSpecYaml `pulumi:"yaml"`
}

// ContextSpecInput is an input type that accepts ContextSpecArgs and ContextSpecOutput values.
// You can construct a concrete instance of `ContextSpecInput` via:
//
//	ContextSpecArgs{...}
type ContextSpecInput interface {
	pulumi.Input

	ToContextSpecOutput() ContextSpecOutput
	ToContextSpecOutputWithContext(context.Context) ContextSpecOutput
}

type ContextSpecArgs struct {
	// A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
	Config ContextSpecConfigPtrInput `pulumi:"config"`
	// A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
	Secret ContextSpecSecretPtrInput `pulumi:"secret"`
	// A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
	Secretyaml    ContextSpecSecretyamlPtrInput    `pulumi:"secretyaml"`
	Storageazuref ContextSpecStorageazurefPtrInput `pulumi:"storageazuref"`
	Storagegc     ContextSpecStoragegcPtrInput     `pulumi:"storagegc"`
	Storages3     ContextSpecStorages3PtrInput     `pulumi:"storages3"`
	// A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
	Yaml ContextSpecYamlPtrInput `pulumi:"yaml"`
}

func (ContextSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpec)(nil)).Elem()
}

func (i ContextSpecArgs) ToContextSpecOutput() ContextSpecOutput {
	return i.ToContextSpecOutputWithContext(context.Background())
}

func (i ContextSpecArgs) ToContextSpecOutputWithContext(ctx context.Context) ContextSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecOutput)
}

func (i ContextSpecArgs) ToContextSpecPtrOutput() ContextSpecPtrOutput {
	return i.ToContextSpecPtrOutputWithContext(context.Background())
}

func (i ContextSpecArgs) ToContextSpecPtrOutputWithContext(ctx context.Context) ContextSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecOutput).ToContextSpecPtrOutputWithContext(ctx)
}

// ContextSpecPtrInput is an input type that accepts ContextSpecArgs, ContextSpecPtr and ContextSpecPtrOutput values.
// You can construct a concrete instance of `ContextSpecPtrInput` via:
//
//	        ContextSpecArgs{...}
//
//	or:
//
//	        nil
type ContextSpecPtrInput interface {
	pulumi.Input

	ToContextSpecPtrOutput() ContextSpecPtrOutput
	ToContextSpecPtrOutputWithContext(context.Context) ContextSpecPtrOutput
}

type contextSpecPtrType ContextSpecArgs

func ContextSpecPtr(v *ContextSpecArgs) ContextSpecPtrInput {
	return (*contextSpecPtrType)(v)
}

func (*contextSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpec)(nil)).Elem()
}

func (i *contextSpecPtrType) ToContextSpecPtrOutput() ContextSpecPtrOutput {
	return i.ToContextSpecPtrOutputWithContext(context.Background())
}

func (i *contextSpecPtrType) ToContextSpecPtrOutputWithContext(ctx context.Context) ContextSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecPtrOutput)
}

type ContextSpecOutput struct{ *pulumi.OutputState }

func (ContextSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpec)(nil)).Elem()
}

func (o ContextSpecOutput) ToContextSpecOutput() ContextSpecOutput {
	return o
}

func (o ContextSpecOutput) ToContextSpecOutputWithContext(ctx context.Context) ContextSpecOutput {
	return o
}

func (o ContextSpecOutput) ToContextSpecPtrOutput() ContextSpecPtrOutput {
	return o.ToContextSpecPtrOutputWithContext(context.Background())
}

func (o ContextSpecOutput) ToContextSpecPtrOutputWithContext(ctx context.Context) ContextSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpec) *ContextSpec {
		return &v
	}).(ContextSpecPtrOutput)
}

// A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
func (o ContextSpecOutput) Config() ContextSpecConfigPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecConfig { return v.Config }).(ContextSpecConfigPtrOutput)
}

// A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
func (o ContextSpecOutput) Secret() ContextSpecSecretPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecSecret { return v.Secret }).(ContextSpecSecretPtrOutput)
}

// A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
func (o ContextSpecOutput) Secretyaml() ContextSpecSecretyamlPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecSecretyaml { return v.Secretyaml }).(ContextSpecSecretyamlPtrOutput)
}

func (o ContextSpecOutput) Storageazuref() ContextSpecStorageazurefPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecStorageazuref { return v.Storageazuref }).(ContextSpecStorageazurefPtrOutput)
}

func (o ContextSpecOutput) Storagegc() ContextSpecStoragegcPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecStoragegc { return v.Storagegc }).(ContextSpecStoragegcPtrOutput)
}

func (o ContextSpecOutput) Storages3() ContextSpecStorages3PtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecStorages3 { return v.Storages3 }).(ContextSpecStorages3PtrOutput)
}

// A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
func (o ContextSpecOutput) Yaml() ContextSpecYamlPtrOutput {
	return o.ApplyT(func(v ContextSpec) *ContextSpecYaml { return v.Yaml }).(ContextSpecYamlPtrOutput)
}

type ContextSpecPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpec)(nil)).Elem()
}

func (o ContextSpecPtrOutput) ToContextSpecPtrOutput() ContextSpecPtrOutput {
	return o
}

func (o ContextSpecPtrOutput) ToContextSpecPtrOutputWithContext(ctx context.Context) ContextSpecPtrOutput {
	return o
}

func (o ContextSpecPtrOutput) Elem() ContextSpecOutput {
	return o.ApplyT(func(v *ContextSpec) ContextSpec {
		if v != nil {
			return *v
		}
		var ret ContextSpec
		return ret
	}).(ContextSpecOutput)
}

// A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
func (o ContextSpecPtrOutput) Config() ContextSpecConfigPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(ContextSpecConfigPtrOutput)
}

// A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
func (o ContextSpecPtrOutput) Secret() ContextSpecSecretPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ContextSpecSecretPtrOutput)
}

// A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
func (o ContextSpecPtrOutput) Secretyaml() ContextSpecSecretyamlPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecSecretyaml {
		if v == nil {
			return nil
		}
		return v.Secretyaml
	}).(ContextSpecSecretyamlPtrOutput)
}

func (o ContextSpecPtrOutput) Storageazuref() ContextSpecStorageazurefPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecStorageazuref {
		if v == nil {
			return nil
		}
		return v.Storageazuref
	}).(ContextSpecStorageazurefPtrOutput)
}

func (o ContextSpecPtrOutput) Storagegc() ContextSpecStoragegcPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecStoragegc {
		if v == nil {
			return nil
		}
		return v.Storagegc
	}).(ContextSpecStoragegcPtrOutput)
}

func (o ContextSpecPtrOutput) Storages3() ContextSpecStorages3PtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecStorages3 {
		if v == nil {
			return nil
		}
		return v.Storages3
	}).(ContextSpecStorages3PtrOutput)
}

// A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
func (o ContextSpecPtrOutput) Yaml() ContextSpecYamlPtrOutput {
	return o.ApplyT(func(v *ContextSpec) *ContextSpecYaml {
		if v == nil {
			return nil
		}
		return v.Yaml
	}).(ContextSpecYamlPtrOutput)
}

type ContextSpecConfig struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data map[string]string `pulumi:"data"`
}

// ContextSpecConfigInput is an input type that accepts ContextSpecConfigArgs and ContextSpecConfigOutput values.
// You can construct a concrete instance of `ContextSpecConfigInput` via:
//
//	ContextSpecConfigArgs{...}
type ContextSpecConfigInput interface {
	pulumi.Input

	ToContextSpecConfigOutput() ContextSpecConfigOutput
	ToContextSpecConfigOutputWithContext(context.Context) ContextSpecConfigOutput
}

type ContextSpecConfigArgs struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (ContextSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecConfig)(nil)).Elem()
}

func (i ContextSpecConfigArgs) ToContextSpecConfigOutput() ContextSpecConfigOutput {
	return i.ToContextSpecConfigOutputWithContext(context.Background())
}

func (i ContextSpecConfigArgs) ToContextSpecConfigOutputWithContext(ctx context.Context) ContextSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecConfigOutput)
}

func (i ContextSpecConfigArgs) ToContextSpecConfigPtrOutput() ContextSpecConfigPtrOutput {
	return i.ToContextSpecConfigPtrOutputWithContext(context.Background())
}

func (i ContextSpecConfigArgs) ToContextSpecConfigPtrOutputWithContext(ctx context.Context) ContextSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecConfigOutput).ToContextSpecConfigPtrOutputWithContext(ctx)
}

// ContextSpecConfigPtrInput is an input type that accepts ContextSpecConfigArgs, ContextSpecConfigPtr and ContextSpecConfigPtrOutput values.
// You can construct a concrete instance of `ContextSpecConfigPtrInput` via:
//
//	        ContextSpecConfigArgs{...}
//
//	or:
//
//	        nil
type ContextSpecConfigPtrInput interface {
	pulumi.Input

	ToContextSpecConfigPtrOutput() ContextSpecConfigPtrOutput
	ToContextSpecConfigPtrOutputWithContext(context.Context) ContextSpecConfigPtrOutput
}

type contextSpecConfigPtrType ContextSpecConfigArgs

func ContextSpecConfigPtr(v *ContextSpecConfigArgs) ContextSpecConfigPtrInput {
	return (*contextSpecConfigPtrType)(v)
}

func (*contextSpecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecConfig)(nil)).Elem()
}

func (i *contextSpecConfigPtrType) ToContextSpecConfigPtrOutput() ContextSpecConfigPtrOutput {
	return i.ToContextSpecConfigPtrOutputWithContext(context.Background())
}

func (i *contextSpecConfigPtrType) ToContextSpecConfigPtrOutputWithContext(ctx context.Context) ContextSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecConfigPtrOutput)
}

type ContextSpecConfigOutput struct{ *pulumi.OutputState }

func (ContextSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecConfig)(nil)).Elem()
}

func (o ContextSpecConfigOutput) ToContextSpecConfigOutput() ContextSpecConfigOutput {
	return o
}

func (o ContextSpecConfigOutput) ToContextSpecConfigOutputWithContext(ctx context.Context) ContextSpecConfigOutput {
	return o
}

func (o ContextSpecConfigOutput) ToContextSpecConfigPtrOutput() ContextSpecConfigPtrOutput {
	return o.ToContextSpecConfigPtrOutputWithContext(context.Background())
}

func (o ContextSpecConfigOutput) ToContextSpecConfigPtrOutputWithContext(ctx context.Context) ContextSpecConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecConfig) *ContextSpecConfig {
		return &v
	}).(ContextSpecConfigPtrOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecConfigOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContextSpecConfig) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type ContextSpecConfigPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecConfig)(nil)).Elem()
}

func (o ContextSpecConfigPtrOutput) ToContextSpecConfigPtrOutput() ContextSpecConfigPtrOutput {
	return o
}

func (o ContextSpecConfigPtrOutput) ToContextSpecConfigPtrOutputWithContext(ctx context.Context) ContextSpecConfigPtrOutput {
	return o
}

func (o ContextSpecConfigPtrOutput) Elem() ContextSpecConfigOutput {
	return o.ApplyT(func(v *ContextSpecConfig) ContextSpecConfig {
		if v != nil {
			return *v
		}
		var ret ContextSpecConfig
		return ret
	}).(ContextSpecConfigOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecConfigPtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContextSpecConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

type ContextSpecSecret struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data map[string]string `pulumi:"data"`
}

// ContextSpecSecretInput is an input type that accepts ContextSpecSecretArgs and ContextSpecSecretOutput values.
// You can construct a concrete instance of `ContextSpecSecretInput` via:
//
//	ContextSpecSecretArgs{...}
type ContextSpecSecretInput interface {
	pulumi.Input

	ToContextSpecSecretOutput() ContextSpecSecretOutput
	ToContextSpecSecretOutputWithContext(context.Context) ContextSpecSecretOutput
}

type ContextSpecSecretArgs struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (ContextSpecSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecSecret)(nil)).Elem()
}

func (i ContextSpecSecretArgs) ToContextSpecSecretOutput() ContextSpecSecretOutput {
	return i.ToContextSpecSecretOutputWithContext(context.Background())
}

func (i ContextSpecSecretArgs) ToContextSpecSecretOutputWithContext(ctx context.Context) ContextSpecSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretOutput)
}

func (i ContextSpecSecretArgs) ToContextSpecSecretPtrOutput() ContextSpecSecretPtrOutput {
	return i.ToContextSpecSecretPtrOutputWithContext(context.Background())
}

func (i ContextSpecSecretArgs) ToContextSpecSecretPtrOutputWithContext(ctx context.Context) ContextSpecSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretOutput).ToContextSpecSecretPtrOutputWithContext(ctx)
}

// ContextSpecSecretPtrInput is an input type that accepts ContextSpecSecretArgs, ContextSpecSecretPtr and ContextSpecSecretPtrOutput values.
// You can construct a concrete instance of `ContextSpecSecretPtrInput` via:
//
//	        ContextSpecSecretArgs{...}
//
//	or:
//
//	        nil
type ContextSpecSecretPtrInput interface {
	pulumi.Input

	ToContextSpecSecretPtrOutput() ContextSpecSecretPtrOutput
	ToContextSpecSecretPtrOutputWithContext(context.Context) ContextSpecSecretPtrOutput
}

type contextSpecSecretPtrType ContextSpecSecretArgs

func ContextSpecSecretPtr(v *ContextSpecSecretArgs) ContextSpecSecretPtrInput {
	return (*contextSpecSecretPtrType)(v)
}

func (*contextSpecSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecSecret)(nil)).Elem()
}

func (i *contextSpecSecretPtrType) ToContextSpecSecretPtrOutput() ContextSpecSecretPtrOutput {
	return i.ToContextSpecSecretPtrOutputWithContext(context.Background())
}

func (i *contextSpecSecretPtrType) ToContextSpecSecretPtrOutputWithContext(ctx context.Context) ContextSpecSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretPtrOutput)
}

type ContextSpecSecretOutput struct{ *pulumi.OutputState }

func (ContextSpecSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecSecret)(nil)).Elem()
}

func (o ContextSpecSecretOutput) ToContextSpecSecretOutput() ContextSpecSecretOutput {
	return o
}

func (o ContextSpecSecretOutput) ToContextSpecSecretOutputWithContext(ctx context.Context) ContextSpecSecretOutput {
	return o
}

func (o ContextSpecSecretOutput) ToContextSpecSecretPtrOutput() ContextSpecSecretPtrOutput {
	return o.ToContextSpecSecretPtrOutputWithContext(context.Background())
}

func (o ContextSpecSecretOutput) ToContextSpecSecretPtrOutputWithContext(ctx context.Context) ContextSpecSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecSecret) *ContextSpecSecret {
		return &v
	}).(ContextSpecSecretPtrOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecSecretOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContextSpecSecret) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type ContextSpecSecretPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecSecret)(nil)).Elem()
}

func (o ContextSpecSecretPtrOutput) ToContextSpecSecretPtrOutput() ContextSpecSecretPtrOutput {
	return o
}

func (o ContextSpecSecretPtrOutput) ToContextSpecSecretPtrOutputWithContext(ctx context.Context) ContextSpecSecretPtrOutput {
	return o
}

func (o ContextSpecSecretPtrOutput) Elem() ContextSpecSecretOutput {
	return o.ApplyT(func(v *ContextSpecSecret) ContextSpecSecret {
		if v != nil {
			return *v
		}
		var ret ContextSpecSecret
		return ret
	}).(ContextSpecSecretOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecSecretPtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContextSpecSecret) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

type ContextSpecSecretyaml struct {
	// String representing a YAML file content
	Data string `pulumi:"data"`
}

// ContextSpecSecretyamlInput is an input type that accepts ContextSpecSecretyamlArgs and ContextSpecSecretyamlOutput values.
// You can construct a concrete instance of `ContextSpecSecretyamlInput` via:
//
//	ContextSpecSecretyamlArgs{...}
type ContextSpecSecretyamlInput interface {
	pulumi.Input

	ToContextSpecSecretyamlOutput() ContextSpecSecretyamlOutput
	ToContextSpecSecretyamlOutputWithContext(context.Context) ContextSpecSecretyamlOutput
}

type ContextSpecSecretyamlArgs struct {
	// String representing a YAML file content
	Data pulumi.StringInput `pulumi:"data"`
}

func (ContextSpecSecretyamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecSecretyaml)(nil)).Elem()
}

func (i ContextSpecSecretyamlArgs) ToContextSpecSecretyamlOutput() ContextSpecSecretyamlOutput {
	return i.ToContextSpecSecretyamlOutputWithContext(context.Background())
}

func (i ContextSpecSecretyamlArgs) ToContextSpecSecretyamlOutputWithContext(ctx context.Context) ContextSpecSecretyamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretyamlOutput)
}

func (i ContextSpecSecretyamlArgs) ToContextSpecSecretyamlPtrOutput() ContextSpecSecretyamlPtrOutput {
	return i.ToContextSpecSecretyamlPtrOutputWithContext(context.Background())
}

func (i ContextSpecSecretyamlArgs) ToContextSpecSecretyamlPtrOutputWithContext(ctx context.Context) ContextSpecSecretyamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretyamlOutput).ToContextSpecSecretyamlPtrOutputWithContext(ctx)
}

// ContextSpecSecretyamlPtrInput is an input type that accepts ContextSpecSecretyamlArgs, ContextSpecSecretyamlPtr and ContextSpecSecretyamlPtrOutput values.
// You can construct a concrete instance of `ContextSpecSecretyamlPtrInput` via:
//
//	        ContextSpecSecretyamlArgs{...}
//
//	or:
//
//	        nil
type ContextSpecSecretyamlPtrInput interface {
	pulumi.Input

	ToContextSpecSecretyamlPtrOutput() ContextSpecSecretyamlPtrOutput
	ToContextSpecSecretyamlPtrOutputWithContext(context.Context) ContextSpecSecretyamlPtrOutput
}

type contextSpecSecretyamlPtrType ContextSpecSecretyamlArgs

func ContextSpecSecretyamlPtr(v *ContextSpecSecretyamlArgs) ContextSpecSecretyamlPtrInput {
	return (*contextSpecSecretyamlPtrType)(v)
}

func (*contextSpecSecretyamlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecSecretyaml)(nil)).Elem()
}

func (i *contextSpecSecretyamlPtrType) ToContextSpecSecretyamlPtrOutput() ContextSpecSecretyamlPtrOutput {
	return i.ToContextSpecSecretyamlPtrOutputWithContext(context.Background())
}

func (i *contextSpecSecretyamlPtrType) ToContextSpecSecretyamlPtrOutputWithContext(ctx context.Context) ContextSpecSecretyamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecSecretyamlPtrOutput)
}

type ContextSpecSecretyamlOutput struct{ *pulumi.OutputState }

func (ContextSpecSecretyamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecSecretyaml)(nil)).Elem()
}

func (o ContextSpecSecretyamlOutput) ToContextSpecSecretyamlOutput() ContextSpecSecretyamlOutput {
	return o
}

func (o ContextSpecSecretyamlOutput) ToContextSpecSecretyamlOutputWithContext(ctx context.Context) ContextSpecSecretyamlOutput {
	return o
}

func (o ContextSpecSecretyamlOutput) ToContextSpecSecretyamlPtrOutput() ContextSpecSecretyamlPtrOutput {
	return o.ToContextSpecSecretyamlPtrOutputWithContext(context.Background())
}

func (o ContextSpecSecretyamlOutput) ToContextSpecSecretyamlPtrOutputWithContext(ctx context.Context) ContextSpecSecretyamlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecSecretyaml) *ContextSpecSecretyaml {
		return &v
	}).(ContextSpecSecretyamlPtrOutput)
}

// String representing a YAML file content
func (o ContextSpecSecretyamlOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecSecretyaml) string { return v.Data }).(pulumi.StringOutput)
}

type ContextSpecSecretyamlPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecSecretyamlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecSecretyaml)(nil)).Elem()
}

func (o ContextSpecSecretyamlPtrOutput) ToContextSpecSecretyamlPtrOutput() ContextSpecSecretyamlPtrOutput {
	return o
}

func (o ContextSpecSecretyamlPtrOutput) ToContextSpecSecretyamlPtrOutputWithContext(ctx context.Context) ContextSpecSecretyamlPtrOutput {
	return o
}

func (o ContextSpecSecretyamlPtrOutput) Elem() ContextSpecSecretyamlOutput {
	return o.ApplyT(func(v *ContextSpecSecretyaml) ContextSpecSecretyaml {
		if v != nil {
			return *v
		}
		var ret ContextSpecSecretyaml
		return ret
	}).(ContextSpecSecretyamlOutput)
}

// String representing a YAML file content
func (o ContextSpecSecretyamlPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecSecretyaml) *string {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(pulumi.StringPtrOutput)
}

type ContextSpecStorageazuref struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStorageazurefData `pulumi:"data"`
}

// ContextSpecStorageazurefInput is an input type that accepts ContextSpecStorageazurefArgs and ContextSpecStorageazurefOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefInput` via:
//
//	ContextSpecStorageazurefArgs{...}
type ContextSpecStorageazurefInput interface {
	pulumi.Input

	ToContextSpecStorageazurefOutput() ContextSpecStorageazurefOutput
	ToContextSpecStorageazurefOutputWithContext(context.Context) ContextSpecStorageazurefOutput
}

type ContextSpecStorageazurefArgs struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStorageazurefDataInput `pulumi:"data"`
}

func (ContextSpecStorageazurefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazuref)(nil)).Elem()
}

func (i ContextSpecStorageazurefArgs) ToContextSpecStorageazurefOutput() ContextSpecStorageazurefOutput {
	return i.ToContextSpecStorageazurefOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefArgs) ToContextSpecStorageazurefOutputWithContext(ctx context.Context) ContextSpecStorageazurefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefOutput)
}

func (i ContextSpecStorageazurefArgs) ToContextSpecStorageazurefPtrOutput() ContextSpecStorageazurefPtrOutput {
	return i.ToContextSpecStorageazurefPtrOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefArgs) ToContextSpecStorageazurefPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefOutput).ToContextSpecStorageazurefPtrOutputWithContext(ctx)
}

// ContextSpecStorageazurefPtrInput is an input type that accepts ContextSpecStorageazurefArgs, ContextSpecStorageazurefPtr and ContextSpecStorageazurefPtrOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefPtrInput` via:
//
//	        ContextSpecStorageazurefArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStorageazurefPtrInput interface {
	pulumi.Input

	ToContextSpecStorageazurefPtrOutput() ContextSpecStorageazurefPtrOutput
	ToContextSpecStorageazurefPtrOutputWithContext(context.Context) ContextSpecStorageazurefPtrOutput
}

type contextSpecStorageazurefPtrType ContextSpecStorageazurefArgs

func ContextSpecStorageazurefPtr(v *ContextSpecStorageazurefArgs) ContextSpecStorageazurefPtrInput {
	return (*contextSpecStorageazurefPtrType)(v)
}

func (*contextSpecStorageazurefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazuref)(nil)).Elem()
}

func (i *contextSpecStorageazurefPtrType) ToContextSpecStorageazurefPtrOutput() ContextSpecStorageazurefPtrOutput {
	return i.ToContextSpecStorageazurefPtrOutputWithContext(context.Background())
}

func (i *contextSpecStorageazurefPtrType) ToContextSpecStorageazurefPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefPtrOutput)
}

type ContextSpecStorageazurefOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazuref)(nil)).Elem()
}

func (o ContextSpecStorageazurefOutput) ToContextSpecStorageazurefOutput() ContextSpecStorageazurefOutput {
	return o
}

func (o ContextSpecStorageazurefOutput) ToContextSpecStorageazurefOutputWithContext(ctx context.Context) ContextSpecStorageazurefOutput {
	return o
}

func (o ContextSpecStorageazurefOutput) ToContextSpecStorageazurefPtrOutput() ContextSpecStorageazurefPtrOutput {
	return o.ToContextSpecStorageazurefPtrOutputWithContext(context.Background())
}

func (o ContextSpecStorageazurefOutput) ToContextSpecStorageazurefPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorageazuref) *ContextSpecStorageazuref {
		return &v
	}).(ContextSpecStorageazurefPtrOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStorageazurefOutput) Data() ContextSpecStorageazurefDataOutput {
	return o.ApplyT(func(v ContextSpecStorageazuref) ContextSpecStorageazurefData { return v.Data }).(ContextSpecStorageazurefDataOutput)
}

type ContextSpecStorageazurefPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazuref)(nil)).Elem()
}

func (o ContextSpecStorageazurefPtrOutput) ToContextSpecStorageazurefPtrOutput() ContextSpecStorageazurefPtrOutput {
	return o
}

func (o ContextSpecStorageazurefPtrOutput) ToContextSpecStorageazurefPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefPtrOutput {
	return o
}

func (o ContextSpecStorageazurefPtrOutput) Elem() ContextSpecStorageazurefOutput {
	return o.ApplyT(func(v *ContextSpecStorageazuref) ContextSpecStorageazuref {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorageazuref
		return ret
	}).(ContextSpecStorageazurefOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStorageazurefPtrOutput) Data() ContextSpecStorageazurefDataPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorageazuref) *ContextSpecStorageazurefData {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(ContextSpecStorageazurefDataPtrOutput)
}

type ContextSpecStorageazurefData struct {
	Auth ContextSpecStorageazurefDataAuth `pulumi:"auth"`
}

// ContextSpecStorageazurefDataInput is an input type that accepts ContextSpecStorageazurefDataArgs and ContextSpecStorageazurefDataOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefDataInput` via:
//
//	ContextSpecStorageazurefDataArgs{...}
type ContextSpecStorageazurefDataInput interface {
	pulumi.Input

	ToContextSpecStorageazurefDataOutput() ContextSpecStorageazurefDataOutput
	ToContextSpecStorageazurefDataOutputWithContext(context.Context) ContextSpecStorageazurefDataOutput
}

type ContextSpecStorageazurefDataArgs struct {
	Auth ContextSpecStorageazurefDataAuthInput `pulumi:"auth"`
}

func (ContextSpecStorageazurefDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazurefData)(nil)).Elem()
}

func (i ContextSpecStorageazurefDataArgs) ToContextSpecStorageazurefDataOutput() ContextSpecStorageazurefDataOutput {
	return i.ToContextSpecStorageazurefDataOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefDataArgs) ToContextSpecStorageazurefDataOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataOutput)
}

func (i ContextSpecStorageazurefDataArgs) ToContextSpecStorageazurefDataPtrOutput() ContextSpecStorageazurefDataPtrOutput {
	return i.ToContextSpecStorageazurefDataPtrOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefDataArgs) ToContextSpecStorageazurefDataPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataOutput).ToContextSpecStorageazurefDataPtrOutputWithContext(ctx)
}

// ContextSpecStorageazurefDataPtrInput is an input type that accepts ContextSpecStorageazurefDataArgs, ContextSpecStorageazurefDataPtr and ContextSpecStorageazurefDataPtrOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefDataPtrInput` via:
//
//	        ContextSpecStorageazurefDataArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStorageazurefDataPtrInput interface {
	pulumi.Input

	ToContextSpecStorageazurefDataPtrOutput() ContextSpecStorageazurefDataPtrOutput
	ToContextSpecStorageazurefDataPtrOutputWithContext(context.Context) ContextSpecStorageazurefDataPtrOutput
}

type contextSpecStorageazurefDataPtrType ContextSpecStorageazurefDataArgs

func ContextSpecStorageazurefDataPtr(v *ContextSpecStorageazurefDataArgs) ContextSpecStorageazurefDataPtrInput {
	return (*contextSpecStorageazurefDataPtrType)(v)
}

func (*contextSpecStorageazurefDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazurefData)(nil)).Elem()
}

func (i *contextSpecStorageazurefDataPtrType) ToContextSpecStorageazurefDataPtrOutput() ContextSpecStorageazurefDataPtrOutput {
	return i.ToContextSpecStorageazurefDataPtrOutputWithContext(context.Background())
}

func (i *contextSpecStorageazurefDataPtrType) ToContextSpecStorageazurefDataPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataPtrOutput)
}

type ContextSpecStorageazurefDataOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazurefData)(nil)).Elem()
}

func (o ContextSpecStorageazurefDataOutput) ToContextSpecStorageazurefDataOutput() ContextSpecStorageazurefDataOutput {
	return o
}

func (o ContextSpecStorageazurefDataOutput) ToContextSpecStorageazurefDataOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataOutput {
	return o
}

func (o ContextSpecStorageazurefDataOutput) ToContextSpecStorageazurefDataPtrOutput() ContextSpecStorageazurefDataPtrOutput {
	return o.ToContextSpecStorageazurefDataPtrOutputWithContext(context.Background())
}

func (o ContextSpecStorageazurefDataOutput) ToContextSpecStorageazurefDataPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorageazurefData) *ContextSpecStorageazurefData {
		return &v
	}).(ContextSpecStorageazurefDataPtrOutput)
}

func (o ContextSpecStorageazurefDataOutput) Auth() ContextSpecStorageazurefDataAuthOutput {
	return o.ApplyT(func(v ContextSpecStorageazurefData) ContextSpecStorageazurefDataAuth { return v.Auth }).(ContextSpecStorageazurefDataAuthOutput)
}

type ContextSpecStorageazurefDataPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazurefData)(nil)).Elem()
}

func (o ContextSpecStorageazurefDataPtrOutput) ToContextSpecStorageazurefDataPtrOutput() ContextSpecStorageazurefDataPtrOutput {
	return o
}

func (o ContextSpecStorageazurefDataPtrOutput) ToContextSpecStorageazurefDataPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataPtrOutput {
	return o
}

func (o ContextSpecStorageazurefDataPtrOutput) Elem() ContextSpecStorageazurefDataOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefData) ContextSpecStorageazurefData {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorageazurefData
		return ret
	}).(ContextSpecStorageazurefDataOutput)
}

func (o ContextSpecStorageazurefDataPtrOutput) Auth() ContextSpecStorageazurefDataAuthPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefData) *ContextSpecStorageazurefDataAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(ContextSpecStorageazurefDataAuthPtrOutput)
}

type ContextSpecStorageazurefDataAuth struct {
	AccountKey  string `pulumi:"accountKey"`
	AccountName string `pulumi:"accountName"`
	Type        string `pulumi:"type"`
}

// ContextSpecStorageazurefDataAuthInput is an input type that accepts ContextSpecStorageazurefDataAuthArgs and ContextSpecStorageazurefDataAuthOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefDataAuthInput` via:
//
//	ContextSpecStorageazurefDataAuthArgs{...}
type ContextSpecStorageazurefDataAuthInput interface {
	pulumi.Input

	ToContextSpecStorageazurefDataAuthOutput() ContextSpecStorageazurefDataAuthOutput
	ToContextSpecStorageazurefDataAuthOutputWithContext(context.Context) ContextSpecStorageazurefDataAuthOutput
}

type ContextSpecStorageazurefDataAuthArgs struct {
	AccountKey  pulumi.StringInput `pulumi:"accountKey"`
	AccountName pulumi.StringInput `pulumi:"accountName"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (ContextSpecStorageazurefDataAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazurefDataAuth)(nil)).Elem()
}

func (i ContextSpecStorageazurefDataAuthArgs) ToContextSpecStorageazurefDataAuthOutput() ContextSpecStorageazurefDataAuthOutput {
	return i.ToContextSpecStorageazurefDataAuthOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefDataAuthArgs) ToContextSpecStorageazurefDataAuthOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataAuthOutput)
}

func (i ContextSpecStorageazurefDataAuthArgs) ToContextSpecStorageazurefDataAuthPtrOutput() ContextSpecStorageazurefDataAuthPtrOutput {
	return i.ToContextSpecStorageazurefDataAuthPtrOutputWithContext(context.Background())
}

func (i ContextSpecStorageazurefDataAuthArgs) ToContextSpecStorageazurefDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataAuthOutput).ToContextSpecStorageazurefDataAuthPtrOutputWithContext(ctx)
}

// ContextSpecStorageazurefDataAuthPtrInput is an input type that accepts ContextSpecStorageazurefDataAuthArgs, ContextSpecStorageazurefDataAuthPtr and ContextSpecStorageazurefDataAuthPtrOutput values.
// You can construct a concrete instance of `ContextSpecStorageazurefDataAuthPtrInput` via:
//
//	        ContextSpecStorageazurefDataAuthArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStorageazurefDataAuthPtrInput interface {
	pulumi.Input

	ToContextSpecStorageazurefDataAuthPtrOutput() ContextSpecStorageazurefDataAuthPtrOutput
	ToContextSpecStorageazurefDataAuthPtrOutputWithContext(context.Context) ContextSpecStorageazurefDataAuthPtrOutput
}

type contextSpecStorageazurefDataAuthPtrType ContextSpecStorageazurefDataAuthArgs

func ContextSpecStorageazurefDataAuthPtr(v *ContextSpecStorageazurefDataAuthArgs) ContextSpecStorageazurefDataAuthPtrInput {
	return (*contextSpecStorageazurefDataAuthPtrType)(v)
}

func (*contextSpecStorageazurefDataAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazurefDataAuth)(nil)).Elem()
}

func (i *contextSpecStorageazurefDataAuthPtrType) ToContextSpecStorageazurefDataAuthPtrOutput() ContextSpecStorageazurefDataAuthPtrOutput {
	return i.ToContextSpecStorageazurefDataAuthPtrOutputWithContext(context.Background())
}

func (i *contextSpecStorageazurefDataAuthPtrType) ToContextSpecStorageazurefDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorageazurefDataAuthPtrOutput)
}

type ContextSpecStorageazurefDataAuthOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefDataAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorageazurefDataAuth)(nil)).Elem()
}

func (o ContextSpecStorageazurefDataAuthOutput) ToContextSpecStorageazurefDataAuthOutput() ContextSpecStorageazurefDataAuthOutput {
	return o
}

func (o ContextSpecStorageazurefDataAuthOutput) ToContextSpecStorageazurefDataAuthOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthOutput {
	return o
}

func (o ContextSpecStorageazurefDataAuthOutput) ToContextSpecStorageazurefDataAuthPtrOutput() ContextSpecStorageazurefDataAuthPtrOutput {
	return o.ToContextSpecStorageazurefDataAuthPtrOutputWithContext(context.Background())
}

func (o ContextSpecStorageazurefDataAuthOutput) ToContextSpecStorageazurefDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorageazurefDataAuth) *ContextSpecStorageazurefDataAuth {
		return &v
	}).(ContextSpecStorageazurefDataAuthPtrOutput)
}

func (o ContextSpecStorageazurefDataAuthOutput) AccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecStorageazurefDataAuth) string { return v.AccountKey }).(pulumi.StringOutput)
}

func (o ContextSpecStorageazurefDataAuthOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecStorageazurefDataAuth) string { return v.AccountName }).(pulumi.StringOutput)
}

func (o ContextSpecStorageazurefDataAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecStorageazurefDataAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ContextSpecStorageazurefDataAuthPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorageazurefDataAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorageazurefDataAuth)(nil)).Elem()
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) ToContextSpecStorageazurefDataAuthPtrOutput() ContextSpecStorageazurefDataAuthPtrOutput {
	return o
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) ToContextSpecStorageazurefDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorageazurefDataAuthPtrOutput {
	return o
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) Elem() ContextSpecStorageazurefDataAuthOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefDataAuth) ContextSpecStorageazurefDataAuth {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorageazurefDataAuth
		return ret
	}).(ContextSpecStorageazurefDataAuthOutput)
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefDataAuth) *string {
		if v == nil {
			return nil
		}
		return &v.AccountKey
	}).(pulumi.StringPtrOutput)
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefDataAuth) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

func (o ContextSpecStorageazurefDataAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorageazurefDataAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ContextSpecStoragegc struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStoragegcData `pulumi:"data"`
}

// ContextSpecStoragegcInput is an input type that accepts ContextSpecStoragegcArgs and ContextSpecStoragegcOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcInput` via:
//
//	ContextSpecStoragegcArgs{...}
type ContextSpecStoragegcInput interface {
	pulumi.Input

	ToContextSpecStoragegcOutput() ContextSpecStoragegcOutput
	ToContextSpecStoragegcOutputWithContext(context.Context) ContextSpecStoragegcOutput
}

type ContextSpecStoragegcArgs struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStoragegcDataInput `pulumi:"data"`
}

func (ContextSpecStoragegcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegc)(nil)).Elem()
}

func (i ContextSpecStoragegcArgs) ToContextSpecStoragegcOutput() ContextSpecStoragegcOutput {
	return i.ToContextSpecStoragegcOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcArgs) ToContextSpecStoragegcOutputWithContext(ctx context.Context) ContextSpecStoragegcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcOutput)
}

func (i ContextSpecStoragegcArgs) ToContextSpecStoragegcPtrOutput() ContextSpecStoragegcPtrOutput {
	return i.ToContextSpecStoragegcPtrOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcArgs) ToContextSpecStoragegcPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcOutput).ToContextSpecStoragegcPtrOutputWithContext(ctx)
}

// ContextSpecStoragegcPtrInput is an input type that accepts ContextSpecStoragegcArgs, ContextSpecStoragegcPtr and ContextSpecStoragegcPtrOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcPtrInput` via:
//
//	        ContextSpecStoragegcArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStoragegcPtrInput interface {
	pulumi.Input

	ToContextSpecStoragegcPtrOutput() ContextSpecStoragegcPtrOutput
	ToContextSpecStoragegcPtrOutputWithContext(context.Context) ContextSpecStoragegcPtrOutput
}

type contextSpecStoragegcPtrType ContextSpecStoragegcArgs

func ContextSpecStoragegcPtr(v *ContextSpecStoragegcArgs) ContextSpecStoragegcPtrInput {
	return (*contextSpecStoragegcPtrType)(v)
}

func (*contextSpecStoragegcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegc)(nil)).Elem()
}

func (i *contextSpecStoragegcPtrType) ToContextSpecStoragegcPtrOutput() ContextSpecStoragegcPtrOutput {
	return i.ToContextSpecStoragegcPtrOutputWithContext(context.Background())
}

func (i *contextSpecStoragegcPtrType) ToContextSpecStoragegcPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcPtrOutput)
}

type ContextSpecStoragegcOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegc)(nil)).Elem()
}

func (o ContextSpecStoragegcOutput) ToContextSpecStoragegcOutput() ContextSpecStoragegcOutput {
	return o
}

func (o ContextSpecStoragegcOutput) ToContextSpecStoragegcOutputWithContext(ctx context.Context) ContextSpecStoragegcOutput {
	return o
}

func (o ContextSpecStoragegcOutput) ToContextSpecStoragegcPtrOutput() ContextSpecStoragegcPtrOutput {
	return o.ToContextSpecStoragegcPtrOutputWithContext(context.Background())
}

func (o ContextSpecStoragegcOutput) ToContextSpecStoragegcPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStoragegc) *ContextSpecStoragegc {
		return &v
	}).(ContextSpecStoragegcPtrOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStoragegcOutput) Data() ContextSpecStoragegcDataOutput {
	return o.ApplyT(func(v ContextSpecStoragegc) ContextSpecStoragegcData { return v.Data }).(ContextSpecStoragegcDataOutput)
}

type ContextSpecStoragegcPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegc)(nil)).Elem()
}

func (o ContextSpecStoragegcPtrOutput) ToContextSpecStoragegcPtrOutput() ContextSpecStoragegcPtrOutput {
	return o
}

func (o ContextSpecStoragegcPtrOutput) ToContextSpecStoragegcPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcPtrOutput {
	return o
}

func (o ContextSpecStoragegcPtrOutput) Elem() ContextSpecStoragegcOutput {
	return o.ApplyT(func(v *ContextSpecStoragegc) ContextSpecStoragegc {
		if v != nil {
			return *v
		}
		var ret ContextSpecStoragegc
		return ret
	}).(ContextSpecStoragegcOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStoragegcPtrOutput) Data() ContextSpecStoragegcDataPtrOutput {
	return o.ApplyT(func(v *ContextSpecStoragegc) *ContextSpecStoragegcData {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(ContextSpecStoragegcDataPtrOutput)
}

type ContextSpecStoragegcData struct {
	Auth ContextSpecStoragegcDataAuth `pulumi:"auth"`
}

// ContextSpecStoragegcDataInput is an input type that accepts ContextSpecStoragegcDataArgs and ContextSpecStoragegcDataOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcDataInput` via:
//
//	ContextSpecStoragegcDataArgs{...}
type ContextSpecStoragegcDataInput interface {
	pulumi.Input

	ToContextSpecStoragegcDataOutput() ContextSpecStoragegcDataOutput
	ToContextSpecStoragegcDataOutputWithContext(context.Context) ContextSpecStoragegcDataOutput
}

type ContextSpecStoragegcDataArgs struct {
	Auth ContextSpecStoragegcDataAuthInput `pulumi:"auth"`
}

func (ContextSpecStoragegcDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegcData)(nil)).Elem()
}

func (i ContextSpecStoragegcDataArgs) ToContextSpecStoragegcDataOutput() ContextSpecStoragegcDataOutput {
	return i.ToContextSpecStoragegcDataOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcDataArgs) ToContextSpecStoragegcDataOutputWithContext(ctx context.Context) ContextSpecStoragegcDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataOutput)
}

func (i ContextSpecStoragegcDataArgs) ToContextSpecStoragegcDataPtrOutput() ContextSpecStoragegcDataPtrOutput {
	return i.ToContextSpecStoragegcDataPtrOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcDataArgs) ToContextSpecStoragegcDataPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataOutput).ToContextSpecStoragegcDataPtrOutputWithContext(ctx)
}

// ContextSpecStoragegcDataPtrInput is an input type that accepts ContextSpecStoragegcDataArgs, ContextSpecStoragegcDataPtr and ContextSpecStoragegcDataPtrOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcDataPtrInput` via:
//
//	        ContextSpecStoragegcDataArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStoragegcDataPtrInput interface {
	pulumi.Input

	ToContextSpecStoragegcDataPtrOutput() ContextSpecStoragegcDataPtrOutput
	ToContextSpecStoragegcDataPtrOutputWithContext(context.Context) ContextSpecStoragegcDataPtrOutput
}

type contextSpecStoragegcDataPtrType ContextSpecStoragegcDataArgs

func ContextSpecStoragegcDataPtr(v *ContextSpecStoragegcDataArgs) ContextSpecStoragegcDataPtrInput {
	return (*contextSpecStoragegcDataPtrType)(v)
}

func (*contextSpecStoragegcDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegcData)(nil)).Elem()
}

func (i *contextSpecStoragegcDataPtrType) ToContextSpecStoragegcDataPtrOutput() ContextSpecStoragegcDataPtrOutput {
	return i.ToContextSpecStoragegcDataPtrOutputWithContext(context.Background())
}

func (i *contextSpecStoragegcDataPtrType) ToContextSpecStoragegcDataPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataPtrOutput)
}

type ContextSpecStoragegcDataOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegcData)(nil)).Elem()
}

func (o ContextSpecStoragegcDataOutput) ToContextSpecStoragegcDataOutput() ContextSpecStoragegcDataOutput {
	return o
}

func (o ContextSpecStoragegcDataOutput) ToContextSpecStoragegcDataOutputWithContext(ctx context.Context) ContextSpecStoragegcDataOutput {
	return o
}

func (o ContextSpecStoragegcDataOutput) ToContextSpecStoragegcDataPtrOutput() ContextSpecStoragegcDataPtrOutput {
	return o.ToContextSpecStoragegcDataPtrOutputWithContext(context.Background())
}

func (o ContextSpecStoragegcDataOutput) ToContextSpecStoragegcDataPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStoragegcData) *ContextSpecStoragegcData {
		return &v
	}).(ContextSpecStoragegcDataPtrOutput)
}

func (o ContextSpecStoragegcDataOutput) Auth() ContextSpecStoragegcDataAuthOutput {
	return o.ApplyT(func(v ContextSpecStoragegcData) ContextSpecStoragegcDataAuth { return v.Auth }).(ContextSpecStoragegcDataAuthOutput)
}

type ContextSpecStoragegcDataPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegcData)(nil)).Elem()
}

func (o ContextSpecStoragegcDataPtrOutput) ToContextSpecStoragegcDataPtrOutput() ContextSpecStoragegcDataPtrOutput {
	return o
}

func (o ContextSpecStoragegcDataPtrOutput) ToContextSpecStoragegcDataPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataPtrOutput {
	return o
}

func (o ContextSpecStoragegcDataPtrOutput) Elem() ContextSpecStoragegcDataOutput {
	return o.ApplyT(func(v *ContextSpecStoragegcData) ContextSpecStoragegcData {
		if v != nil {
			return *v
		}
		var ret ContextSpecStoragegcData
		return ret
	}).(ContextSpecStoragegcDataOutput)
}

func (o ContextSpecStoragegcDataPtrOutput) Auth() ContextSpecStoragegcDataAuthPtrOutput {
	return o.ApplyT(func(v *ContextSpecStoragegcData) *ContextSpecStoragegcDataAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(ContextSpecStoragegcDataAuthPtrOutput)
}

type ContextSpecStoragegcDataAuth struct {
	JsonConfig map[string]interface{} `pulumi:"jsonConfig"`
	Type       string                 `pulumi:"type"`
}

// ContextSpecStoragegcDataAuthInput is an input type that accepts ContextSpecStoragegcDataAuthArgs and ContextSpecStoragegcDataAuthOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcDataAuthInput` via:
//
//	ContextSpecStoragegcDataAuthArgs{...}
type ContextSpecStoragegcDataAuthInput interface {
	pulumi.Input

	ToContextSpecStoragegcDataAuthOutput() ContextSpecStoragegcDataAuthOutput
	ToContextSpecStoragegcDataAuthOutputWithContext(context.Context) ContextSpecStoragegcDataAuthOutput
}

type ContextSpecStoragegcDataAuthArgs struct {
	JsonConfig pulumi.MapInput    `pulumi:"jsonConfig"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ContextSpecStoragegcDataAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegcDataAuth)(nil)).Elem()
}

func (i ContextSpecStoragegcDataAuthArgs) ToContextSpecStoragegcDataAuthOutput() ContextSpecStoragegcDataAuthOutput {
	return i.ToContextSpecStoragegcDataAuthOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcDataAuthArgs) ToContextSpecStoragegcDataAuthOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataAuthOutput)
}

func (i ContextSpecStoragegcDataAuthArgs) ToContextSpecStoragegcDataAuthPtrOutput() ContextSpecStoragegcDataAuthPtrOutput {
	return i.ToContextSpecStoragegcDataAuthPtrOutputWithContext(context.Background())
}

func (i ContextSpecStoragegcDataAuthArgs) ToContextSpecStoragegcDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataAuthOutput).ToContextSpecStoragegcDataAuthPtrOutputWithContext(ctx)
}

// ContextSpecStoragegcDataAuthPtrInput is an input type that accepts ContextSpecStoragegcDataAuthArgs, ContextSpecStoragegcDataAuthPtr and ContextSpecStoragegcDataAuthPtrOutput values.
// You can construct a concrete instance of `ContextSpecStoragegcDataAuthPtrInput` via:
//
//	        ContextSpecStoragegcDataAuthArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStoragegcDataAuthPtrInput interface {
	pulumi.Input

	ToContextSpecStoragegcDataAuthPtrOutput() ContextSpecStoragegcDataAuthPtrOutput
	ToContextSpecStoragegcDataAuthPtrOutputWithContext(context.Context) ContextSpecStoragegcDataAuthPtrOutput
}

type contextSpecStoragegcDataAuthPtrType ContextSpecStoragegcDataAuthArgs

func ContextSpecStoragegcDataAuthPtr(v *ContextSpecStoragegcDataAuthArgs) ContextSpecStoragegcDataAuthPtrInput {
	return (*contextSpecStoragegcDataAuthPtrType)(v)
}

func (*contextSpecStoragegcDataAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegcDataAuth)(nil)).Elem()
}

func (i *contextSpecStoragegcDataAuthPtrType) ToContextSpecStoragegcDataAuthPtrOutput() ContextSpecStoragegcDataAuthPtrOutput {
	return i.ToContextSpecStoragegcDataAuthPtrOutputWithContext(context.Background())
}

func (i *contextSpecStoragegcDataAuthPtrType) ToContextSpecStoragegcDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStoragegcDataAuthPtrOutput)
}

type ContextSpecStoragegcDataAuthOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcDataAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStoragegcDataAuth)(nil)).Elem()
}

func (o ContextSpecStoragegcDataAuthOutput) ToContextSpecStoragegcDataAuthOutput() ContextSpecStoragegcDataAuthOutput {
	return o
}

func (o ContextSpecStoragegcDataAuthOutput) ToContextSpecStoragegcDataAuthOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthOutput {
	return o
}

func (o ContextSpecStoragegcDataAuthOutput) ToContextSpecStoragegcDataAuthPtrOutput() ContextSpecStoragegcDataAuthPtrOutput {
	return o.ToContextSpecStoragegcDataAuthPtrOutputWithContext(context.Background())
}

func (o ContextSpecStoragegcDataAuthOutput) ToContextSpecStoragegcDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStoragegcDataAuth) *ContextSpecStoragegcDataAuth {
		return &v
	}).(ContextSpecStoragegcDataAuthPtrOutput)
}

func (o ContextSpecStoragegcDataAuthOutput) JsonConfig() pulumi.MapOutput {
	return o.ApplyT(func(v ContextSpecStoragegcDataAuth) map[string]interface{} { return v.JsonConfig }).(pulumi.MapOutput)
}

func (o ContextSpecStoragegcDataAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecStoragegcDataAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ContextSpecStoragegcDataAuthPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStoragegcDataAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStoragegcDataAuth)(nil)).Elem()
}

func (o ContextSpecStoragegcDataAuthPtrOutput) ToContextSpecStoragegcDataAuthPtrOutput() ContextSpecStoragegcDataAuthPtrOutput {
	return o
}

func (o ContextSpecStoragegcDataAuthPtrOutput) ToContextSpecStoragegcDataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStoragegcDataAuthPtrOutput {
	return o
}

func (o ContextSpecStoragegcDataAuthPtrOutput) Elem() ContextSpecStoragegcDataAuthOutput {
	return o.ApplyT(func(v *ContextSpecStoragegcDataAuth) ContextSpecStoragegcDataAuth {
		if v != nil {
			return *v
		}
		var ret ContextSpecStoragegcDataAuth
		return ret
	}).(ContextSpecStoragegcDataAuthOutput)
}

func (o ContextSpecStoragegcDataAuthPtrOutput) JsonConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *ContextSpecStoragegcDataAuth) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.JsonConfig
	}).(pulumi.MapOutput)
}

func (o ContextSpecStoragegcDataAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecStoragegcDataAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ContextSpecStorages3 struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStorages3Data `pulumi:"data"`
}

// ContextSpecStorages3Input is an input type that accepts ContextSpecStorages3Args and ContextSpecStorages3Output values.
// You can construct a concrete instance of `ContextSpecStorages3Input` via:
//
//	ContextSpecStorages3Args{...}
type ContextSpecStorages3Input interface {
	pulumi.Input

	ToContextSpecStorages3Output() ContextSpecStorages3Output
	ToContextSpecStorages3OutputWithContext(context.Context) ContextSpecStorages3Output
}

type ContextSpecStorages3Args struct {
	// Map of strings representing the variables to be defined in the Shared Config.
	Data ContextSpecStorages3DataInput `pulumi:"data"`
}

func (ContextSpecStorages3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3)(nil)).Elem()
}

func (i ContextSpecStorages3Args) ToContextSpecStorages3Output() ContextSpecStorages3Output {
	return i.ToContextSpecStorages3OutputWithContext(context.Background())
}

func (i ContextSpecStorages3Args) ToContextSpecStorages3OutputWithContext(ctx context.Context) ContextSpecStorages3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3Output)
}

func (i ContextSpecStorages3Args) ToContextSpecStorages3PtrOutput() ContextSpecStorages3PtrOutput {
	return i.ToContextSpecStorages3PtrOutputWithContext(context.Background())
}

func (i ContextSpecStorages3Args) ToContextSpecStorages3PtrOutputWithContext(ctx context.Context) ContextSpecStorages3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3Output).ToContextSpecStorages3PtrOutputWithContext(ctx)
}

// ContextSpecStorages3PtrInput is an input type that accepts ContextSpecStorages3Args, ContextSpecStorages3Ptr and ContextSpecStorages3PtrOutput values.
// You can construct a concrete instance of `ContextSpecStorages3PtrInput` via:
//
//	        ContextSpecStorages3Args{...}
//
//	or:
//
//	        nil
type ContextSpecStorages3PtrInput interface {
	pulumi.Input

	ToContextSpecStorages3PtrOutput() ContextSpecStorages3PtrOutput
	ToContextSpecStorages3PtrOutputWithContext(context.Context) ContextSpecStorages3PtrOutput
}

type contextSpecStorages3PtrType ContextSpecStorages3Args

func ContextSpecStorages3Ptr(v *ContextSpecStorages3Args) ContextSpecStorages3PtrInput {
	return (*contextSpecStorages3PtrType)(v)
}

func (*contextSpecStorages3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3)(nil)).Elem()
}

func (i *contextSpecStorages3PtrType) ToContextSpecStorages3PtrOutput() ContextSpecStorages3PtrOutput {
	return i.ToContextSpecStorages3PtrOutputWithContext(context.Background())
}

func (i *contextSpecStorages3PtrType) ToContextSpecStorages3PtrOutputWithContext(ctx context.Context) ContextSpecStorages3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3PtrOutput)
}

type ContextSpecStorages3Output struct{ *pulumi.OutputState }

func (ContextSpecStorages3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3)(nil)).Elem()
}

func (o ContextSpecStorages3Output) ToContextSpecStorages3Output() ContextSpecStorages3Output {
	return o
}

func (o ContextSpecStorages3Output) ToContextSpecStorages3OutputWithContext(ctx context.Context) ContextSpecStorages3Output {
	return o
}

func (o ContextSpecStorages3Output) ToContextSpecStorages3PtrOutput() ContextSpecStorages3PtrOutput {
	return o.ToContextSpecStorages3PtrOutputWithContext(context.Background())
}

func (o ContextSpecStorages3Output) ToContextSpecStorages3PtrOutputWithContext(ctx context.Context) ContextSpecStorages3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorages3) *ContextSpecStorages3 {
		return &v
	}).(ContextSpecStorages3PtrOutput)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStorages3Output) Data() ContextSpecStorages3DataOutput {
	return o.ApplyT(func(v ContextSpecStorages3) ContextSpecStorages3Data { return v.Data }).(ContextSpecStorages3DataOutput)
}

type ContextSpecStorages3PtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorages3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3)(nil)).Elem()
}

func (o ContextSpecStorages3PtrOutput) ToContextSpecStorages3PtrOutput() ContextSpecStorages3PtrOutput {
	return o
}

func (o ContextSpecStorages3PtrOutput) ToContextSpecStorages3PtrOutputWithContext(ctx context.Context) ContextSpecStorages3PtrOutput {
	return o
}

func (o ContextSpecStorages3PtrOutput) Elem() ContextSpecStorages3Output {
	return o.ApplyT(func(v *ContextSpecStorages3) ContextSpecStorages3 {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorages3
		return ret
	}).(ContextSpecStorages3Output)
}

// Map of strings representing the variables to be defined in the Shared Config.
func (o ContextSpecStorages3PtrOutput) Data() ContextSpecStorages3DataPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorages3) *ContextSpecStorages3Data {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(ContextSpecStorages3DataPtrOutput)
}

type ContextSpecStorages3Data struct {
	Auth ContextSpecStorages3DataAuth `pulumi:"auth"`
}

// ContextSpecStorages3DataInput is an input type that accepts ContextSpecStorages3DataArgs and ContextSpecStorages3DataOutput values.
// You can construct a concrete instance of `ContextSpecStorages3DataInput` via:
//
//	ContextSpecStorages3DataArgs{...}
type ContextSpecStorages3DataInput interface {
	pulumi.Input

	ToContextSpecStorages3DataOutput() ContextSpecStorages3DataOutput
	ToContextSpecStorages3DataOutputWithContext(context.Context) ContextSpecStorages3DataOutput
}

type ContextSpecStorages3DataArgs struct {
	Auth ContextSpecStorages3DataAuthInput `pulumi:"auth"`
}

func (ContextSpecStorages3DataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3Data)(nil)).Elem()
}

func (i ContextSpecStorages3DataArgs) ToContextSpecStorages3DataOutput() ContextSpecStorages3DataOutput {
	return i.ToContextSpecStorages3DataOutputWithContext(context.Background())
}

func (i ContextSpecStorages3DataArgs) ToContextSpecStorages3DataOutputWithContext(ctx context.Context) ContextSpecStorages3DataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataOutput)
}

func (i ContextSpecStorages3DataArgs) ToContextSpecStorages3DataPtrOutput() ContextSpecStorages3DataPtrOutput {
	return i.ToContextSpecStorages3DataPtrOutputWithContext(context.Background())
}

func (i ContextSpecStorages3DataArgs) ToContextSpecStorages3DataPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataOutput).ToContextSpecStorages3DataPtrOutputWithContext(ctx)
}

// ContextSpecStorages3DataPtrInput is an input type that accepts ContextSpecStorages3DataArgs, ContextSpecStorages3DataPtr and ContextSpecStorages3DataPtrOutput values.
// You can construct a concrete instance of `ContextSpecStorages3DataPtrInput` via:
//
//	        ContextSpecStorages3DataArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStorages3DataPtrInput interface {
	pulumi.Input

	ToContextSpecStorages3DataPtrOutput() ContextSpecStorages3DataPtrOutput
	ToContextSpecStorages3DataPtrOutputWithContext(context.Context) ContextSpecStorages3DataPtrOutput
}

type contextSpecStorages3DataPtrType ContextSpecStorages3DataArgs

func ContextSpecStorages3DataPtr(v *ContextSpecStorages3DataArgs) ContextSpecStorages3DataPtrInput {
	return (*contextSpecStorages3DataPtrType)(v)
}

func (*contextSpecStorages3DataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3Data)(nil)).Elem()
}

func (i *contextSpecStorages3DataPtrType) ToContextSpecStorages3DataPtrOutput() ContextSpecStorages3DataPtrOutput {
	return i.ToContextSpecStorages3DataPtrOutputWithContext(context.Background())
}

func (i *contextSpecStorages3DataPtrType) ToContextSpecStorages3DataPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataPtrOutput)
}

type ContextSpecStorages3DataOutput struct{ *pulumi.OutputState }

func (ContextSpecStorages3DataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3Data)(nil)).Elem()
}

func (o ContextSpecStorages3DataOutput) ToContextSpecStorages3DataOutput() ContextSpecStorages3DataOutput {
	return o
}

func (o ContextSpecStorages3DataOutput) ToContextSpecStorages3DataOutputWithContext(ctx context.Context) ContextSpecStorages3DataOutput {
	return o
}

func (o ContextSpecStorages3DataOutput) ToContextSpecStorages3DataPtrOutput() ContextSpecStorages3DataPtrOutput {
	return o.ToContextSpecStorages3DataPtrOutputWithContext(context.Background())
}

func (o ContextSpecStorages3DataOutput) ToContextSpecStorages3DataPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorages3Data) *ContextSpecStorages3Data {
		return &v
	}).(ContextSpecStorages3DataPtrOutput)
}

func (o ContextSpecStorages3DataOutput) Auth() ContextSpecStorages3DataAuthOutput {
	return o.ApplyT(func(v ContextSpecStorages3Data) ContextSpecStorages3DataAuth { return v.Auth }).(ContextSpecStorages3DataAuthOutput)
}

type ContextSpecStorages3DataPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorages3DataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3Data)(nil)).Elem()
}

func (o ContextSpecStorages3DataPtrOutput) ToContextSpecStorages3DataPtrOutput() ContextSpecStorages3DataPtrOutput {
	return o
}

func (o ContextSpecStorages3DataPtrOutput) ToContextSpecStorages3DataPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataPtrOutput {
	return o
}

func (o ContextSpecStorages3DataPtrOutput) Elem() ContextSpecStorages3DataOutput {
	return o.ApplyT(func(v *ContextSpecStorages3Data) ContextSpecStorages3Data {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorages3Data
		return ret
	}).(ContextSpecStorages3DataOutput)
}

func (o ContextSpecStorages3DataPtrOutput) Auth() ContextSpecStorages3DataAuthPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorages3Data) *ContextSpecStorages3DataAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(ContextSpecStorages3DataAuthPtrOutput)
}

type ContextSpecStorages3DataAuth struct {
	JsonConfig map[string]interface{} `pulumi:"jsonConfig"`
	Type       string                 `pulumi:"type"`
}

// ContextSpecStorages3DataAuthInput is an input type that accepts ContextSpecStorages3DataAuthArgs and ContextSpecStorages3DataAuthOutput values.
// You can construct a concrete instance of `ContextSpecStorages3DataAuthInput` via:
//
//	ContextSpecStorages3DataAuthArgs{...}
type ContextSpecStorages3DataAuthInput interface {
	pulumi.Input

	ToContextSpecStorages3DataAuthOutput() ContextSpecStorages3DataAuthOutput
	ToContextSpecStorages3DataAuthOutputWithContext(context.Context) ContextSpecStorages3DataAuthOutput
}

type ContextSpecStorages3DataAuthArgs struct {
	JsonConfig pulumi.MapInput    `pulumi:"jsonConfig"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ContextSpecStorages3DataAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3DataAuth)(nil)).Elem()
}

func (i ContextSpecStorages3DataAuthArgs) ToContextSpecStorages3DataAuthOutput() ContextSpecStorages3DataAuthOutput {
	return i.ToContextSpecStorages3DataAuthOutputWithContext(context.Background())
}

func (i ContextSpecStorages3DataAuthArgs) ToContextSpecStorages3DataAuthOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataAuthOutput)
}

func (i ContextSpecStorages3DataAuthArgs) ToContextSpecStorages3DataAuthPtrOutput() ContextSpecStorages3DataAuthPtrOutput {
	return i.ToContextSpecStorages3DataAuthPtrOutputWithContext(context.Background())
}

func (i ContextSpecStorages3DataAuthArgs) ToContextSpecStorages3DataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataAuthOutput).ToContextSpecStorages3DataAuthPtrOutputWithContext(ctx)
}

// ContextSpecStorages3DataAuthPtrInput is an input type that accepts ContextSpecStorages3DataAuthArgs, ContextSpecStorages3DataAuthPtr and ContextSpecStorages3DataAuthPtrOutput values.
// You can construct a concrete instance of `ContextSpecStorages3DataAuthPtrInput` via:
//
//	        ContextSpecStorages3DataAuthArgs{...}
//
//	or:
//
//	        nil
type ContextSpecStorages3DataAuthPtrInput interface {
	pulumi.Input

	ToContextSpecStorages3DataAuthPtrOutput() ContextSpecStorages3DataAuthPtrOutput
	ToContextSpecStorages3DataAuthPtrOutputWithContext(context.Context) ContextSpecStorages3DataAuthPtrOutput
}

type contextSpecStorages3DataAuthPtrType ContextSpecStorages3DataAuthArgs

func ContextSpecStorages3DataAuthPtr(v *ContextSpecStorages3DataAuthArgs) ContextSpecStorages3DataAuthPtrInput {
	return (*contextSpecStorages3DataAuthPtrType)(v)
}

func (*contextSpecStorages3DataAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3DataAuth)(nil)).Elem()
}

func (i *contextSpecStorages3DataAuthPtrType) ToContextSpecStorages3DataAuthPtrOutput() ContextSpecStorages3DataAuthPtrOutput {
	return i.ToContextSpecStorages3DataAuthPtrOutputWithContext(context.Background())
}

func (i *contextSpecStorages3DataAuthPtrType) ToContextSpecStorages3DataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecStorages3DataAuthPtrOutput)
}

type ContextSpecStorages3DataAuthOutput struct{ *pulumi.OutputState }

func (ContextSpecStorages3DataAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecStorages3DataAuth)(nil)).Elem()
}

func (o ContextSpecStorages3DataAuthOutput) ToContextSpecStorages3DataAuthOutput() ContextSpecStorages3DataAuthOutput {
	return o
}

func (o ContextSpecStorages3DataAuthOutput) ToContextSpecStorages3DataAuthOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthOutput {
	return o
}

func (o ContextSpecStorages3DataAuthOutput) ToContextSpecStorages3DataAuthPtrOutput() ContextSpecStorages3DataAuthPtrOutput {
	return o.ToContextSpecStorages3DataAuthPtrOutputWithContext(context.Background())
}

func (o ContextSpecStorages3DataAuthOutput) ToContextSpecStorages3DataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecStorages3DataAuth) *ContextSpecStorages3DataAuth {
		return &v
	}).(ContextSpecStorages3DataAuthPtrOutput)
}

func (o ContextSpecStorages3DataAuthOutput) JsonConfig() pulumi.MapOutput {
	return o.ApplyT(func(v ContextSpecStorages3DataAuth) map[string]interface{} { return v.JsonConfig }).(pulumi.MapOutput)
}

func (o ContextSpecStorages3DataAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecStorages3DataAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ContextSpecStorages3DataAuthPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecStorages3DataAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecStorages3DataAuth)(nil)).Elem()
}

func (o ContextSpecStorages3DataAuthPtrOutput) ToContextSpecStorages3DataAuthPtrOutput() ContextSpecStorages3DataAuthPtrOutput {
	return o
}

func (o ContextSpecStorages3DataAuthPtrOutput) ToContextSpecStorages3DataAuthPtrOutputWithContext(ctx context.Context) ContextSpecStorages3DataAuthPtrOutput {
	return o
}

func (o ContextSpecStorages3DataAuthPtrOutput) Elem() ContextSpecStorages3DataAuthOutput {
	return o.ApplyT(func(v *ContextSpecStorages3DataAuth) ContextSpecStorages3DataAuth {
		if v != nil {
			return *v
		}
		var ret ContextSpecStorages3DataAuth
		return ret
	}).(ContextSpecStorages3DataAuthOutput)
}

func (o ContextSpecStorages3DataAuthPtrOutput) JsonConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *ContextSpecStorages3DataAuth) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.JsonConfig
	}).(pulumi.MapOutput)
}

func (o ContextSpecStorages3DataAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecStorages3DataAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ContextSpecYaml struct {
	// String representing a YAML file content
	Data string `pulumi:"data"`
}

// ContextSpecYamlInput is an input type that accepts ContextSpecYamlArgs and ContextSpecYamlOutput values.
// You can construct a concrete instance of `ContextSpecYamlInput` via:
//
//	ContextSpecYamlArgs{...}
type ContextSpecYamlInput interface {
	pulumi.Input

	ToContextSpecYamlOutput() ContextSpecYamlOutput
	ToContextSpecYamlOutputWithContext(context.Context) ContextSpecYamlOutput
}

type ContextSpecYamlArgs struct {
	// String representing a YAML file content
	Data pulumi.StringInput `pulumi:"data"`
}

func (ContextSpecYamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecYaml)(nil)).Elem()
}

func (i ContextSpecYamlArgs) ToContextSpecYamlOutput() ContextSpecYamlOutput {
	return i.ToContextSpecYamlOutputWithContext(context.Background())
}

func (i ContextSpecYamlArgs) ToContextSpecYamlOutputWithContext(ctx context.Context) ContextSpecYamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecYamlOutput)
}

func (i ContextSpecYamlArgs) ToContextSpecYamlPtrOutput() ContextSpecYamlPtrOutput {
	return i.ToContextSpecYamlPtrOutputWithContext(context.Background())
}

func (i ContextSpecYamlArgs) ToContextSpecYamlPtrOutputWithContext(ctx context.Context) ContextSpecYamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecYamlOutput).ToContextSpecYamlPtrOutputWithContext(ctx)
}

// ContextSpecYamlPtrInput is an input type that accepts ContextSpecYamlArgs, ContextSpecYamlPtr and ContextSpecYamlPtrOutput values.
// You can construct a concrete instance of `ContextSpecYamlPtrInput` via:
//
//	        ContextSpecYamlArgs{...}
//
//	or:
//
//	        nil
type ContextSpecYamlPtrInput interface {
	pulumi.Input

	ToContextSpecYamlPtrOutput() ContextSpecYamlPtrOutput
	ToContextSpecYamlPtrOutputWithContext(context.Context) ContextSpecYamlPtrOutput
}

type contextSpecYamlPtrType ContextSpecYamlArgs

func ContextSpecYamlPtr(v *ContextSpecYamlArgs) ContextSpecYamlPtrInput {
	return (*contextSpecYamlPtrType)(v)
}

func (*contextSpecYamlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecYaml)(nil)).Elem()
}

func (i *contextSpecYamlPtrType) ToContextSpecYamlPtrOutput() ContextSpecYamlPtrOutput {
	return i.ToContextSpecYamlPtrOutputWithContext(context.Background())
}

func (i *contextSpecYamlPtrType) ToContextSpecYamlPtrOutputWithContext(ctx context.Context) ContextSpecYamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextSpecYamlPtrOutput)
}

type ContextSpecYamlOutput struct{ *pulumi.OutputState }

func (ContextSpecYamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextSpecYaml)(nil)).Elem()
}

func (o ContextSpecYamlOutput) ToContextSpecYamlOutput() ContextSpecYamlOutput {
	return o
}

func (o ContextSpecYamlOutput) ToContextSpecYamlOutputWithContext(ctx context.Context) ContextSpecYamlOutput {
	return o
}

func (o ContextSpecYamlOutput) ToContextSpecYamlPtrOutput() ContextSpecYamlPtrOutput {
	return o.ToContextSpecYamlPtrOutputWithContext(context.Background())
}

func (o ContextSpecYamlOutput) ToContextSpecYamlPtrOutputWithContext(ctx context.Context) ContextSpecYamlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContextSpecYaml) *ContextSpecYaml {
		return &v
	}).(ContextSpecYamlPtrOutput)
}

// String representing a YAML file content
func (o ContextSpecYamlOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ContextSpecYaml) string { return v.Data }).(pulumi.StringOutput)
}

type ContextSpecYamlPtrOutput struct{ *pulumi.OutputState }

func (ContextSpecYamlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContextSpecYaml)(nil)).Elem()
}

func (o ContextSpecYamlPtrOutput) ToContextSpecYamlPtrOutput() ContextSpecYamlPtrOutput {
	return o
}

func (o ContextSpecYamlPtrOutput) ToContextSpecYamlPtrOutputWithContext(ctx context.Context) ContextSpecYamlPtrOutput {
	return o
}

func (o ContextSpecYamlPtrOutput) Elem() ContextSpecYamlOutput {
	return o.ApplyT(func(v *ContextSpecYaml) ContextSpecYaml {
		if v != nil {
			return *v
		}
		var ret ContextSpecYaml
		return ret
	}).(ContextSpecYamlOutput)
}

// String representing a YAML file content
func (o ContextSpecYamlPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContextSpecYaml) *string {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(pulumi.StringPtrOutput)
}

type PipelineSpec struct {
	// The maximum amount of concurrent builds that may run for each branch
	BranchConcurrency *int `pulumi:"branchConcurrency"`
	// The maximum amount of concurrent builds.
	Concurrency *int `pulumi:"concurrency"`
	// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
	Contexts []string `pulumi:"contexts"`
	// A `options` block as documented below.
	Options *PipelineSpecOptions `pulumi:"options"`
	// SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
	PackId *string `pulumi:"packId"`
	// Helps to organize the order of builds execution in case of reaching the concurrency limit.
	Priority *int `pulumi:"priority"`
	// Minimum disk space required for build filesystem ( unit Gi is required)
	RequiredAvailableStorage *string `pulumi:"requiredAvailableStorage"`
	// A collection of `runtimeEnvironment` blocks as documented below.
	RuntimeEnvironments []PipelineSpecRuntimeEnvironment `pulumi:"runtimeEnvironments"`
	// A collection of `specTemplate` blocks as documented below.
	SpecTemplates []PipelineSpecSpecTemplate `pulumi:"specTemplates"`
	// A `terminationPolicy` block as documented below.
	TerminationPolicy *PipelineSpecTerminationPolicy `pulumi:"terminationPolicy"`
	// The maximum amount of concurrent builds that may run for each trigger.
	TriggerConcurrency *int `pulumi:"triggerConcurrency"`
	// A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
	Triggers []PipelineSpecTrigger `pulumi:"triggers"`
	// Pipeline variables.
	Variables map[string]string `pulumi:"variables"`
}

// PipelineSpecInput is an input type that accepts PipelineSpecArgs and PipelineSpecOutput values.
// You can construct a concrete instance of `PipelineSpecInput` via:
//
//	PipelineSpecArgs{...}
type PipelineSpecInput interface {
	pulumi.Input

	ToPipelineSpecOutput() PipelineSpecOutput
	ToPipelineSpecOutputWithContext(context.Context) PipelineSpecOutput
}

type PipelineSpecArgs struct {
	// The maximum amount of concurrent builds that may run for each branch
	BranchConcurrency pulumi.IntPtrInput `pulumi:"branchConcurrency"`
	// The maximum amount of concurrent builds.
	Concurrency pulumi.IntPtrInput `pulumi:"concurrency"`
	// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
	Contexts pulumi.StringArrayInput `pulumi:"contexts"`
	// A `options` block as documented below.
	Options PipelineSpecOptionsPtrInput `pulumi:"options"`
	// SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
	PackId pulumi.StringPtrInput `pulumi:"packId"`
	// Helps to organize the order of builds execution in case of reaching the concurrency limit.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Minimum disk space required for build filesystem ( unit Gi is required)
	RequiredAvailableStorage pulumi.StringPtrInput `pulumi:"requiredAvailableStorage"`
	// A collection of `runtimeEnvironment` blocks as documented below.
	RuntimeEnvironments PipelineSpecRuntimeEnvironmentArrayInput `pulumi:"runtimeEnvironments"`
	// A collection of `specTemplate` blocks as documented below.
	SpecTemplates PipelineSpecSpecTemplateArrayInput `pulumi:"specTemplates"`
	// A `terminationPolicy` block as documented below.
	TerminationPolicy PipelineSpecTerminationPolicyPtrInput `pulumi:"terminationPolicy"`
	// The maximum amount of concurrent builds that may run for each trigger.
	TriggerConcurrency pulumi.IntPtrInput `pulumi:"triggerConcurrency"`
	// A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
	Triggers PipelineSpecTriggerArrayInput `pulumi:"triggers"`
	// Pipeline variables.
	Variables pulumi.StringMapInput `pulumi:"variables"`
}

func (PipelineSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpec)(nil)).Elem()
}

func (i PipelineSpecArgs) ToPipelineSpecOutput() PipelineSpecOutput {
	return i.ToPipelineSpecOutputWithContext(context.Background())
}

func (i PipelineSpecArgs) ToPipelineSpecOutputWithContext(ctx context.Context) PipelineSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecOutput)
}

func (i PipelineSpecArgs) ToPipelineSpecPtrOutput() PipelineSpecPtrOutput {
	return i.ToPipelineSpecPtrOutputWithContext(context.Background())
}

func (i PipelineSpecArgs) ToPipelineSpecPtrOutputWithContext(ctx context.Context) PipelineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecOutput).ToPipelineSpecPtrOutputWithContext(ctx)
}

// PipelineSpecPtrInput is an input type that accepts PipelineSpecArgs, PipelineSpecPtr and PipelineSpecPtrOutput values.
// You can construct a concrete instance of `PipelineSpecPtrInput` via:
//
//	        PipelineSpecArgs{...}
//
//	or:
//
//	        nil
type PipelineSpecPtrInput interface {
	pulumi.Input

	ToPipelineSpecPtrOutput() PipelineSpecPtrOutput
	ToPipelineSpecPtrOutputWithContext(context.Context) PipelineSpecPtrOutput
}

type pipelineSpecPtrType PipelineSpecArgs

func PipelineSpecPtr(v *PipelineSpecArgs) PipelineSpecPtrInput {
	return (*pipelineSpecPtrType)(v)
}

func (*pipelineSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpec)(nil)).Elem()
}

func (i *pipelineSpecPtrType) ToPipelineSpecPtrOutput() PipelineSpecPtrOutput {
	return i.ToPipelineSpecPtrOutputWithContext(context.Background())
}

func (i *pipelineSpecPtrType) ToPipelineSpecPtrOutputWithContext(ctx context.Context) PipelineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecPtrOutput)
}

type PipelineSpecOutput struct{ *pulumi.OutputState }

func (PipelineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpec)(nil)).Elem()
}

func (o PipelineSpecOutput) ToPipelineSpecOutput() PipelineSpecOutput {
	return o
}

func (o PipelineSpecOutput) ToPipelineSpecOutputWithContext(ctx context.Context) PipelineSpecOutput {
	return o
}

func (o PipelineSpecOutput) ToPipelineSpecPtrOutput() PipelineSpecPtrOutput {
	return o.ToPipelineSpecPtrOutputWithContext(context.Background())
}

func (o PipelineSpecOutput) ToPipelineSpecPtrOutputWithContext(ctx context.Context) PipelineSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSpec) *PipelineSpec {
		return &v
	}).(PipelineSpecPtrOutput)
}

// The maximum amount of concurrent builds that may run for each branch
func (o PipelineSpecOutput) BranchConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *int { return v.BranchConcurrency }).(pulumi.IntPtrOutput)
}

// The maximum amount of concurrent builds.
func (o PipelineSpecOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *int { return v.Concurrency }).(pulumi.IntPtrOutput)
}

// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
func (o PipelineSpecOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineSpec) []string { return v.Contexts }).(pulumi.StringArrayOutput)
}

// A `options` block as documented below.
func (o PipelineSpecOutput) Options() PipelineSpecOptionsPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *PipelineSpecOptions { return v.Options }).(PipelineSpecOptionsPtrOutput)
}

// SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
func (o PipelineSpecOutput) PackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *string { return v.PackId }).(pulumi.StringPtrOutput)
}

// Helps to organize the order of builds execution in case of reaching the concurrency limit.
func (o PipelineSpecOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Minimum disk space required for build filesystem ( unit Gi is required)
func (o PipelineSpecOutput) RequiredAvailableStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *string { return v.RequiredAvailableStorage }).(pulumi.StringPtrOutput)
}

// A collection of `runtimeEnvironment` blocks as documented below.
func (o PipelineSpecOutput) RuntimeEnvironments() PipelineSpecRuntimeEnvironmentArrayOutput {
	return o.ApplyT(func(v PipelineSpec) []PipelineSpecRuntimeEnvironment { return v.RuntimeEnvironments }).(PipelineSpecRuntimeEnvironmentArrayOutput)
}

// A collection of `specTemplate` blocks as documented below.
func (o PipelineSpecOutput) SpecTemplates() PipelineSpecSpecTemplateArrayOutput {
	return o.ApplyT(func(v PipelineSpec) []PipelineSpecSpecTemplate { return v.SpecTemplates }).(PipelineSpecSpecTemplateArrayOutput)
}

// A `terminationPolicy` block as documented below.
func (o PipelineSpecOutput) TerminationPolicy() PipelineSpecTerminationPolicyPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *PipelineSpecTerminationPolicy { return v.TerminationPolicy }).(PipelineSpecTerminationPolicyPtrOutput)
}

// The maximum amount of concurrent builds that may run for each trigger.
func (o PipelineSpecOutput) TriggerConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineSpec) *int { return v.TriggerConcurrency }).(pulumi.IntPtrOutput)
}

// A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
func (o PipelineSpecOutput) Triggers() PipelineSpecTriggerArrayOutput {
	return o.ApplyT(func(v PipelineSpec) []PipelineSpecTrigger { return v.Triggers }).(PipelineSpecTriggerArrayOutput)
}

// Pipeline variables.
func (o PipelineSpecOutput) Variables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineSpec) map[string]string { return v.Variables }).(pulumi.StringMapOutput)
}

type PipelineSpecPtrOutput struct{ *pulumi.OutputState }

func (PipelineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpec)(nil)).Elem()
}

func (o PipelineSpecPtrOutput) ToPipelineSpecPtrOutput() PipelineSpecPtrOutput {
	return o
}

func (o PipelineSpecPtrOutput) ToPipelineSpecPtrOutputWithContext(ctx context.Context) PipelineSpecPtrOutput {
	return o
}

func (o PipelineSpecPtrOutput) Elem() PipelineSpecOutput {
	return o.ApplyT(func(v *PipelineSpec) PipelineSpec {
		if v != nil {
			return *v
		}
		var ret PipelineSpec
		return ret
	}).(PipelineSpecOutput)
}

// The maximum amount of concurrent builds that may run for each branch
func (o PipelineSpecPtrOutput) BranchConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *int {
		if v == nil {
			return nil
		}
		return v.BranchConcurrency
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of concurrent builds.
func (o PipelineSpecPtrOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *int {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(pulumi.IntPtrOutput)
}

// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
func (o PipelineSpecPtrOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineSpec) []string {
		if v == nil {
			return nil
		}
		return v.Contexts
	}).(pulumi.StringArrayOutput)
}

// A `options` block as documented below.
func (o PipelineSpecPtrOutput) Options() PipelineSpecOptionsPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *PipelineSpecOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(PipelineSpecOptionsPtrOutput)
}

// SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
func (o PipelineSpecPtrOutput) PackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *string {
		if v == nil {
			return nil
		}
		return v.PackId
	}).(pulumi.StringPtrOutput)
}

// Helps to organize the order of builds execution in case of reaching the concurrency limit.
func (o PipelineSpecPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Minimum disk space required for build filesystem ( unit Gi is required)
func (o PipelineSpecPtrOutput) RequiredAvailableStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *string {
		if v == nil {
			return nil
		}
		return v.RequiredAvailableStorage
	}).(pulumi.StringPtrOutput)
}

// A collection of `runtimeEnvironment` blocks as documented below.
func (o PipelineSpecPtrOutput) RuntimeEnvironments() PipelineSpecRuntimeEnvironmentArrayOutput {
	return o.ApplyT(func(v *PipelineSpec) []PipelineSpecRuntimeEnvironment {
		if v == nil {
			return nil
		}
		return v.RuntimeEnvironments
	}).(PipelineSpecRuntimeEnvironmentArrayOutput)
}

// A collection of `specTemplate` blocks as documented below.
func (o PipelineSpecPtrOutput) SpecTemplates() PipelineSpecSpecTemplateArrayOutput {
	return o.ApplyT(func(v *PipelineSpec) []PipelineSpecSpecTemplate {
		if v == nil {
			return nil
		}
		return v.SpecTemplates
	}).(PipelineSpecSpecTemplateArrayOutput)
}

// A `terminationPolicy` block as documented below.
func (o PipelineSpecPtrOutput) TerminationPolicy() PipelineSpecTerminationPolicyPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *PipelineSpecTerminationPolicy {
		if v == nil {
			return nil
		}
		return v.TerminationPolicy
	}).(PipelineSpecTerminationPolicyPtrOutput)
}

// The maximum amount of concurrent builds that may run for each trigger.
func (o PipelineSpecPtrOutput) TriggerConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineSpec) *int {
		if v == nil {
			return nil
		}
		return v.TriggerConcurrency
	}).(pulumi.IntPtrOutput)
}

// A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
func (o PipelineSpecPtrOutput) Triggers() PipelineSpecTriggerArrayOutput {
	return o.ApplyT(func(v *PipelineSpec) []PipelineSpecTrigger {
		if v == nil {
			return nil
		}
		return v.Triggers
	}).(PipelineSpecTriggerArrayOutput)
}

// Pipeline variables.
func (o PipelineSpecPtrOutput) Variables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(pulumi.StringMapOutput)
}

type PipelineSpecOptions struct {
	// Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
	// * Default (attribute not specified): "Use Setting accounts"
	// * true: "Remain (build remains active)"
	// * false: "Be removed"
	KeepPvcsForPendingApproval *bool `pulumi:"keepPvcsForPendingApproval"`
	// Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
	// * Default (attribute not specified): "Use Setting accounts"
	// * true: "Included in concurrency"
	// * false: "Not included in concurrency"
	PendingApprovalConcurrencyApplied *bool `pulumi:"pendingApprovalConcurrencyApplied"`
}

// PipelineSpecOptionsInput is an input type that accepts PipelineSpecOptionsArgs and PipelineSpecOptionsOutput values.
// You can construct a concrete instance of `PipelineSpecOptionsInput` via:
//
//	PipelineSpecOptionsArgs{...}
type PipelineSpecOptionsInput interface {
	pulumi.Input

	ToPipelineSpecOptionsOutput() PipelineSpecOptionsOutput
	ToPipelineSpecOptionsOutputWithContext(context.Context) PipelineSpecOptionsOutput
}

type PipelineSpecOptionsArgs struct {
	// Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
	// * Default (attribute not specified): "Use Setting accounts"
	// * true: "Remain (build remains active)"
	// * false: "Be removed"
	KeepPvcsForPendingApproval pulumi.BoolPtrInput `pulumi:"keepPvcsForPendingApproval"`
	// Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
	// * Default (attribute not specified): "Use Setting accounts"
	// * true: "Included in concurrency"
	// * false: "Not included in concurrency"
	PendingApprovalConcurrencyApplied pulumi.BoolPtrInput `pulumi:"pendingApprovalConcurrencyApplied"`
}

func (PipelineSpecOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecOptions)(nil)).Elem()
}

func (i PipelineSpecOptionsArgs) ToPipelineSpecOptionsOutput() PipelineSpecOptionsOutput {
	return i.ToPipelineSpecOptionsOutputWithContext(context.Background())
}

func (i PipelineSpecOptionsArgs) ToPipelineSpecOptionsOutputWithContext(ctx context.Context) PipelineSpecOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecOptionsOutput)
}

func (i PipelineSpecOptionsArgs) ToPipelineSpecOptionsPtrOutput() PipelineSpecOptionsPtrOutput {
	return i.ToPipelineSpecOptionsPtrOutputWithContext(context.Background())
}

func (i PipelineSpecOptionsArgs) ToPipelineSpecOptionsPtrOutputWithContext(ctx context.Context) PipelineSpecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecOptionsOutput).ToPipelineSpecOptionsPtrOutputWithContext(ctx)
}

// PipelineSpecOptionsPtrInput is an input type that accepts PipelineSpecOptionsArgs, PipelineSpecOptionsPtr and PipelineSpecOptionsPtrOutput values.
// You can construct a concrete instance of `PipelineSpecOptionsPtrInput` via:
//
//	        PipelineSpecOptionsArgs{...}
//
//	or:
//
//	        nil
type PipelineSpecOptionsPtrInput interface {
	pulumi.Input

	ToPipelineSpecOptionsPtrOutput() PipelineSpecOptionsPtrOutput
	ToPipelineSpecOptionsPtrOutputWithContext(context.Context) PipelineSpecOptionsPtrOutput
}

type pipelineSpecOptionsPtrType PipelineSpecOptionsArgs

func PipelineSpecOptionsPtr(v *PipelineSpecOptionsArgs) PipelineSpecOptionsPtrInput {
	return (*pipelineSpecOptionsPtrType)(v)
}

func (*pipelineSpecOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecOptions)(nil)).Elem()
}

func (i *pipelineSpecOptionsPtrType) ToPipelineSpecOptionsPtrOutput() PipelineSpecOptionsPtrOutput {
	return i.ToPipelineSpecOptionsPtrOutputWithContext(context.Background())
}

func (i *pipelineSpecOptionsPtrType) ToPipelineSpecOptionsPtrOutputWithContext(ctx context.Context) PipelineSpecOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecOptionsPtrOutput)
}

type PipelineSpecOptionsOutput struct{ *pulumi.OutputState }

func (PipelineSpecOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecOptions)(nil)).Elem()
}

func (o PipelineSpecOptionsOutput) ToPipelineSpecOptionsOutput() PipelineSpecOptionsOutput {
	return o
}

func (o PipelineSpecOptionsOutput) ToPipelineSpecOptionsOutputWithContext(ctx context.Context) PipelineSpecOptionsOutput {
	return o
}

func (o PipelineSpecOptionsOutput) ToPipelineSpecOptionsPtrOutput() PipelineSpecOptionsPtrOutput {
	return o.ToPipelineSpecOptionsPtrOutputWithContext(context.Background())
}

func (o PipelineSpecOptionsOutput) ToPipelineSpecOptionsPtrOutputWithContext(ctx context.Context) PipelineSpecOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSpecOptions) *PipelineSpecOptions {
		return &v
	}).(PipelineSpecOptionsPtrOutput)
}

// Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
// * Default (attribute not specified): "Use Setting accounts"
// * true: "Remain (build remains active)"
// * false: "Be removed"
func (o PipelineSpecOptionsOutput) KeepPvcsForPendingApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecOptions) *bool { return v.KeepPvcsForPendingApproval }).(pulumi.BoolPtrOutput)
}

// Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
// * Default (attribute not specified): "Use Setting accounts"
// * true: "Included in concurrency"
// * false: "Not included in concurrency"
func (o PipelineSpecOptionsOutput) PendingApprovalConcurrencyApplied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecOptions) *bool { return v.PendingApprovalConcurrencyApplied }).(pulumi.BoolPtrOutput)
}

type PipelineSpecOptionsPtrOutput struct{ *pulumi.OutputState }

func (PipelineSpecOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecOptions)(nil)).Elem()
}

func (o PipelineSpecOptionsPtrOutput) ToPipelineSpecOptionsPtrOutput() PipelineSpecOptionsPtrOutput {
	return o
}

func (o PipelineSpecOptionsPtrOutput) ToPipelineSpecOptionsPtrOutputWithContext(ctx context.Context) PipelineSpecOptionsPtrOutput {
	return o
}

func (o PipelineSpecOptionsPtrOutput) Elem() PipelineSpecOptionsOutput {
	return o.ApplyT(func(v *PipelineSpecOptions) PipelineSpecOptions {
		if v != nil {
			return *v
		}
		var ret PipelineSpecOptions
		return ret
	}).(PipelineSpecOptionsOutput)
}

// Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
// * Default (attribute not specified): "Use Setting accounts"
// * true: "Remain (build remains active)"
// * false: "Be removed"
func (o PipelineSpecOptionsPtrOutput) KeepPvcsForPendingApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineSpecOptions) *bool {
		if v == nil {
			return nil
		}
		return v.KeepPvcsForPendingApproval
	}).(pulumi.BoolPtrOutput)
}

// Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
// * Default (attribute not specified): "Use Setting accounts"
// * true: "Included in concurrency"
// * false: "Not included in concurrency"
func (o PipelineSpecOptionsPtrOutput) PendingApprovalConcurrencyApplied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineSpecOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PendingApprovalConcurrencyApplied
	}).(pulumi.BoolPtrOutput)
}

type PipelineSpecRuntimeEnvironment struct {
	// A required amount of CPU.
	Cpu *string `pulumi:"cpu"`
	// A pipeline shared storage.
	DindStorage *string `pulumi:"dindStorage"`
	// A required amount of memory.
	Memory *string `pulumi:"memory"`
	// A name of runtime.
	Name *string `pulumi:"name"`
}

// PipelineSpecRuntimeEnvironmentInput is an input type that accepts PipelineSpecRuntimeEnvironmentArgs and PipelineSpecRuntimeEnvironmentOutput values.
// You can construct a concrete instance of `PipelineSpecRuntimeEnvironmentInput` via:
//
//	PipelineSpecRuntimeEnvironmentArgs{...}
type PipelineSpecRuntimeEnvironmentInput interface {
	pulumi.Input

	ToPipelineSpecRuntimeEnvironmentOutput() PipelineSpecRuntimeEnvironmentOutput
	ToPipelineSpecRuntimeEnvironmentOutputWithContext(context.Context) PipelineSpecRuntimeEnvironmentOutput
}

type PipelineSpecRuntimeEnvironmentArgs struct {
	// A required amount of CPU.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// A pipeline shared storage.
	DindStorage pulumi.StringPtrInput `pulumi:"dindStorage"`
	// A required amount of memory.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// A name of runtime.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineSpecRuntimeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecRuntimeEnvironment)(nil)).Elem()
}

func (i PipelineSpecRuntimeEnvironmentArgs) ToPipelineSpecRuntimeEnvironmentOutput() PipelineSpecRuntimeEnvironmentOutput {
	return i.ToPipelineSpecRuntimeEnvironmentOutputWithContext(context.Background())
}

func (i PipelineSpecRuntimeEnvironmentArgs) ToPipelineSpecRuntimeEnvironmentOutputWithContext(ctx context.Context) PipelineSpecRuntimeEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecRuntimeEnvironmentOutput)
}

// PipelineSpecRuntimeEnvironmentArrayInput is an input type that accepts PipelineSpecRuntimeEnvironmentArray and PipelineSpecRuntimeEnvironmentArrayOutput values.
// You can construct a concrete instance of `PipelineSpecRuntimeEnvironmentArrayInput` via:
//
//	PipelineSpecRuntimeEnvironmentArray{ PipelineSpecRuntimeEnvironmentArgs{...} }
type PipelineSpecRuntimeEnvironmentArrayInput interface {
	pulumi.Input

	ToPipelineSpecRuntimeEnvironmentArrayOutput() PipelineSpecRuntimeEnvironmentArrayOutput
	ToPipelineSpecRuntimeEnvironmentArrayOutputWithContext(context.Context) PipelineSpecRuntimeEnvironmentArrayOutput
}

type PipelineSpecRuntimeEnvironmentArray []PipelineSpecRuntimeEnvironmentInput

func (PipelineSpecRuntimeEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecRuntimeEnvironment)(nil)).Elem()
}

func (i PipelineSpecRuntimeEnvironmentArray) ToPipelineSpecRuntimeEnvironmentArrayOutput() PipelineSpecRuntimeEnvironmentArrayOutput {
	return i.ToPipelineSpecRuntimeEnvironmentArrayOutputWithContext(context.Background())
}

func (i PipelineSpecRuntimeEnvironmentArray) ToPipelineSpecRuntimeEnvironmentArrayOutputWithContext(ctx context.Context) PipelineSpecRuntimeEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecRuntimeEnvironmentArrayOutput)
}

type PipelineSpecRuntimeEnvironmentOutput struct{ *pulumi.OutputState }

func (PipelineSpecRuntimeEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecRuntimeEnvironment)(nil)).Elem()
}

func (o PipelineSpecRuntimeEnvironmentOutput) ToPipelineSpecRuntimeEnvironmentOutput() PipelineSpecRuntimeEnvironmentOutput {
	return o
}

func (o PipelineSpecRuntimeEnvironmentOutput) ToPipelineSpecRuntimeEnvironmentOutputWithContext(ctx context.Context) PipelineSpecRuntimeEnvironmentOutput {
	return o
}

// A required amount of CPU.
func (o PipelineSpecRuntimeEnvironmentOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecRuntimeEnvironment) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// A pipeline shared storage.
func (o PipelineSpecRuntimeEnvironmentOutput) DindStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecRuntimeEnvironment) *string { return v.DindStorage }).(pulumi.StringPtrOutput)
}

// A required amount of memory.
func (o PipelineSpecRuntimeEnvironmentOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecRuntimeEnvironment) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// A name of runtime.
func (o PipelineSpecRuntimeEnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecRuntimeEnvironment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineSpecRuntimeEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (PipelineSpecRuntimeEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecRuntimeEnvironment)(nil)).Elem()
}

func (o PipelineSpecRuntimeEnvironmentArrayOutput) ToPipelineSpecRuntimeEnvironmentArrayOutput() PipelineSpecRuntimeEnvironmentArrayOutput {
	return o
}

func (o PipelineSpecRuntimeEnvironmentArrayOutput) ToPipelineSpecRuntimeEnvironmentArrayOutputWithContext(ctx context.Context) PipelineSpecRuntimeEnvironmentArrayOutput {
	return o
}

func (o PipelineSpecRuntimeEnvironmentArrayOutput) Index(i pulumi.IntInput) PipelineSpecRuntimeEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineSpecRuntimeEnvironment {
		return vs[0].([]PipelineSpecRuntimeEnvironment)[vs[1].(int)]
	}).(PipelineSpecRuntimeEnvironmentOutput)
}

type PipelineSpecSpecTemplate struct {
	// The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
	Context *string `pulumi:"context"`
	// Default value - **git**.
	Location *string `pulumi:"location"`
	// The relative path to the Codefresh pipeline file.
	Path string `pulumi:"path"`
	// The GitHub `account/repo_name`.
	Repo string `pulumi:"repo"`
	// The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
	Revision string `pulumi:"revision"`
}

// PipelineSpecSpecTemplateInput is an input type that accepts PipelineSpecSpecTemplateArgs and PipelineSpecSpecTemplateOutput values.
// You can construct a concrete instance of `PipelineSpecSpecTemplateInput` via:
//
//	PipelineSpecSpecTemplateArgs{...}
type PipelineSpecSpecTemplateInput interface {
	pulumi.Input

	ToPipelineSpecSpecTemplateOutput() PipelineSpecSpecTemplateOutput
	ToPipelineSpecSpecTemplateOutputWithContext(context.Context) PipelineSpecSpecTemplateOutput
}

type PipelineSpecSpecTemplateArgs struct {
	// The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
	Context pulumi.StringPtrInput `pulumi:"context"`
	// Default value - **git**.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The relative path to the Codefresh pipeline file.
	Path pulumi.StringInput `pulumi:"path"`
	// The GitHub `account/repo_name`.
	Repo pulumi.StringInput `pulumi:"repo"`
	// The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
	Revision pulumi.StringInput `pulumi:"revision"`
}

func (PipelineSpecSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecSpecTemplate)(nil)).Elem()
}

func (i PipelineSpecSpecTemplateArgs) ToPipelineSpecSpecTemplateOutput() PipelineSpecSpecTemplateOutput {
	return i.ToPipelineSpecSpecTemplateOutputWithContext(context.Background())
}

func (i PipelineSpecSpecTemplateArgs) ToPipelineSpecSpecTemplateOutputWithContext(ctx context.Context) PipelineSpecSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecSpecTemplateOutput)
}

// PipelineSpecSpecTemplateArrayInput is an input type that accepts PipelineSpecSpecTemplateArray and PipelineSpecSpecTemplateArrayOutput values.
// You can construct a concrete instance of `PipelineSpecSpecTemplateArrayInput` via:
//
//	PipelineSpecSpecTemplateArray{ PipelineSpecSpecTemplateArgs{...} }
type PipelineSpecSpecTemplateArrayInput interface {
	pulumi.Input

	ToPipelineSpecSpecTemplateArrayOutput() PipelineSpecSpecTemplateArrayOutput
	ToPipelineSpecSpecTemplateArrayOutputWithContext(context.Context) PipelineSpecSpecTemplateArrayOutput
}

type PipelineSpecSpecTemplateArray []PipelineSpecSpecTemplateInput

func (PipelineSpecSpecTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecSpecTemplate)(nil)).Elem()
}

func (i PipelineSpecSpecTemplateArray) ToPipelineSpecSpecTemplateArrayOutput() PipelineSpecSpecTemplateArrayOutput {
	return i.ToPipelineSpecSpecTemplateArrayOutputWithContext(context.Background())
}

func (i PipelineSpecSpecTemplateArray) ToPipelineSpecSpecTemplateArrayOutputWithContext(ctx context.Context) PipelineSpecSpecTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecSpecTemplateArrayOutput)
}

type PipelineSpecSpecTemplateOutput struct{ *pulumi.OutputState }

func (PipelineSpecSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecSpecTemplate)(nil)).Elem()
}

func (o PipelineSpecSpecTemplateOutput) ToPipelineSpecSpecTemplateOutput() PipelineSpecSpecTemplateOutput {
	return o
}

func (o PipelineSpecSpecTemplateOutput) ToPipelineSpecSpecTemplateOutputWithContext(ctx context.Context) PipelineSpecSpecTemplateOutput {
	return o
}

// The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
func (o PipelineSpecSpecTemplateOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecSpecTemplate) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// Default value - **git**.
func (o PipelineSpecSpecTemplateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecSpecTemplate) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The relative path to the Codefresh pipeline file.
func (o PipelineSpecSpecTemplateOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSpecSpecTemplate) string { return v.Path }).(pulumi.StringOutput)
}

// The GitHub `account/repo_name`.
func (o PipelineSpecSpecTemplateOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSpecSpecTemplate) string { return v.Repo }).(pulumi.StringOutput)
}

// The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
func (o PipelineSpecSpecTemplateOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSpecSpecTemplate) string { return v.Revision }).(pulumi.StringOutput)
}

type PipelineSpecSpecTemplateArrayOutput struct{ *pulumi.OutputState }

func (PipelineSpecSpecTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecSpecTemplate)(nil)).Elem()
}

func (o PipelineSpecSpecTemplateArrayOutput) ToPipelineSpecSpecTemplateArrayOutput() PipelineSpecSpecTemplateArrayOutput {
	return o
}

func (o PipelineSpecSpecTemplateArrayOutput) ToPipelineSpecSpecTemplateArrayOutputWithContext(ctx context.Context) PipelineSpecSpecTemplateArrayOutput {
	return o
}

func (o PipelineSpecSpecTemplateArrayOutput) Index(i pulumi.IntInput) PipelineSpecSpecTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineSpecSpecTemplate {
		return vs[0].([]PipelineSpecSpecTemplate)[vs[1].(int)]
	}).(PipelineSpecSpecTemplateOutput)
}

type PipelineSpecTerminationPolicy struct {
	// A `onCreateBranch` block as documented below.
	OnCreateBranch *PipelineSpecTerminationPolicyOnCreateBranch `pulumi:"onCreateBranch"`
	// Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
	OnTerminateAnnotation *bool `pulumi:"onTerminateAnnotation"`
}

// PipelineSpecTerminationPolicyInput is an input type that accepts PipelineSpecTerminationPolicyArgs and PipelineSpecTerminationPolicyOutput values.
// You can construct a concrete instance of `PipelineSpecTerminationPolicyInput` via:
//
//	PipelineSpecTerminationPolicyArgs{...}
type PipelineSpecTerminationPolicyInput interface {
	pulumi.Input

	ToPipelineSpecTerminationPolicyOutput() PipelineSpecTerminationPolicyOutput
	ToPipelineSpecTerminationPolicyOutputWithContext(context.Context) PipelineSpecTerminationPolicyOutput
}

type PipelineSpecTerminationPolicyArgs struct {
	// A `onCreateBranch` block as documented below.
	OnCreateBranch PipelineSpecTerminationPolicyOnCreateBranchPtrInput `pulumi:"onCreateBranch"`
	// Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
	OnTerminateAnnotation pulumi.BoolPtrInput `pulumi:"onTerminateAnnotation"`
}

func (PipelineSpecTerminationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTerminationPolicy)(nil)).Elem()
}

func (i PipelineSpecTerminationPolicyArgs) ToPipelineSpecTerminationPolicyOutput() PipelineSpecTerminationPolicyOutput {
	return i.ToPipelineSpecTerminationPolicyOutputWithContext(context.Background())
}

func (i PipelineSpecTerminationPolicyArgs) ToPipelineSpecTerminationPolicyOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyOutput)
}

func (i PipelineSpecTerminationPolicyArgs) ToPipelineSpecTerminationPolicyPtrOutput() PipelineSpecTerminationPolicyPtrOutput {
	return i.ToPipelineSpecTerminationPolicyPtrOutputWithContext(context.Background())
}

func (i PipelineSpecTerminationPolicyArgs) ToPipelineSpecTerminationPolicyPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyOutput).ToPipelineSpecTerminationPolicyPtrOutputWithContext(ctx)
}

// PipelineSpecTerminationPolicyPtrInput is an input type that accepts PipelineSpecTerminationPolicyArgs, PipelineSpecTerminationPolicyPtr and PipelineSpecTerminationPolicyPtrOutput values.
// You can construct a concrete instance of `PipelineSpecTerminationPolicyPtrInput` via:
//
//	        PipelineSpecTerminationPolicyArgs{...}
//
//	or:
//
//	        nil
type PipelineSpecTerminationPolicyPtrInput interface {
	pulumi.Input

	ToPipelineSpecTerminationPolicyPtrOutput() PipelineSpecTerminationPolicyPtrOutput
	ToPipelineSpecTerminationPolicyPtrOutputWithContext(context.Context) PipelineSpecTerminationPolicyPtrOutput
}

type pipelineSpecTerminationPolicyPtrType PipelineSpecTerminationPolicyArgs

func PipelineSpecTerminationPolicyPtr(v *PipelineSpecTerminationPolicyArgs) PipelineSpecTerminationPolicyPtrInput {
	return (*pipelineSpecTerminationPolicyPtrType)(v)
}

func (*pipelineSpecTerminationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecTerminationPolicy)(nil)).Elem()
}

func (i *pipelineSpecTerminationPolicyPtrType) ToPipelineSpecTerminationPolicyPtrOutput() PipelineSpecTerminationPolicyPtrOutput {
	return i.ToPipelineSpecTerminationPolicyPtrOutputWithContext(context.Background())
}

func (i *pipelineSpecTerminationPolicyPtrType) ToPipelineSpecTerminationPolicyPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyPtrOutput)
}

type PipelineSpecTerminationPolicyOutput struct{ *pulumi.OutputState }

func (PipelineSpecTerminationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTerminationPolicy)(nil)).Elem()
}

func (o PipelineSpecTerminationPolicyOutput) ToPipelineSpecTerminationPolicyOutput() PipelineSpecTerminationPolicyOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOutput) ToPipelineSpecTerminationPolicyOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOutput) ToPipelineSpecTerminationPolicyPtrOutput() PipelineSpecTerminationPolicyPtrOutput {
	return o.ToPipelineSpecTerminationPolicyPtrOutputWithContext(context.Background())
}

func (o PipelineSpecTerminationPolicyOutput) ToPipelineSpecTerminationPolicyPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSpecTerminationPolicy) *PipelineSpecTerminationPolicy {
		return &v
	}).(PipelineSpecTerminationPolicyPtrOutput)
}

// A `onCreateBranch` block as documented below.
func (o PipelineSpecTerminationPolicyOutput) OnCreateBranch() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o.ApplyT(func(v PipelineSpecTerminationPolicy) *PipelineSpecTerminationPolicyOnCreateBranch {
		return v.OnCreateBranch
	}).(PipelineSpecTerminationPolicyOnCreateBranchPtrOutput)
}

// Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
func (o PipelineSpecTerminationPolicyOutput) OnTerminateAnnotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTerminationPolicy) *bool { return v.OnTerminateAnnotation }).(pulumi.BoolPtrOutput)
}

type PipelineSpecTerminationPolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelineSpecTerminationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecTerminationPolicy)(nil)).Elem()
}

func (o PipelineSpecTerminationPolicyPtrOutput) ToPipelineSpecTerminationPolicyPtrOutput() PipelineSpecTerminationPolicyPtrOutput {
	return o
}

func (o PipelineSpecTerminationPolicyPtrOutput) ToPipelineSpecTerminationPolicyPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyPtrOutput {
	return o
}

func (o PipelineSpecTerminationPolicyPtrOutput) Elem() PipelineSpecTerminationPolicyOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicy) PipelineSpecTerminationPolicy {
		if v != nil {
			return *v
		}
		var ret PipelineSpecTerminationPolicy
		return ret
	}).(PipelineSpecTerminationPolicyOutput)
}

// A `onCreateBranch` block as documented below.
func (o PipelineSpecTerminationPolicyPtrOutput) OnCreateBranch() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicy) *PipelineSpecTerminationPolicyOnCreateBranch {
		if v == nil {
			return nil
		}
		return v.OnCreateBranch
	}).(PipelineSpecTerminationPolicyOnCreateBranchPtrOutput)
}

// Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
func (o PipelineSpecTerminationPolicyPtrOutput) OnTerminateAnnotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.OnTerminateAnnotation
	}).(pulumi.BoolPtrOutput)
}

type PipelineSpecTerminationPolicyOnCreateBranch struct {
	// A regular expression to filter the branches on with the termination policy applies.
	BranchName *string `pulumi:"branchName"`
	// Boolean. See table below for usage.
	IgnoreBranch *bool `pulumi:"ignoreBranch"`
	// Boolean. See table below for usage.
	IgnoreTrigger *bool `pulumi:"ignoreTrigger"`
}

// PipelineSpecTerminationPolicyOnCreateBranchInput is an input type that accepts PipelineSpecTerminationPolicyOnCreateBranchArgs and PipelineSpecTerminationPolicyOnCreateBranchOutput values.
// You can construct a concrete instance of `PipelineSpecTerminationPolicyOnCreateBranchInput` via:
//
//	PipelineSpecTerminationPolicyOnCreateBranchArgs{...}
type PipelineSpecTerminationPolicyOnCreateBranchInput interface {
	pulumi.Input

	ToPipelineSpecTerminationPolicyOnCreateBranchOutput() PipelineSpecTerminationPolicyOnCreateBranchOutput
	ToPipelineSpecTerminationPolicyOnCreateBranchOutputWithContext(context.Context) PipelineSpecTerminationPolicyOnCreateBranchOutput
}

type PipelineSpecTerminationPolicyOnCreateBranchArgs struct {
	// A regular expression to filter the branches on with the termination policy applies.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Boolean. See table below for usage.
	IgnoreBranch pulumi.BoolPtrInput `pulumi:"ignoreBranch"`
	// Boolean. See table below for usage.
	IgnoreTrigger pulumi.BoolPtrInput `pulumi:"ignoreTrigger"`
}

func (PipelineSpecTerminationPolicyOnCreateBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTerminationPolicyOnCreateBranch)(nil)).Elem()
}

func (i PipelineSpecTerminationPolicyOnCreateBranchArgs) ToPipelineSpecTerminationPolicyOnCreateBranchOutput() PipelineSpecTerminationPolicyOnCreateBranchOutput {
	return i.ToPipelineSpecTerminationPolicyOnCreateBranchOutputWithContext(context.Background())
}

func (i PipelineSpecTerminationPolicyOnCreateBranchArgs) ToPipelineSpecTerminationPolicyOnCreateBranchOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyOnCreateBranchOutput)
}

func (i PipelineSpecTerminationPolicyOnCreateBranchArgs) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutput() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return i.ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(context.Background())
}

func (i PipelineSpecTerminationPolicyOnCreateBranchArgs) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyOnCreateBranchOutput).ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(ctx)
}

// PipelineSpecTerminationPolicyOnCreateBranchPtrInput is an input type that accepts PipelineSpecTerminationPolicyOnCreateBranchArgs, PipelineSpecTerminationPolicyOnCreateBranchPtr and PipelineSpecTerminationPolicyOnCreateBranchPtrOutput values.
// You can construct a concrete instance of `PipelineSpecTerminationPolicyOnCreateBranchPtrInput` via:
//
//	        PipelineSpecTerminationPolicyOnCreateBranchArgs{...}
//
//	or:
//
//	        nil
type PipelineSpecTerminationPolicyOnCreateBranchPtrInput interface {
	pulumi.Input

	ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutput() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput
	ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(context.Context) PipelineSpecTerminationPolicyOnCreateBranchPtrOutput
}

type pipelineSpecTerminationPolicyOnCreateBranchPtrType PipelineSpecTerminationPolicyOnCreateBranchArgs

func PipelineSpecTerminationPolicyOnCreateBranchPtr(v *PipelineSpecTerminationPolicyOnCreateBranchArgs) PipelineSpecTerminationPolicyOnCreateBranchPtrInput {
	return (*pipelineSpecTerminationPolicyOnCreateBranchPtrType)(v)
}

func (*pipelineSpecTerminationPolicyOnCreateBranchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecTerminationPolicyOnCreateBranch)(nil)).Elem()
}

func (i *pipelineSpecTerminationPolicyOnCreateBranchPtrType) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutput() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return i.ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(context.Background())
}

func (i *pipelineSpecTerminationPolicyOnCreateBranchPtrType) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTerminationPolicyOnCreateBranchPtrOutput)
}

type PipelineSpecTerminationPolicyOnCreateBranchOutput struct{ *pulumi.OutputState }

func (PipelineSpecTerminationPolicyOnCreateBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTerminationPolicyOnCreateBranch)(nil)).Elem()
}

func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) ToPipelineSpecTerminationPolicyOnCreateBranchOutput() PipelineSpecTerminationPolicyOnCreateBranchOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) ToPipelineSpecTerminationPolicyOnCreateBranchOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutput() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o.ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(context.Background())
}

func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSpecTerminationPolicyOnCreateBranch) *PipelineSpecTerminationPolicyOnCreateBranch {
		return &v
	}).(PipelineSpecTerminationPolicyOnCreateBranchPtrOutput)
}

// A regular expression to filter the branches on with the termination policy applies.
func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTerminationPolicyOnCreateBranch) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Boolean. See table below for usage.
func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) IgnoreBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTerminationPolicyOnCreateBranch) *bool { return v.IgnoreBranch }).(pulumi.BoolPtrOutput)
}

// Boolean. See table below for usage.
func (o PipelineSpecTerminationPolicyOnCreateBranchOutput) IgnoreTrigger() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTerminationPolicyOnCreateBranch) *bool { return v.IgnoreTrigger }).(pulumi.BoolPtrOutput)
}

type PipelineSpecTerminationPolicyOnCreateBranchPtrOutput struct{ *pulumi.OutputState }

func (PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSpecTerminationPolicyOnCreateBranch)(nil)).Elem()
}

func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutput() PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) ToPipelineSpecTerminationPolicyOnCreateBranchPtrOutputWithContext(ctx context.Context) PipelineSpecTerminationPolicyOnCreateBranchPtrOutput {
	return o
}

func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) Elem() PipelineSpecTerminationPolicyOnCreateBranchOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicyOnCreateBranch) PipelineSpecTerminationPolicyOnCreateBranch {
		if v != nil {
			return *v
		}
		var ret PipelineSpecTerminationPolicyOnCreateBranch
		return ret
	}).(PipelineSpecTerminationPolicyOnCreateBranchOutput)
}

// A regular expression to filter the branches on with the termination policy applies.
func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicyOnCreateBranch) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Boolean. See table below for usage.
func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) IgnoreBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicyOnCreateBranch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreBranch
	}).(pulumi.BoolPtrOutput)
}

// Boolean. See table below for usage.
func (o PipelineSpecTerminationPolicyOnCreateBranchPtrOutput) IgnoreTrigger() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineSpecTerminationPolicyOnCreateBranch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTrigger
	}).(pulumi.BoolPtrOutput)
}

type PipelineSpecTrigger struct {
	// A regular expression and will only trigger for branches that match this naming pattern.
	BranchRegex *string `pulumi:"branchRegex"`
	// Flag to manage how the `branchRegex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
	BranchRegexInput *string `pulumi:"branchRegexInput"`
	// A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
	CommentRegex *string `pulumi:"commentRegex"`
	// The commit status title pushed to the GIT version control system.
	CommitStatusTitle *string `pulumi:"commitStatusTitle"`
	// Codefresh Git context.
	Context *string `pulumi:"context"`
	// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
	Contexts []string `pulumi:"contexts"`
	// The trigger description.
	Description *string `pulumi:"description"`
	// Boolean. If true, trigger will never be activated.
	Disabled *bool `pulumi:"disabled"`
	// A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
	Events []string `pulumi:"events"`
	// Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
	ModifiedFilesGlob *string `pulumi:"modifiedFilesGlob"`
	// The display name for the pipeline.
	Name *string `pulumi:"name"`
	// A `options` block as documented below.
	Options []PipelineSpecTriggerOption `pulumi:"options"`
	// Default value - **github**.
	Provider *string `pulumi:"provider"`
	// Boolean. If this trigger is also applicable to Git forks.
	PullRequestAllowForkEvents *bool `pulumi:"pullRequestAllowForkEvents"`
	// A regular expression and will only trigger for pull requests to branches that match this naming pattern.
	PullRequestTargetBranchRegex *string `pulumi:"pullRequestTargetBranchRegex"`
	// The GitHub `account/repo_name`.
	Repo *string `pulumi:"repo"`
	// A collection of `runtimeEnvironment` blocks as documented below.
	// - `options`: (Optional) A collection `option` blocks as documented below.
	// ***
	RuntimeEnvironments []PipelineSpecTriggerRuntimeEnvironment `pulumi:"runtimeEnvironments"`
	// The trigger type. Default value - **git**.
	Type *string `pulumi:"type"`
	// Trigger variables.
	Variables map[string]string `pulumi:"variables"`
}

// PipelineSpecTriggerInput is an input type that accepts PipelineSpecTriggerArgs and PipelineSpecTriggerOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerInput` via:
//
//	PipelineSpecTriggerArgs{...}
type PipelineSpecTriggerInput interface {
	pulumi.Input

	ToPipelineSpecTriggerOutput() PipelineSpecTriggerOutput
	ToPipelineSpecTriggerOutputWithContext(context.Context) PipelineSpecTriggerOutput
}

type PipelineSpecTriggerArgs struct {
	// A regular expression and will only trigger for branches that match this naming pattern.
	BranchRegex pulumi.StringPtrInput `pulumi:"branchRegex"`
	// Flag to manage how the `branchRegex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
	BranchRegexInput pulumi.StringPtrInput `pulumi:"branchRegexInput"`
	// A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
	CommentRegex pulumi.StringPtrInput `pulumi:"commentRegex"`
	// The commit status title pushed to the GIT version control system.
	CommitStatusTitle pulumi.StringPtrInput `pulumi:"commitStatusTitle"`
	// Codefresh Git context.
	Context pulumi.StringPtrInput `pulumi:"context"`
	// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
	Contexts pulumi.StringArrayInput `pulumi:"contexts"`
	// The trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Boolean. If true, trigger will never be activated.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
	ModifiedFilesGlob pulumi.StringPtrInput `pulumi:"modifiedFilesGlob"`
	// The display name for the pipeline.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A `options` block as documented below.
	Options PipelineSpecTriggerOptionArrayInput `pulumi:"options"`
	// Default value - **github**.
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Boolean. If this trigger is also applicable to Git forks.
	PullRequestAllowForkEvents pulumi.BoolPtrInput `pulumi:"pullRequestAllowForkEvents"`
	// A regular expression and will only trigger for pull requests to branches that match this naming pattern.
	PullRequestTargetBranchRegex pulumi.StringPtrInput `pulumi:"pullRequestTargetBranchRegex"`
	// The GitHub `account/repo_name`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// A collection of `runtimeEnvironment` blocks as documented below.
	// - `options`: (Optional) A collection `option` blocks as documented below.
	// ***
	RuntimeEnvironments PipelineSpecTriggerRuntimeEnvironmentArrayInput `pulumi:"runtimeEnvironments"`
	// The trigger type. Default value - **git**.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Trigger variables.
	Variables pulumi.StringMapInput `pulumi:"variables"`
}

func (PipelineSpecTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTrigger)(nil)).Elem()
}

func (i PipelineSpecTriggerArgs) ToPipelineSpecTriggerOutput() PipelineSpecTriggerOutput {
	return i.ToPipelineSpecTriggerOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerArgs) ToPipelineSpecTriggerOutputWithContext(ctx context.Context) PipelineSpecTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerOutput)
}

// PipelineSpecTriggerArrayInput is an input type that accepts PipelineSpecTriggerArray and PipelineSpecTriggerArrayOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerArrayInput` via:
//
//	PipelineSpecTriggerArray{ PipelineSpecTriggerArgs{...} }
type PipelineSpecTriggerArrayInput interface {
	pulumi.Input

	ToPipelineSpecTriggerArrayOutput() PipelineSpecTriggerArrayOutput
	ToPipelineSpecTriggerArrayOutputWithContext(context.Context) PipelineSpecTriggerArrayOutput
}

type PipelineSpecTriggerArray []PipelineSpecTriggerInput

func (PipelineSpecTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTrigger)(nil)).Elem()
}

func (i PipelineSpecTriggerArray) ToPipelineSpecTriggerArrayOutput() PipelineSpecTriggerArrayOutput {
	return i.ToPipelineSpecTriggerArrayOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerArray) ToPipelineSpecTriggerArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerArrayOutput)
}

type PipelineSpecTriggerOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTrigger)(nil)).Elem()
}

func (o PipelineSpecTriggerOutput) ToPipelineSpecTriggerOutput() PipelineSpecTriggerOutput {
	return o
}

func (o PipelineSpecTriggerOutput) ToPipelineSpecTriggerOutputWithContext(ctx context.Context) PipelineSpecTriggerOutput {
	return o
}

// A regular expression and will only trigger for branches that match this naming pattern.
func (o PipelineSpecTriggerOutput) BranchRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.BranchRegex }).(pulumi.StringPtrOutput)
}

// Flag to manage how the `branchRegex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
func (o PipelineSpecTriggerOutput) BranchRegexInput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.BranchRegexInput }).(pulumi.StringPtrOutput)
}

// A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
func (o PipelineSpecTriggerOutput) CommentRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.CommentRegex }).(pulumi.StringPtrOutput)
}

// The commit status title pushed to the GIT version control system.
func (o PipelineSpecTriggerOutput) CommitStatusTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.CommitStatusTitle }).(pulumi.StringPtrOutput)
}

// Codefresh Git context.
func (o PipelineSpecTriggerOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// A list of strings representing the contexts ([sharedConfiguration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
func (o PipelineSpecTriggerOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) []string { return v.Contexts }).(pulumi.StringArrayOutput)
}

// The trigger description.
func (o PipelineSpecTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Boolean. If true, trigger will never be activated.
func (o PipelineSpecTriggerOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
func (o PipelineSpecTriggerOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
func (o PipelineSpecTriggerOutput) ModifiedFilesGlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.ModifiedFilesGlob }).(pulumi.StringPtrOutput)
}

// The display name for the pipeline.
func (o PipelineSpecTriggerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A `options` block as documented below.
func (o PipelineSpecTriggerOutput) Options() PipelineSpecTriggerOptionArrayOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) []PipelineSpecTriggerOption { return v.Options }).(PipelineSpecTriggerOptionArrayOutput)
}

// Default value - **github**.
func (o PipelineSpecTriggerOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Boolean. If this trigger is also applicable to Git forks.
func (o PipelineSpecTriggerOutput) PullRequestAllowForkEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *bool { return v.PullRequestAllowForkEvents }).(pulumi.BoolPtrOutput)
}

// A regular expression and will only trigger for pull requests to branches that match this naming pattern.
func (o PipelineSpecTriggerOutput) PullRequestTargetBranchRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.PullRequestTargetBranchRegex }).(pulumi.StringPtrOutput)
}

// The GitHub `account/repo_name`.
func (o PipelineSpecTriggerOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// A collection of `runtimeEnvironment` blocks as documented below.
// - `options`: (Optional) A collection `option` blocks as documented below.
// ***
func (o PipelineSpecTriggerOutput) RuntimeEnvironments() PipelineSpecTriggerRuntimeEnvironmentArrayOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) []PipelineSpecTriggerRuntimeEnvironment { return v.RuntimeEnvironments }).(PipelineSpecTriggerRuntimeEnvironmentArrayOutput)
}

// The trigger type. Default value - **git**.
func (o PipelineSpecTriggerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Trigger variables.
func (o PipelineSpecTriggerOutput) Variables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineSpecTrigger) map[string]string { return v.Variables }).(pulumi.StringMapOutput)
}

type PipelineSpecTriggerArrayOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTrigger)(nil)).Elem()
}

func (o PipelineSpecTriggerArrayOutput) ToPipelineSpecTriggerArrayOutput() PipelineSpecTriggerArrayOutput {
	return o
}

func (o PipelineSpecTriggerArrayOutput) ToPipelineSpecTriggerArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerArrayOutput {
	return o
}

func (o PipelineSpecTriggerArrayOutput) Index(i pulumi.IntInput) PipelineSpecTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineSpecTrigger {
		return vs[0].([]PipelineSpecTrigger)[vs[1].(int)]
	}).(PipelineSpecTriggerOutput)
}

type PipelineSpecTriggerOption struct {
	// Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
	EnableNotifications *bool `pulumi:"enableNotifications"`
	// Boolean. If true, docker layer cache is disabled. Default false
	NoCache *bool `pulumi:"noCache"`
	// Boolean. If true, extra Codefresh caching is disabled. Default false
	NoCfCache *bool `pulumi:"noCfCache"`
	// Boolean. If true, all files on volume will be deleted before each execution. Default false
	ResetVolume *bool `pulumi:"resetVolume"`
}

// PipelineSpecTriggerOptionInput is an input type that accepts PipelineSpecTriggerOptionArgs and PipelineSpecTriggerOptionOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerOptionInput` via:
//
//	PipelineSpecTriggerOptionArgs{...}
type PipelineSpecTriggerOptionInput interface {
	pulumi.Input

	ToPipelineSpecTriggerOptionOutput() PipelineSpecTriggerOptionOutput
	ToPipelineSpecTriggerOptionOutputWithContext(context.Context) PipelineSpecTriggerOptionOutput
}

type PipelineSpecTriggerOptionArgs struct {
	// Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
	EnableNotifications pulumi.BoolPtrInput `pulumi:"enableNotifications"`
	// Boolean. If true, docker layer cache is disabled. Default false
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// Boolean. If true, extra Codefresh caching is disabled. Default false
	NoCfCache pulumi.BoolPtrInput `pulumi:"noCfCache"`
	// Boolean. If true, all files on volume will be deleted before each execution. Default false
	ResetVolume pulumi.BoolPtrInput `pulumi:"resetVolume"`
}

func (PipelineSpecTriggerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTriggerOption)(nil)).Elem()
}

func (i PipelineSpecTriggerOptionArgs) ToPipelineSpecTriggerOptionOutput() PipelineSpecTriggerOptionOutput {
	return i.ToPipelineSpecTriggerOptionOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerOptionArgs) ToPipelineSpecTriggerOptionOutputWithContext(ctx context.Context) PipelineSpecTriggerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerOptionOutput)
}

// PipelineSpecTriggerOptionArrayInput is an input type that accepts PipelineSpecTriggerOptionArray and PipelineSpecTriggerOptionArrayOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerOptionArrayInput` via:
//
//	PipelineSpecTriggerOptionArray{ PipelineSpecTriggerOptionArgs{...} }
type PipelineSpecTriggerOptionArrayInput interface {
	pulumi.Input

	ToPipelineSpecTriggerOptionArrayOutput() PipelineSpecTriggerOptionArrayOutput
	ToPipelineSpecTriggerOptionArrayOutputWithContext(context.Context) PipelineSpecTriggerOptionArrayOutput
}

type PipelineSpecTriggerOptionArray []PipelineSpecTriggerOptionInput

func (PipelineSpecTriggerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTriggerOption)(nil)).Elem()
}

func (i PipelineSpecTriggerOptionArray) ToPipelineSpecTriggerOptionArrayOutput() PipelineSpecTriggerOptionArrayOutput {
	return i.ToPipelineSpecTriggerOptionArrayOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerOptionArray) ToPipelineSpecTriggerOptionArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerOptionArrayOutput)
}

type PipelineSpecTriggerOptionOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTriggerOption)(nil)).Elem()
}

func (o PipelineSpecTriggerOptionOutput) ToPipelineSpecTriggerOptionOutput() PipelineSpecTriggerOptionOutput {
	return o
}

func (o PipelineSpecTriggerOptionOutput) ToPipelineSpecTriggerOptionOutputWithContext(ctx context.Context) PipelineSpecTriggerOptionOutput {
	return o
}

// Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
func (o PipelineSpecTriggerOptionOutput) EnableNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerOption) *bool { return v.EnableNotifications }).(pulumi.BoolPtrOutput)
}

// Boolean. If true, docker layer cache is disabled. Default false
func (o PipelineSpecTriggerOptionOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerOption) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// Boolean. If true, extra Codefresh caching is disabled. Default false
func (o PipelineSpecTriggerOptionOutput) NoCfCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerOption) *bool { return v.NoCfCache }).(pulumi.BoolPtrOutput)
}

// Boolean. If true, all files on volume will be deleted before each execution. Default false
func (o PipelineSpecTriggerOptionOutput) ResetVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerOption) *bool { return v.ResetVolume }).(pulumi.BoolPtrOutput)
}

type PipelineSpecTriggerOptionArrayOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTriggerOption)(nil)).Elem()
}

func (o PipelineSpecTriggerOptionArrayOutput) ToPipelineSpecTriggerOptionArrayOutput() PipelineSpecTriggerOptionArrayOutput {
	return o
}

func (o PipelineSpecTriggerOptionArrayOutput) ToPipelineSpecTriggerOptionArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerOptionArrayOutput {
	return o
}

func (o PipelineSpecTriggerOptionArrayOutput) Index(i pulumi.IntInput) PipelineSpecTriggerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineSpecTriggerOption {
		return vs[0].([]PipelineSpecTriggerOption)[vs[1].(int)]
	}).(PipelineSpecTriggerOptionOutput)
}

type PipelineSpecTriggerRuntimeEnvironment struct {
	// A required amount of CPU.
	Cpu *string `pulumi:"cpu"`
	// A pipeline shared storage.
	DindStorage *string `pulumi:"dindStorage"`
	// A required amount of memory.
	Memory *string `pulumi:"memory"`
	// A name of runtime.
	Name *string `pulumi:"name"`
}

// PipelineSpecTriggerRuntimeEnvironmentInput is an input type that accepts PipelineSpecTriggerRuntimeEnvironmentArgs and PipelineSpecTriggerRuntimeEnvironmentOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerRuntimeEnvironmentInput` via:
//
//	PipelineSpecTriggerRuntimeEnvironmentArgs{...}
type PipelineSpecTriggerRuntimeEnvironmentInput interface {
	pulumi.Input

	ToPipelineSpecTriggerRuntimeEnvironmentOutput() PipelineSpecTriggerRuntimeEnvironmentOutput
	ToPipelineSpecTriggerRuntimeEnvironmentOutputWithContext(context.Context) PipelineSpecTriggerRuntimeEnvironmentOutput
}

type PipelineSpecTriggerRuntimeEnvironmentArgs struct {
	// A required amount of CPU.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// A pipeline shared storage.
	DindStorage pulumi.StringPtrInput `pulumi:"dindStorage"`
	// A required amount of memory.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// A name of runtime.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineSpecTriggerRuntimeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTriggerRuntimeEnvironment)(nil)).Elem()
}

func (i PipelineSpecTriggerRuntimeEnvironmentArgs) ToPipelineSpecTriggerRuntimeEnvironmentOutput() PipelineSpecTriggerRuntimeEnvironmentOutput {
	return i.ToPipelineSpecTriggerRuntimeEnvironmentOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerRuntimeEnvironmentArgs) ToPipelineSpecTriggerRuntimeEnvironmentOutputWithContext(ctx context.Context) PipelineSpecTriggerRuntimeEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerRuntimeEnvironmentOutput)
}

// PipelineSpecTriggerRuntimeEnvironmentArrayInput is an input type that accepts PipelineSpecTriggerRuntimeEnvironmentArray and PipelineSpecTriggerRuntimeEnvironmentArrayOutput values.
// You can construct a concrete instance of `PipelineSpecTriggerRuntimeEnvironmentArrayInput` via:
//
//	PipelineSpecTriggerRuntimeEnvironmentArray{ PipelineSpecTriggerRuntimeEnvironmentArgs{...} }
type PipelineSpecTriggerRuntimeEnvironmentArrayInput interface {
	pulumi.Input

	ToPipelineSpecTriggerRuntimeEnvironmentArrayOutput() PipelineSpecTriggerRuntimeEnvironmentArrayOutput
	ToPipelineSpecTriggerRuntimeEnvironmentArrayOutputWithContext(context.Context) PipelineSpecTriggerRuntimeEnvironmentArrayOutput
}

type PipelineSpecTriggerRuntimeEnvironmentArray []PipelineSpecTriggerRuntimeEnvironmentInput

func (PipelineSpecTriggerRuntimeEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTriggerRuntimeEnvironment)(nil)).Elem()
}

func (i PipelineSpecTriggerRuntimeEnvironmentArray) ToPipelineSpecTriggerRuntimeEnvironmentArrayOutput() PipelineSpecTriggerRuntimeEnvironmentArrayOutput {
	return i.ToPipelineSpecTriggerRuntimeEnvironmentArrayOutputWithContext(context.Background())
}

func (i PipelineSpecTriggerRuntimeEnvironmentArray) ToPipelineSpecTriggerRuntimeEnvironmentArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerRuntimeEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSpecTriggerRuntimeEnvironmentArrayOutput)
}

type PipelineSpecTriggerRuntimeEnvironmentOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerRuntimeEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSpecTriggerRuntimeEnvironment)(nil)).Elem()
}

func (o PipelineSpecTriggerRuntimeEnvironmentOutput) ToPipelineSpecTriggerRuntimeEnvironmentOutput() PipelineSpecTriggerRuntimeEnvironmentOutput {
	return o
}

func (o PipelineSpecTriggerRuntimeEnvironmentOutput) ToPipelineSpecTriggerRuntimeEnvironmentOutputWithContext(ctx context.Context) PipelineSpecTriggerRuntimeEnvironmentOutput {
	return o
}

// A required amount of CPU.
func (o PipelineSpecTriggerRuntimeEnvironmentOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerRuntimeEnvironment) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// A pipeline shared storage.
func (o PipelineSpecTriggerRuntimeEnvironmentOutput) DindStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerRuntimeEnvironment) *string { return v.DindStorage }).(pulumi.StringPtrOutput)
}

// A required amount of memory.
func (o PipelineSpecTriggerRuntimeEnvironmentOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerRuntimeEnvironment) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// A name of runtime.
func (o PipelineSpecTriggerRuntimeEnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSpecTriggerRuntimeEnvironment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineSpecTriggerRuntimeEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (PipelineSpecTriggerRuntimeEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineSpecTriggerRuntimeEnvironment)(nil)).Elem()
}

func (o PipelineSpecTriggerRuntimeEnvironmentArrayOutput) ToPipelineSpecTriggerRuntimeEnvironmentArrayOutput() PipelineSpecTriggerRuntimeEnvironmentArrayOutput {
	return o
}

func (o PipelineSpecTriggerRuntimeEnvironmentArrayOutput) ToPipelineSpecTriggerRuntimeEnvironmentArrayOutputWithContext(ctx context.Context) PipelineSpecTriggerRuntimeEnvironmentArrayOutput {
	return o
}

func (o PipelineSpecTriggerRuntimeEnvironmentArrayOutput) Index(i pulumi.IntInput) PipelineSpecTriggerRuntimeEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineSpecTriggerRuntimeEnvironment {
		return vs[0].([]PipelineSpecTriggerRuntimeEnvironment)[vs[1].(int)]
	}).(PipelineSpecTriggerRuntimeEnvironmentOutput)
}

type RegistrySpec struct {
	Acr       *RegistrySpecAcr       `pulumi:"acr"`
	Bintray   *RegistrySpecBintray   `pulumi:"bintray"`
	Dockerhub *RegistrySpecDockerhub `pulumi:"dockerhub"`
	Ecr       *RegistrySpecEcr       `pulumi:"ecr"`
	Gar       *RegistrySpecGar       `pulumi:"gar"`
	Gcr       *RegistrySpecGcr       `pulumi:"gcr"`
	Other     *RegistrySpecOther     `pulumi:"other"`
}

// RegistrySpecInput is an input type that accepts RegistrySpecArgs and RegistrySpecOutput values.
// You can construct a concrete instance of `RegistrySpecInput` via:
//
//	RegistrySpecArgs{...}
type RegistrySpecInput interface {
	pulumi.Input

	ToRegistrySpecOutput() RegistrySpecOutput
	ToRegistrySpecOutputWithContext(context.Context) RegistrySpecOutput
}

type RegistrySpecArgs struct {
	Acr       RegistrySpecAcrPtrInput       `pulumi:"acr"`
	Bintray   RegistrySpecBintrayPtrInput   `pulumi:"bintray"`
	Dockerhub RegistrySpecDockerhubPtrInput `pulumi:"dockerhub"`
	Ecr       RegistrySpecEcrPtrInput       `pulumi:"ecr"`
	Gar       RegistrySpecGarPtrInput       `pulumi:"gar"`
	Gcr       RegistrySpecGcrPtrInput       `pulumi:"gcr"`
	Other     RegistrySpecOtherPtrInput     `pulumi:"other"`
}

func (RegistrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpec)(nil)).Elem()
}

func (i RegistrySpecArgs) ToRegistrySpecOutput() RegistrySpecOutput {
	return i.ToRegistrySpecOutputWithContext(context.Background())
}

func (i RegistrySpecArgs) ToRegistrySpecOutputWithContext(ctx context.Context) RegistrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecOutput)
}

func (i RegistrySpecArgs) ToRegistrySpecPtrOutput() RegistrySpecPtrOutput {
	return i.ToRegistrySpecPtrOutputWithContext(context.Background())
}

func (i RegistrySpecArgs) ToRegistrySpecPtrOutputWithContext(ctx context.Context) RegistrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecOutput).ToRegistrySpecPtrOutputWithContext(ctx)
}

// RegistrySpecPtrInput is an input type that accepts RegistrySpecArgs, RegistrySpecPtr and RegistrySpecPtrOutput values.
// You can construct a concrete instance of `RegistrySpecPtrInput` via:
//
//	        RegistrySpecArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecPtrInput interface {
	pulumi.Input

	ToRegistrySpecPtrOutput() RegistrySpecPtrOutput
	ToRegistrySpecPtrOutputWithContext(context.Context) RegistrySpecPtrOutput
}

type registrySpecPtrType RegistrySpecArgs

func RegistrySpecPtr(v *RegistrySpecArgs) RegistrySpecPtrInput {
	return (*registrySpecPtrType)(v)
}

func (*registrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpec)(nil)).Elem()
}

func (i *registrySpecPtrType) ToRegistrySpecPtrOutput() RegistrySpecPtrOutput {
	return i.ToRegistrySpecPtrOutputWithContext(context.Background())
}

func (i *registrySpecPtrType) ToRegistrySpecPtrOutputWithContext(ctx context.Context) RegistrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecPtrOutput)
}

type RegistrySpecOutput struct{ *pulumi.OutputState }

func (RegistrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpec)(nil)).Elem()
}

func (o RegistrySpecOutput) ToRegistrySpecOutput() RegistrySpecOutput {
	return o
}

func (o RegistrySpecOutput) ToRegistrySpecOutputWithContext(ctx context.Context) RegistrySpecOutput {
	return o
}

func (o RegistrySpecOutput) ToRegistrySpecPtrOutput() RegistrySpecPtrOutput {
	return o.ToRegistrySpecPtrOutputWithContext(context.Background())
}

func (o RegistrySpecOutput) ToRegistrySpecPtrOutputWithContext(ctx context.Context) RegistrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpec) *RegistrySpec {
		return &v
	}).(RegistrySpecPtrOutput)
}

func (o RegistrySpecOutput) Acr() RegistrySpecAcrPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecAcr { return v.Acr }).(RegistrySpecAcrPtrOutput)
}

func (o RegistrySpecOutput) Bintray() RegistrySpecBintrayPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecBintray { return v.Bintray }).(RegistrySpecBintrayPtrOutput)
}

func (o RegistrySpecOutput) Dockerhub() RegistrySpecDockerhubPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecDockerhub { return v.Dockerhub }).(RegistrySpecDockerhubPtrOutput)
}

func (o RegistrySpecOutput) Ecr() RegistrySpecEcrPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecEcr { return v.Ecr }).(RegistrySpecEcrPtrOutput)
}

func (o RegistrySpecOutput) Gar() RegistrySpecGarPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecGar { return v.Gar }).(RegistrySpecGarPtrOutput)
}

func (o RegistrySpecOutput) Gcr() RegistrySpecGcrPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecGcr { return v.Gcr }).(RegistrySpecGcrPtrOutput)
}

func (o RegistrySpecOutput) Other() RegistrySpecOtherPtrOutput {
	return o.ApplyT(func(v RegistrySpec) *RegistrySpecOther { return v.Other }).(RegistrySpecOtherPtrOutput)
}

type RegistrySpecPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpec)(nil)).Elem()
}

func (o RegistrySpecPtrOutput) ToRegistrySpecPtrOutput() RegistrySpecPtrOutput {
	return o
}

func (o RegistrySpecPtrOutput) ToRegistrySpecPtrOutputWithContext(ctx context.Context) RegistrySpecPtrOutput {
	return o
}

func (o RegistrySpecPtrOutput) Elem() RegistrySpecOutput {
	return o.ApplyT(func(v *RegistrySpec) RegistrySpec {
		if v != nil {
			return *v
		}
		var ret RegistrySpec
		return ret
	}).(RegistrySpecOutput)
}

func (o RegistrySpecPtrOutput) Acr() RegistrySpecAcrPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecAcr {
		if v == nil {
			return nil
		}
		return v.Acr
	}).(RegistrySpecAcrPtrOutput)
}

func (o RegistrySpecPtrOutput) Bintray() RegistrySpecBintrayPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecBintray {
		if v == nil {
			return nil
		}
		return v.Bintray
	}).(RegistrySpecBintrayPtrOutput)
}

func (o RegistrySpecPtrOutput) Dockerhub() RegistrySpecDockerhubPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecDockerhub {
		if v == nil {
			return nil
		}
		return v.Dockerhub
	}).(RegistrySpecDockerhubPtrOutput)
}

func (o RegistrySpecPtrOutput) Ecr() RegistrySpecEcrPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecEcr {
		if v == nil {
			return nil
		}
		return v.Ecr
	}).(RegistrySpecEcrPtrOutput)
}

func (o RegistrySpecPtrOutput) Gar() RegistrySpecGarPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecGar {
		if v == nil {
			return nil
		}
		return v.Gar
	}).(RegistrySpecGarPtrOutput)
}

func (o RegistrySpecPtrOutput) Gcr() RegistrySpecGcrPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecGcr {
		if v == nil {
			return nil
		}
		return v.Gcr
	}).(RegistrySpecGcrPtrOutput)
}

func (o RegistrySpecPtrOutput) Other() RegistrySpecOtherPtrOutput {
	return o.ApplyT(func(v *RegistrySpec) *RegistrySpecOther {
		if v == nil {
			return nil
		}
		return v.Other
	}).(RegistrySpecOtherPtrOutput)
}

type RegistrySpecAcr struct {
	// _(Required)_ String representing client id.
	ClientId string `pulumi:"clientId"`
	// _(Required)_ String representing client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// _(Required)_ String representing your acr registry domain.
	Domain string `pulumi:"domain"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
}

// RegistrySpecAcrInput is an input type that accepts RegistrySpecAcrArgs and RegistrySpecAcrOutput values.
// You can construct a concrete instance of `RegistrySpecAcrInput` via:
//
//	RegistrySpecAcrArgs{...}
type RegistrySpecAcrInput interface {
	pulumi.Input

	ToRegistrySpecAcrOutput() RegistrySpecAcrOutput
	ToRegistrySpecAcrOutputWithContext(context.Context) RegistrySpecAcrOutput
}

type RegistrySpecAcrArgs struct {
	// _(Required)_ String representing client id.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// _(Required)_ String representing client secret.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// _(Required)_ String representing your acr registry domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
}

func (RegistrySpecAcrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecAcr)(nil)).Elem()
}

func (i RegistrySpecAcrArgs) ToRegistrySpecAcrOutput() RegistrySpecAcrOutput {
	return i.ToRegistrySpecAcrOutputWithContext(context.Background())
}

func (i RegistrySpecAcrArgs) ToRegistrySpecAcrOutputWithContext(ctx context.Context) RegistrySpecAcrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecAcrOutput)
}

func (i RegistrySpecAcrArgs) ToRegistrySpecAcrPtrOutput() RegistrySpecAcrPtrOutput {
	return i.ToRegistrySpecAcrPtrOutputWithContext(context.Background())
}

func (i RegistrySpecAcrArgs) ToRegistrySpecAcrPtrOutputWithContext(ctx context.Context) RegistrySpecAcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecAcrOutput).ToRegistrySpecAcrPtrOutputWithContext(ctx)
}

// RegistrySpecAcrPtrInput is an input type that accepts RegistrySpecAcrArgs, RegistrySpecAcrPtr and RegistrySpecAcrPtrOutput values.
// You can construct a concrete instance of `RegistrySpecAcrPtrInput` via:
//
//	        RegistrySpecAcrArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecAcrPtrInput interface {
	pulumi.Input

	ToRegistrySpecAcrPtrOutput() RegistrySpecAcrPtrOutput
	ToRegistrySpecAcrPtrOutputWithContext(context.Context) RegistrySpecAcrPtrOutput
}

type registrySpecAcrPtrType RegistrySpecAcrArgs

func RegistrySpecAcrPtr(v *RegistrySpecAcrArgs) RegistrySpecAcrPtrInput {
	return (*registrySpecAcrPtrType)(v)
}

func (*registrySpecAcrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecAcr)(nil)).Elem()
}

func (i *registrySpecAcrPtrType) ToRegistrySpecAcrPtrOutput() RegistrySpecAcrPtrOutput {
	return i.ToRegistrySpecAcrPtrOutputWithContext(context.Background())
}

func (i *registrySpecAcrPtrType) ToRegistrySpecAcrPtrOutputWithContext(ctx context.Context) RegistrySpecAcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecAcrPtrOutput)
}

type RegistrySpecAcrOutput struct{ *pulumi.OutputState }

func (RegistrySpecAcrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecAcr)(nil)).Elem()
}

func (o RegistrySpecAcrOutput) ToRegistrySpecAcrOutput() RegistrySpecAcrOutput {
	return o
}

func (o RegistrySpecAcrOutput) ToRegistrySpecAcrOutputWithContext(ctx context.Context) RegistrySpecAcrOutput {
	return o
}

func (o RegistrySpecAcrOutput) ToRegistrySpecAcrPtrOutput() RegistrySpecAcrPtrOutput {
	return o.ToRegistrySpecAcrPtrOutputWithContext(context.Background())
}

func (o RegistrySpecAcrOutput) ToRegistrySpecAcrPtrOutputWithContext(ctx context.Context) RegistrySpecAcrPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecAcr) *RegistrySpecAcr {
		return &v
	}).(RegistrySpecAcrPtrOutput)
}

// _(Required)_ String representing client id.
func (o RegistrySpecAcrOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecAcr) string { return v.ClientId }).(pulumi.StringOutput)
}

// _(Required)_ String representing client secret.
func (o RegistrySpecAcrOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecAcr) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// _(Required)_ String representing your acr registry domain.
func (o RegistrySpecAcrOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecAcr) string { return v.Domain }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecAcrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecAcr) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

type RegistrySpecAcrPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecAcrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecAcr)(nil)).Elem()
}

func (o RegistrySpecAcrPtrOutput) ToRegistrySpecAcrPtrOutput() RegistrySpecAcrPtrOutput {
	return o
}

func (o RegistrySpecAcrPtrOutput) ToRegistrySpecAcrPtrOutputWithContext(ctx context.Context) RegistrySpecAcrPtrOutput {
	return o
}

func (o RegistrySpecAcrPtrOutput) Elem() RegistrySpecAcrOutput {
	return o.ApplyT(func(v *RegistrySpecAcr) RegistrySpecAcr {
		if v != nil {
			return *v
		}
		var ret RegistrySpecAcr
		return ret
	}).(RegistrySpecAcrOutput)
}

// _(Required)_ String representing client id.
func (o RegistrySpecAcrPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecAcr) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing client secret.
func (o RegistrySpecAcrPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecAcr) *string {
		if v == nil {
			return nil
		}
		return &v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing your acr registry domain.
func (o RegistrySpecAcrPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecAcr) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecAcrPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecAcr) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecBintray struct {
	// _(Required)_ String representing the bintray domain
	Domain string `pulumi:"domain"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing token
	Token string `pulumi:"token"`
	// _(Required)_ String representing the username
	Username string `pulumi:"username"`
}

// RegistrySpecBintrayInput is an input type that accepts RegistrySpecBintrayArgs and RegistrySpecBintrayOutput values.
// You can construct a concrete instance of `RegistrySpecBintrayInput` via:
//
//	RegistrySpecBintrayArgs{...}
type RegistrySpecBintrayInput interface {
	pulumi.Input

	ToRegistrySpecBintrayOutput() RegistrySpecBintrayOutput
	ToRegistrySpecBintrayOutputWithContext(context.Context) RegistrySpecBintrayOutput
}

type RegistrySpecBintrayArgs struct {
	// _(Required)_ String representing the bintray domain
	Domain pulumi.StringInput `pulumi:"domain"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing token
	Token pulumi.StringInput `pulumi:"token"`
	// _(Required)_ String representing the username
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistrySpecBintrayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecBintray)(nil)).Elem()
}

func (i RegistrySpecBintrayArgs) ToRegistrySpecBintrayOutput() RegistrySpecBintrayOutput {
	return i.ToRegistrySpecBintrayOutputWithContext(context.Background())
}

func (i RegistrySpecBintrayArgs) ToRegistrySpecBintrayOutputWithContext(ctx context.Context) RegistrySpecBintrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecBintrayOutput)
}

func (i RegistrySpecBintrayArgs) ToRegistrySpecBintrayPtrOutput() RegistrySpecBintrayPtrOutput {
	return i.ToRegistrySpecBintrayPtrOutputWithContext(context.Background())
}

func (i RegistrySpecBintrayArgs) ToRegistrySpecBintrayPtrOutputWithContext(ctx context.Context) RegistrySpecBintrayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecBintrayOutput).ToRegistrySpecBintrayPtrOutputWithContext(ctx)
}

// RegistrySpecBintrayPtrInput is an input type that accepts RegistrySpecBintrayArgs, RegistrySpecBintrayPtr and RegistrySpecBintrayPtrOutput values.
// You can construct a concrete instance of `RegistrySpecBintrayPtrInput` via:
//
//	        RegistrySpecBintrayArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecBintrayPtrInput interface {
	pulumi.Input

	ToRegistrySpecBintrayPtrOutput() RegistrySpecBintrayPtrOutput
	ToRegistrySpecBintrayPtrOutputWithContext(context.Context) RegistrySpecBintrayPtrOutput
}

type registrySpecBintrayPtrType RegistrySpecBintrayArgs

func RegistrySpecBintrayPtr(v *RegistrySpecBintrayArgs) RegistrySpecBintrayPtrInput {
	return (*registrySpecBintrayPtrType)(v)
}

func (*registrySpecBintrayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecBintray)(nil)).Elem()
}

func (i *registrySpecBintrayPtrType) ToRegistrySpecBintrayPtrOutput() RegistrySpecBintrayPtrOutput {
	return i.ToRegistrySpecBintrayPtrOutputWithContext(context.Background())
}

func (i *registrySpecBintrayPtrType) ToRegistrySpecBintrayPtrOutputWithContext(ctx context.Context) RegistrySpecBintrayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecBintrayPtrOutput)
}

type RegistrySpecBintrayOutput struct{ *pulumi.OutputState }

func (RegistrySpecBintrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecBintray)(nil)).Elem()
}

func (o RegistrySpecBintrayOutput) ToRegistrySpecBintrayOutput() RegistrySpecBintrayOutput {
	return o
}

func (o RegistrySpecBintrayOutput) ToRegistrySpecBintrayOutputWithContext(ctx context.Context) RegistrySpecBintrayOutput {
	return o
}

func (o RegistrySpecBintrayOutput) ToRegistrySpecBintrayPtrOutput() RegistrySpecBintrayPtrOutput {
	return o.ToRegistrySpecBintrayPtrOutputWithContext(context.Background())
}

func (o RegistrySpecBintrayOutput) ToRegistrySpecBintrayPtrOutputWithContext(ctx context.Context) RegistrySpecBintrayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecBintray) *RegistrySpecBintray {
		return &v
	}).(RegistrySpecBintrayPtrOutput)
}

// _(Required)_ String representing the bintray domain
func (o RegistrySpecBintrayOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecBintray) string { return v.Domain }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecBintrayOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecBintray) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing token
func (o RegistrySpecBintrayOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecBintray) string { return v.Token }).(pulumi.StringOutput)
}

// _(Required)_ String representing the username
func (o RegistrySpecBintrayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecBintray) string { return v.Username }).(pulumi.StringOutput)
}

type RegistrySpecBintrayPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecBintrayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecBintray)(nil)).Elem()
}

func (o RegistrySpecBintrayPtrOutput) ToRegistrySpecBintrayPtrOutput() RegistrySpecBintrayPtrOutput {
	return o
}

func (o RegistrySpecBintrayPtrOutput) ToRegistrySpecBintrayPtrOutputWithContext(ctx context.Context) RegistrySpecBintrayPtrOutput {
	return o
}

func (o RegistrySpecBintrayPtrOutput) Elem() RegistrySpecBintrayOutput {
	return o.ApplyT(func(v *RegistrySpecBintray) RegistrySpecBintray {
		if v != nil {
			return *v
		}
		var ret RegistrySpecBintray
		return ret
	}).(RegistrySpecBintrayOutput)
}

// _(Required)_ String representing the bintray domain
func (o RegistrySpecBintrayPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecBintray) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecBintrayPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecBintray) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing token
func (o RegistrySpecBintrayPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecBintray) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing the username
func (o RegistrySpecBintrayPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecBintray) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecDockerhub struct {
	// _(Required, Sensitive)_ String.
	Password string `pulumi:"password"`
	// _(Required)_ String.
	Username string `pulumi:"username"`
}

// RegistrySpecDockerhubInput is an input type that accepts RegistrySpecDockerhubArgs and RegistrySpecDockerhubOutput values.
// You can construct a concrete instance of `RegistrySpecDockerhubInput` via:
//
//	RegistrySpecDockerhubArgs{...}
type RegistrySpecDockerhubInput interface {
	pulumi.Input

	ToRegistrySpecDockerhubOutput() RegistrySpecDockerhubOutput
	ToRegistrySpecDockerhubOutputWithContext(context.Context) RegistrySpecDockerhubOutput
}

type RegistrySpecDockerhubArgs struct {
	// _(Required, Sensitive)_ String.
	Password pulumi.StringInput `pulumi:"password"`
	// _(Required)_ String.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistrySpecDockerhubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecDockerhub)(nil)).Elem()
}

func (i RegistrySpecDockerhubArgs) ToRegistrySpecDockerhubOutput() RegistrySpecDockerhubOutput {
	return i.ToRegistrySpecDockerhubOutputWithContext(context.Background())
}

func (i RegistrySpecDockerhubArgs) ToRegistrySpecDockerhubOutputWithContext(ctx context.Context) RegistrySpecDockerhubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecDockerhubOutput)
}

func (i RegistrySpecDockerhubArgs) ToRegistrySpecDockerhubPtrOutput() RegistrySpecDockerhubPtrOutput {
	return i.ToRegistrySpecDockerhubPtrOutputWithContext(context.Background())
}

func (i RegistrySpecDockerhubArgs) ToRegistrySpecDockerhubPtrOutputWithContext(ctx context.Context) RegistrySpecDockerhubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecDockerhubOutput).ToRegistrySpecDockerhubPtrOutputWithContext(ctx)
}

// RegistrySpecDockerhubPtrInput is an input type that accepts RegistrySpecDockerhubArgs, RegistrySpecDockerhubPtr and RegistrySpecDockerhubPtrOutput values.
// You can construct a concrete instance of `RegistrySpecDockerhubPtrInput` via:
//
//	        RegistrySpecDockerhubArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecDockerhubPtrInput interface {
	pulumi.Input

	ToRegistrySpecDockerhubPtrOutput() RegistrySpecDockerhubPtrOutput
	ToRegistrySpecDockerhubPtrOutputWithContext(context.Context) RegistrySpecDockerhubPtrOutput
}

type registrySpecDockerhubPtrType RegistrySpecDockerhubArgs

func RegistrySpecDockerhubPtr(v *RegistrySpecDockerhubArgs) RegistrySpecDockerhubPtrInput {
	return (*registrySpecDockerhubPtrType)(v)
}

func (*registrySpecDockerhubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecDockerhub)(nil)).Elem()
}

func (i *registrySpecDockerhubPtrType) ToRegistrySpecDockerhubPtrOutput() RegistrySpecDockerhubPtrOutput {
	return i.ToRegistrySpecDockerhubPtrOutputWithContext(context.Background())
}

func (i *registrySpecDockerhubPtrType) ToRegistrySpecDockerhubPtrOutputWithContext(ctx context.Context) RegistrySpecDockerhubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecDockerhubPtrOutput)
}

type RegistrySpecDockerhubOutput struct{ *pulumi.OutputState }

func (RegistrySpecDockerhubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecDockerhub)(nil)).Elem()
}

func (o RegistrySpecDockerhubOutput) ToRegistrySpecDockerhubOutput() RegistrySpecDockerhubOutput {
	return o
}

func (o RegistrySpecDockerhubOutput) ToRegistrySpecDockerhubOutputWithContext(ctx context.Context) RegistrySpecDockerhubOutput {
	return o
}

func (o RegistrySpecDockerhubOutput) ToRegistrySpecDockerhubPtrOutput() RegistrySpecDockerhubPtrOutput {
	return o.ToRegistrySpecDockerhubPtrOutputWithContext(context.Background())
}

func (o RegistrySpecDockerhubOutput) ToRegistrySpecDockerhubPtrOutputWithContext(ctx context.Context) RegistrySpecDockerhubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecDockerhub) *RegistrySpecDockerhub {
		return &v
	}).(RegistrySpecDockerhubPtrOutput)
}

// _(Required, Sensitive)_ String.
func (o RegistrySpecDockerhubOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecDockerhub) string { return v.Password }).(pulumi.StringOutput)
}

// _(Required)_ String.
func (o RegistrySpecDockerhubOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecDockerhub) string { return v.Username }).(pulumi.StringOutput)
}

type RegistrySpecDockerhubPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecDockerhubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecDockerhub)(nil)).Elem()
}

func (o RegistrySpecDockerhubPtrOutput) ToRegistrySpecDockerhubPtrOutput() RegistrySpecDockerhubPtrOutput {
	return o
}

func (o RegistrySpecDockerhubPtrOutput) ToRegistrySpecDockerhubPtrOutputWithContext(ctx context.Context) RegistrySpecDockerhubPtrOutput {
	return o
}

func (o RegistrySpecDockerhubPtrOutput) Elem() RegistrySpecDockerhubOutput {
	return o.ApplyT(func(v *RegistrySpecDockerhub) RegistrySpecDockerhub {
		if v != nil {
			return *v
		}
		var ret RegistrySpecDockerhub
		return ret
	}).(RegistrySpecDockerhubOutput)
}

// _(Required, Sensitive)_ String.
func (o RegistrySpecDockerhubPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecDockerhub) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String.
func (o RegistrySpecDockerhubPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecDockerhub) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecEcr struct {
	// _(Required)_ String representing access key id
	AccessKeyId string `pulumi:"accessKeyId"`
	// _(Required)_ String representing one of the Amazon regions
	Region string `pulumi:"region"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing secret access key
	SecretAccessKey string `pulumi:"secretAccessKey"`
}

// RegistrySpecEcrInput is an input type that accepts RegistrySpecEcrArgs and RegistrySpecEcrOutput values.
// You can construct a concrete instance of `RegistrySpecEcrInput` via:
//
//	RegistrySpecEcrArgs{...}
type RegistrySpecEcrInput interface {
	pulumi.Input

	ToRegistrySpecEcrOutput() RegistrySpecEcrOutput
	ToRegistrySpecEcrOutputWithContext(context.Context) RegistrySpecEcrOutput
}

type RegistrySpecEcrArgs struct {
	// _(Required)_ String representing access key id
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// _(Required)_ String representing one of the Amazon regions
	Region pulumi.StringInput `pulumi:"region"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing secret access key
	SecretAccessKey pulumi.StringInput `pulumi:"secretAccessKey"`
}

func (RegistrySpecEcrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecEcr)(nil)).Elem()
}

func (i RegistrySpecEcrArgs) ToRegistrySpecEcrOutput() RegistrySpecEcrOutput {
	return i.ToRegistrySpecEcrOutputWithContext(context.Background())
}

func (i RegistrySpecEcrArgs) ToRegistrySpecEcrOutputWithContext(ctx context.Context) RegistrySpecEcrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecEcrOutput)
}

func (i RegistrySpecEcrArgs) ToRegistrySpecEcrPtrOutput() RegistrySpecEcrPtrOutput {
	return i.ToRegistrySpecEcrPtrOutputWithContext(context.Background())
}

func (i RegistrySpecEcrArgs) ToRegistrySpecEcrPtrOutputWithContext(ctx context.Context) RegistrySpecEcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecEcrOutput).ToRegistrySpecEcrPtrOutputWithContext(ctx)
}

// RegistrySpecEcrPtrInput is an input type that accepts RegistrySpecEcrArgs, RegistrySpecEcrPtr and RegistrySpecEcrPtrOutput values.
// You can construct a concrete instance of `RegistrySpecEcrPtrInput` via:
//
//	        RegistrySpecEcrArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecEcrPtrInput interface {
	pulumi.Input

	ToRegistrySpecEcrPtrOutput() RegistrySpecEcrPtrOutput
	ToRegistrySpecEcrPtrOutputWithContext(context.Context) RegistrySpecEcrPtrOutput
}

type registrySpecEcrPtrType RegistrySpecEcrArgs

func RegistrySpecEcrPtr(v *RegistrySpecEcrArgs) RegistrySpecEcrPtrInput {
	return (*registrySpecEcrPtrType)(v)
}

func (*registrySpecEcrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecEcr)(nil)).Elem()
}

func (i *registrySpecEcrPtrType) ToRegistrySpecEcrPtrOutput() RegistrySpecEcrPtrOutput {
	return i.ToRegistrySpecEcrPtrOutputWithContext(context.Background())
}

func (i *registrySpecEcrPtrType) ToRegistrySpecEcrPtrOutputWithContext(ctx context.Context) RegistrySpecEcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecEcrPtrOutput)
}

type RegistrySpecEcrOutput struct{ *pulumi.OutputState }

func (RegistrySpecEcrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecEcr)(nil)).Elem()
}

func (o RegistrySpecEcrOutput) ToRegistrySpecEcrOutput() RegistrySpecEcrOutput {
	return o
}

func (o RegistrySpecEcrOutput) ToRegistrySpecEcrOutputWithContext(ctx context.Context) RegistrySpecEcrOutput {
	return o
}

func (o RegistrySpecEcrOutput) ToRegistrySpecEcrPtrOutput() RegistrySpecEcrPtrOutput {
	return o.ToRegistrySpecEcrPtrOutputWithContext(context.Background())
}

func (o RegistrySpecEcrOutput) ToRegistrySpecEcrPtrOutputWithContext(ctx context.Context) RegistrySpecEcrPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecEcr) *RegistrySpecEcr {
		return &v
	}).(RegistrySpecEcrPtrOutput)
}

// _(Required)_ String representing access key id
func (o RegistrySpecEcrOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecEcr) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// _(Required)_ String representing one of the Amazon regions
func (o RegistrySpecEcrOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecEcr) string { return v.Region }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecEcrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecEcr) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing secret access key
func (o RegistrySpecEcrOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecEcr) string { return v.SecretAccessKey }).(pulumi.StringOutput)
}

type RegistrySpecEcrPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecEcrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecEcr)(nil)).Elem()
}

func (o RegistrySpecEcrPtrOutput) ToRegistrySpecEcrPtrOutput() RegistrySpecEcrPtrOutput {
	return o
}

func (o RegistrySpecEcrPtrOutput) ToRegistrySpecEcrPtrOutputWithContext(ctx context.Context) RegistrySpecEcrPtrOutput {
	return o
}

func (o RegistrySpecEcrPtrOutput) Elem() RegistrySpecEcrOutput {
	return o.ApplyT(func(v *RegistrySpecEcr) RegistrySpecEcr {
		if v != nil {
			return *v
		}
		var ret RegistrySpecEcr
		return ret
	}).(RegistrySpecEcrOutput)
}

// _(Required)_ String representing access key id
func (o RegistrySpecEcrPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecEcr) *string {
		if v == nil {
			return nil
		}
		return &v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing one of the Amazon regions
func (o RegistrySpecEcrPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecEcr) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecEcrPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecEcr) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing secret access key
func (o RegistrySpecEcrPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecEcr) *string {
		if v == nil {
			return nil
		}
		return &v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecGar struct {
	// _(Required)_ String representing service account json file contents
	Keyfile string `pulumi:"keyfile"`
	// _(Required)_ String representing one of the Google's gar locations
	Location string `pulumi:"location"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
}

// RegistrySpecGarInput is an input type that accepts RegistrySpecGarArgs and RegistrySpecGarOutput values.
// You can construct a concrete instance of `RegistrySpecGarInput` via:
//
//	RegistrySpecGarArgs{...}
type RegistrySpecGarInput interface {
	pulumi.Input

	ToRegistrySpecGarOutput() RegistrySpecGarOutput
	ToRegistrySpecGarOutputWithContext(context.Context) RegistrySpecGarOutput
}

type RegistrySpecGarArgs struct {
	// _(Required)_ String representing service account json file contents
	Keyfile pulumi.StringInput `pulumi:"keyfile"`
	// _(Required)_ String representing one of the Google's gar locations
	Location pulumi.StringInput `pulumi:"location"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
}

func (RegistrySpecGarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecGar)(nil)).Elem()
}

func (i RegistrySpecGarArgs) ToRegistrySpecGarOutput() RegistrySpecGarOutput {
	return i.ToRegistrySpecGarOutputWithContext(context.Background())
}

func (i RegistrySpecGarArgs) ToRegistrySpecGarOutputWithContext(ctx context.Context) RegistrySpecGarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGarOutput)
}

func (i RegistrySpecGarArgs) ToRegistrySpecGarPtrOutput() RegistrySpecGarPtrOutput {
	return i.ToRegistrySpecGarPtrOutputWithContext(context.Background())
}

func (i RegistrySpecGarArgs) ToRegistrySpecGarPtrOutputWithContext(ctx context.Context) RegistrySpecGarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGarOutput).ToRegistrySpecGarPtrOutputWithContext(ctx)
}

// RegistrySpecGarPtrInput is an input type that accepts RegistrySpecGarArgs, RegistrySpecGarPtr and RegistrySpecGarPtrOutput values.
// You can construct a concrete instance of `RegistrySpecGarPtrInput` via:
//
//	        RegistrySpecGarArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecGarPtrInput interface {
	pulumi.Input

	ToRegistrySpecGarPtrOutput() RegistrySpecGarPtrOutput
	ToRegistrySpecGarPtrOutputWithContext(context.Context) RegistrySpecGarPtrOutput
}

type registrySpecGarPtrType RegistrySpecGarArgs

func RegistrySpecGarPtr(v *RegistrySpecGarArgs) RegistrySpecGarPtrInput {
	return (*registrySpecGarPtrType)(v)
}

func (*registrySpecGarPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecGar)(nil)).Elem()
}

func (i *registrySpecGarPtrType) ToRegistrySpecGarPtrOutput() RegistrySpecGarPtrOutput {
	return i.ToRegistrySpecGarPtrOutputWithContext(context.Background())
}

func (i *registrySpecGarPtrType) ToRegistrySpecGarPtrOutputWithContext(ctx context.Context) RegistrySpecGarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGarPtrOutput)
}

type RegistrySpecGarOutput struct{ *pulumi.OutputState }

func (RegistrySpecGarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecGar)(nil)).Elem()
}

func (o RegistrySpecGarOutput) ToRegistrySpecGarOutput() RegistrySpecGarOutput {
	return o
}

func (o RegistrySpecGarOutput) ToRegistrySpecGarOutputWithContext(ctx context.Context) RegistrySpecGarOutput {
	return o
}

func (o RegistrySpecGarOutput) ToRegistrySpecGarPtrOutput() RegistrySpecGarPtrOutput {
	return o.ToRegistrySpecGarPtrOutputWithContext(context.Background())
}

func (o RegistrySpecGarOutput) ToRegistrySpecGarPtrOutputWithContext(ctx context.Context) RegistrySpecGarPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecGar) *RegistrySpecGar {
		return &v
	}).(RegistrySpecGarPtrOutput)
}

// _(Required)_ String representing service account json file contents
func (o RegistrySpecGarOutput) Keyfile() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecGar) string { return v.Keyfile }).(pulumi.StringOutput)
}

// _(Required)_ String representing one of the Google's gar locations
func (o RegistrySpecGarOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecGar) string { return v.Location }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecGarOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecGar) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

type RegistrySpecGarPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecGarPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecGar)(nil)).Elem()
}

func (o RegistrySpecGarPtrOutput) ToRegistrySpecGarPtrOutput() RegistrySpecGarPtrOutput {
	return o
}

func (o RegistrySpecGarPtrOutput) ToRegistrySpecGarPtrOutputWithContext(ctx context.Context) RegistrySpecGarPtrOutput {
	return o
}

func (o RegistrySpecGarPtrOutput) Elem() RegistrySpecGarOutput {
	return o.ApplyT(func(v *RegistrySpecGar) RegistrySpecGar {
		if v != nil {
			return *v
		}
		var ret RegistrySpecGar
		return ret
	}).(RegistrySpecGarOutput)
}

// _(Required)_ String representing service account json file contents
func (o RegistrySpecGarPtrOutput) Keyfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGar) *string {
		if v == nil {
			return nil
		}
		return &v.Keyfile
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing one of the Google's gar locations
func (o RegistrySpecGarPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGar) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecGarPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGar) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecGcr struct {
	// _(Required)_ String representing one of the Google's gcr domains
	Domain string `pulumi:"domain"`
	// _(Required)_ String representing service account json file contents
	Keyfile string `pulumi:"keyfile"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
}

// RegistrySpecGcrInput is an input type that accepts RegistrySpecGcrArgs and RegistrySpecGcrOutput values.
// You can construct a concrete instance of `RegistrySpecGcrInput` via:
//
//	RegistrySpecGcrArgs{...}
type RegistrySpecGcrInput interface {
	pulumi.Input

	ToRegistrySpecGcrOutput() RegistrySpecGcrOutput
	ToRegistrySpecGcrOutputWithContext(context.Context) RegistrySpecGcrOutput
}

type RegistrySpecGcrArgs struct {
	// _(Required)_ String representing one of the Google's gcr domains
	Domain pulumi.StringInput `pulumi:"domain"`
	// _(Required)_ String representing service account json file contents
	Keyfile pulumi.StringInput `pulumi:"keyfile"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
}

func (RegistrySpecGcrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecGcr)(nil)).Elem()
}

func (i RegistrySpecGcrArgs) ToRegistrySpecGcrOutput() RegistrySpecGcrOutput {
	return i.ToRegistrySpecGcrOutputWithContext(context.Background())
}

func (i RegistrySpecGcrArgs) ToRegistrySpecGcrOutputWithContext(ctx context.Context) RegistrySpecGcrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGcrOutput)
}

func (i RegistrySpecGcrArgs) ToRegistrySpecGcrPtrOutput() RegistrySpecGcrPtrOutput {
	return i.ToRegistrySpecGcrPtrOutputWithContext(context.Background())
}

func (i RegistrySpecGcrArgs) ToRegistrySpecGcrPtrOutputWithContext(ctx context.Context) RegistrySpecGcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGcrOutput).ToRegistrySpecGcrPtrOutputWithContext(ctx)
}

// RegistrySpecGcrPtrInput is an input type that accepts RegistrySpecGcrArgs, RegistrySpecGcrPtr and RegistrySpecGcrPtrOutput values.
// You can construct a concrete instance of `RegistrySpecGcrPtrInput` via:
//
//	        RegistrySpecGcrArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecGcrPtrInput interface {
	pulumi.Input

	ToRegistrySpecGcrPtrOutput() RegistrySpecGcrPtrOutput
	ToRegistrySpecGcrPtrOutputWithContext(context.Context) RegistrySpecGcrPtrOutput
}

type registrySpecGcrPtrType RegistrySpecGcrArgs

func RegistrySpecGcrPtr(v *RegistrySpecGcrArgs) RegistrySpecGcrPtrInput {
	return (*registrySpecGcrPtrType)(v)
}

func (*registrySpecGcrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecGcr)(nil)).Elem()
}

func (i *registrySpecGcrPtrType) ToRegistrySpecGcrPtrOutput() RegistrySpecGcrPtrOutput {
	return i.ToRegistrySpecGcrPtrOutputWithContext(context.Background())
}

func (i *registrySpecGcrPtrType) ToRegistrySpecGcrPtrOutputWithContext(ctx context.Context) RegistrySpecGcrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecGcrPtrOutput)
}

type RegistrySpecGcrOutput struct{ *pulumi.OutputState }

func (RegistrySpecGcrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecGcr)(nil)).Elem()
}

func (o RegistrySpecGcrOutput) ToRegistrySpecGcrOutput() RegistrySpecGcrOutput {
	return o
}

func (o RegistrySpecGcrOutput) ToRegistrySpecGcrOutputWithContext(ctx context.Context) RegistrySpecGcrOutput {
	return o
}

func (o RegistrySpecGcrOutput) ToRegistrySpecGcrPtrOutput() RegistrySpecGcrPtrOutput {
	return o.ToRegistrySpecGcrPtrOutputWithContext(context.Background())
}

func (o RegistrySpecGcrOutput) ToRegistrySpecGcrPtrOutputWithContext(ctx context.Context) RegistrySpecGcrPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecGcr) *RegistrySpecGcr {
		return &v
	}).(RegistrySpecGcrPtrOutput)
}

// _(Required)_ String representing one of the Google's gcr domains
func (o RegistrySpecGcrOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecGcr) string { return v.Domain }).(pulumi.StringOutput)
}

// _(Required)_ String representing service account json file contents
func (o RegistrySpecGcrOutput) Keyfile() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecGcr) string { return v.Keyfile }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecGcrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecGcr) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

type RegistrySpecGcrPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecGcrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecGcr)(nil)).Elem()
}

func (o RegistrySpecGcrPtrOutput) ToRegistrySpecGcrPtrOutput() RegistrySpecGcrPtrOutput {
	return o
}

func (o RegistrySpecGcrPtrOutput) ToRegistrySpecGcrPtrOutputWithContext(ctx context.Context) RegistrySpecGcrPtrOutput {
	return o
}

func (o RegistrySpecGcrPtrOutput) Elem() RegistrySpecGcrOutput {
	return o.ApplyT(func(v *RegistrySpecGcr) RegistrySpecGcr {
		if v != nil {
			return *v
		}
		var ret RegistrySpecGcr
		return ret
	}).(RegistrySpecGcrOutput)
}

// _(Required)_ String representing one of the Google's gcr domains
func (o RegistrySpecGcrPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGcr) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing service account json file contents
func (o RegistrySpecGcrPtrOutput) Keyfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGcr) *string {
		if v == nil {
			return nil
		}
		return &v.Keyfile
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecGcrPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecGcr) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

type RegistrySpecOther struct {
	// _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
	BehindFirewall *bool `pulumi:"behindFirewall"`
	// _(Required)_ String representing the bintray domain
	Domain string `pulumi:"domain"`
	// _(Required)_ String representing token
	Password string `pulumi:"password"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix *string `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing the username
	Username string `pulumi:"username"`
}

// RegistrySpecOtherInput is an input type that accepts RegistrySpecOtherArgs and RegistrySpecOtherOutput values.
// You can construct a concrete instance of `RegistrySpecOtherInput` via:
//
//	RegistrySpecOtherArgs{...}
type RegistrySpecOtherInput interface {
	pulumi.Input

	ToRegistrySpecOtherOutput() RegistrySpecOtherOutput
	ToRegistrySpecOtherOutputWithContext(context.Context) RegistrySpecOtherOutput
}

type RegistrySpecOtherArgs struct {
	// _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
	BehindFirewall pulumi.BoolPtrInput `pulumi:"behindFirewall"`
	// _(Required)_ String representing the bintray domain
	Domain pulumi.StringInput `pulumi:"domain"`
	// _(Required)_ String representing token
	Password pulumi.StringInput `pulumi:"password"`
	// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
	RepositoryPrefix pulumi.StringPtrInput `pulumi:"repositoryPrefix"`
	// _(Required)_ String representing the username
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistrySpecOtherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecOther)(nil)).Elem()
}

func (i RegistrySpecOtherArgs) ToRegistrySpecOtherOutput() RegistrySpecOtherOutput {
	return i.ToRegistrySpecOtherOutputWithContext(context.Background())
}

func (i RegistrySpecOtherArgs) ToRegistrySpecOtherOutputWithContext(ctx context.Context) RegistrySpecOtherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecOtherOutput)
}

func (i RegistrySpecOtherArgs) ToRegistrySpecOtherPtrOutput() RegistrySpecOtherPtrOutput {
	return i.ToRegistrySpecOtherPtrOutputWithContext(context.Background())
}

func (i RegistrySpecOtherArgs) ToRegistrySpecOtherPtrOutputWithContext(ctx context.Context) RegistrySpecOtherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecOtherOutput).ToRegistrySpecOtherPtrOutputWithContext(ctx)
}

// RegistrySpecOtherPtrInput is an input type that accepts RegistrySpecOtherArgs, RegistrySpecOtherPtr and RegistrySpecOtherPtrOutput values.
// You can construct a concrete instance of `RegistrySpecOtherPtrInput` via:
//
//	        RegistrySpecOtherArgs{...}
//
//	or:
//
//	        nil
type RegistrySpecOtherPtrInput interface {
	pulumi.Input

	ToRegistrySpecOtherPtrOutput() RegistrySpecOtherPtrOutput
	ToRegistrySpecOtherPtrOutputWithContext(context.Context) RegistrySpecOtherPtrOutput
}

type registrySpecOtherPtrType RegistrySpecOtherArgs

func RegistrySpecOtherPtr(v *RegistrySpecOtherArgs) RegistrySpecOtherPtrInput {
	return (*registrySpecOtherPtrType)(v)
}

func (*registrySpecOtherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecOther)(nil)).Elem()
}

func (i *registrySpecOtherPtrType) ToRegistrySpecOtherPtrOutput() RegistrySpecOtherPtrOutput {
	return i.ToRegistrySpecOtherPtrOutputWithContext(context.Background())
}

func (i *registrySpecOtherPtrType) ToRegistrySpecOtherPtrOutputWithContext(ctx context.Context) RegistrySpecOtherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrySpecOtherPtrOutput)
}

type RegistrySpecOtherOutput struct{ *pulumi.OutputState }

func (RegistrySpecOtherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySpecOther)(nil)).Elem()
}

func (o RegistrySpecOtherOutput) ToRegistrySpecOtherOutput() RegistrySpecOtherOutput {
	return o
}

func (o RegistrySpecOtherOutput) ToRegistrySpecOtherOutputWithContext(ctx context.Context) RegistrySpecOtherOutput {
	return o
}

func (o RegistrySpecOtherOutput) ToRegistrySpecOtherPtrOutput() RegistrySpecOtherPtrOutput {
	return o.ToRegistrySpecOtherPtrOutputWithContext(context.Background())
}

func (o RegistrySpecOtherOutput) ToRegistrySpecOtherPtrOutputWithContext(ctx context.Context) RegistrySpecOtherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrySpecOther) *RegistrySpecOther {
		return &v
	}).(RegistrySpecOtherPtrOutput)
}

// _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
func (o RegistrySpecOtherOutput) BehindFirewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegistrySpecOther) *bool { return v.BehindFirewall }).(pulumi.BoolPtrOutput)
}

// _(Required)_ String representing the bintray domain
func (o RegistrySpecOtherOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecOther) string { return v.Domain }).(pulumi.StringOutput)
}

// _(Required)_ String representing token
func (o RegistrySpecOtherOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecOther) string { return v.Password }).(pulumi.StringOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecOtherOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySpecOther) *string { return v.RepositoryPrefix }).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing the username
func (o RegistrySpecOtherOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrySpecOther) string { return v.Username }).(pulumi.StringOutput)
}

type RegistrySpecOtherPtrOutput struct{ *pulumi.OutputState }

func (RegistrySpecOtherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySpecOther)(nil)).Elem()
}

func (o RegistrySpecOtherPtrOutput) ToRegistrySpecOtherPtrOutput() RegistrySpecOtherPtrOutput {
	return o
}

func (o RegistrySpecOtherPtrOutput) ToRegistrySpecOtherPtrOutputWithContext(ctx context.Context) RegistrySpecOtherPtrOutput {
	return o
}

func (o RegistrySpecOtherPtrOutput) Elem() RegistrySpecOtherOutput {
	return o.ApplyT(func(v *RegistrySpecOther) RegistrySpecOther {
		if v != nil {
			return *v
		}
		var ret RegistrySpecOther
		return ret
	}).(RegistrySpecOtherOutput)
}

// _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
func (o RegistrySpecOtherPtrOutput) BehindFirewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistrySpecOther) *bool {
		if v == nil {
			return nil
		}
		return v.BehindFirewall
	}).(pulumi.BoolPtrOutput)
}

// _(Required)_ String representing the bintray domain
func (o RegistrySpecOtherPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecOther) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing token
func (o RegistrySpecOtherPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecOther) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
func (o RegistrySpecOtherPtrOutput) RepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecOther) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPrefix
	}).(pulumi.StringPtrOutput)
}

// _(Required)_ String representing the username
func (o RegistrySpecOtherPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySpecOther) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type StepTypesVersion struct {
	// YAML String containing a valid definition of a typed plugin
	StepTypesYaml string `pulumi:"stepTypesYaml"`
	// String representing the semVer for the step
	VersionNumber string `pulumi:"versionNumber"`
}

// StepTypesVersionInput is an input type that accepts StepTypesVersionArgs and StepTypesVersionOutput values.
// You can construct a concrete instance of `StepTypesVersionInput` via:
//
//	StepTypesVersionArgs{...}
type StepTypesVersionInput interface {
	pulumi.Input

	ToStepTypesVersionOutput() StepTypesVersionOutput
	ToStepTypesVersionOutputWithContext(context.Context) StepTypesVersionOutput
}

type StepTypesVersionArgs struct {
	// YAML String containing a valid definition of a typed plugin
	StepTypesYaml pulumi.StringInput `pulumi:"stepTypesYaml"`
	// String representing the semVer for the step
	VersionNumber pulumi.StringInput `pulumi:"versionNumber"`
}

func (StepTypesVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepTypesVersion)(nil)).Elem()
}

func (i StepTypesVersionArgs) ToStepTypesVersionOutput() StepTypesVersionOutput {
	return i.ToStepTypesVersionOutputWithContext(context.Background())
}

func (i StepTypesVersionArgs) ToStepTypesVersionOutputWithContext(ctx context.Context) StepTypesVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepTypesVersionOutput)
}

// StepTypesVersionArrayInput is an input type that accepts StepTypesVersionArray and StepTypesVersionArrayOutput values.
// You can construct a concrete instance of `StepTypesVersionArrayInput` via:
//
//	StepTypesVersionArray{ StepTypesVersionArgs{...} }
type StepTypesVersionArrayInput interface {
	pulumi.Input

	ToStepTypesVersionArrayOutput() StepTypesVersionArrayOutput
	ToStepTypesVersionArrayOutputWithContext(context.Context) StepTypesVersionArrayOutput
}

type StepTypesVersionArray []StepTypesVersionInput

func (StepTypesVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepTypesVersion)(nil)).Elem()
}

func (i StepTypesVersionArray) ToStepTypesVersionArrayOutput() StepTypesVersionArrayOutput {
	return i.ToStepTypesVersionArrayOutputWithContext(context.Background())
}

func (i StepTypesVersionArray) ToStepTypesVersionArrayOutputWithContext(ctx context.Context) StepTypesVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepTypesVersionArrayOutput)
}

type StepTypesVersionOutput struct{ *pulumi.OutputState }

func (StepTypesVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepTypesVersion)(nil)).Elem()
}

func (o StepTypesVersionOutput) ToStepTypesVersionOutput() StepTypesVersionOutput {
	return o
}

func (o StepTypesVersionOutput) ToStepTypesVersionOutputWithContext(ctx context.Context) StepTypesVersionOutput {
	return o
}

// YAML String containing a valid definition of a typed plugin
func (o StepTypesVersionOutput) StepTypesYaml() pulumi.StringOutput {
	return o.ApplyT(func(v StepTypesVersion) string { return v.StepTypesYaml }).(pulumi.StringOutput)
}

// String representing the semVer for the step
func (o StepTypesVersionOutput) VersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v StepTypesVersion) string { return v.VersionNumber }).(pulumi.StringOutput)
}

type StepTypesVersionArrayOutput struct{ *pulumi.OutputState }

func (StepTypesVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepTypesVersion)(nil)).Elem()
}

func (o StepTypesVersionArrayOutput) ToStepTypesVersionArrayOutput() StepTypesVersionArrayOutput {
	return o
}

func (o StepTypesVersionArrayOutput) ToStepTypesVersionArrayOutputWithContext(ctx context.Context) StepTypesVersionArrayOutput {
	return o
}

func (o StepTypesVersionArrayOutput) Index(i pulumi.IntInput) StepTypesVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepTypesVersion {
		return vs[0].([]StepTypesVersion)[vs[1].(int)]
	}).(StepTypesVersionOutput)
}

type UserLogin struct {
	// The id of IDP to the user to.
	IdpId *string `pulumi:"idpId"`
	Sso   *bool   `pulumi:"sso"`
}

// UserLoginInput is an input type that accepts UserLoginArgs and UserLoginOutput values.
// You can construct a concrete instance of `UserLoginInput` via:
//
//	UserLoginArgs{...}
type UserLoginInput interface {
	pulumi.Input

	ToUserLoginOutput() UserLoginOutput
	ToUserLoginOutputWithContext(context.Context) UserLoginOutput
}

type UserLoginArgs struct {
	// The id of IDP to the user to.
	IdpId pulumi.StringPtrInput `pulumi:"idpId"`
	Sso   pulumi.BoolPtrInput   `pulumi:"sso"`
}

func (UserLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLogin)(nil)).Elem()
}

func (i UserLoginArgs) ToUserLoginOutput() UserLoginOutput {
	return i.ToUserLoginOutputWithContext(context.Background())
}

func (i UserLoginArgs) ToUserLoginOutputWithContext(ctx context.Context) UserLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginOutput)
}

// UserLoginArrayInput is an input type that accepts UserLoginArray and UserLoginArrayOutput values.
// You can construct a concrete instance of `UserLoginArrayInput` via:
//
//	UserLoginArray{ UserLoginArgs{...} }
type UserLoginArrayInput interface {
	pulumi.Input

	ToUserLoginArrayOutput() UserLoginArrayOutput
	ToUserLoginArrayOutputWithContext(context.Context) UserLoginArrayOutput
}

type UserLoginArray []UserLoginInput

func (UserLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLogin)(nil)).Elem()
}

func (i UserLoginArray) ToUserLoginArrayOutput() UserLoginArrayOutput {
	return i.ToUserLoginArrayOutputWithContext(context.Background())
}

func (i UserLoginArray) ToUserLoginArrayOutputWithContext(ctx context.Context) UserLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginArrayOutput)
}

type UserLoginOutput struct{ *pulumi.OutputState }

func (UserLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLogin)(nil)).Elem()
}

func (o UserLoginOutput) ToUserLoginOutput() UserLoginOutput {
	return o
}

func (o UserLoginOutput) ToUserLoginOutputWithContext(ctx context.Context) UserLoginOutput {
	return o
}

// The id of IDP to the user to.
func (o UserLoginOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLogin) *string { return v.IdpId }).(pulumi.StringPtrOutput)
}

func (o UserLoginOutput) Sso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLogin) *bool { return v.Sso }).(pulumi.BoolPtrOutput)
}

type UserLoginArrayOutput struct{ *pulumi.OutputState }

func (UserLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLogin)(nil)).Elem()
}

func (o UserLoginArrayOutput) ToUserLoginArrayOutput() UserLoginArrayOutput {
	return o
}

func (o UserLoginArrayOutput) ToUserLoginArrayOutputWithContext(ctx context.Context) UserLoginArrayOutput {
	return o
}

func (o UserLoginArrayOutput) Index(i pulumi.IntInput) UserLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserLogin {
		return vs[0].([]UserLogin)[vs[1].(int)]
	}).(UserLoginOutput)
}

type UserPersonal struct {
	// .
	CompanyName *string `pulumi:"companyName"`
	// .
	Country *string `pulumi:"country"`
	// .
	FirstName *string `pulumi:"firstName"`
	// .
	LastName *string `pulumi:"lastName"`
	// .
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// UserPersonalInput is an input type that accepts UserPersonalArgs and UserPersonalOutput values.
// You can construct a concrete instance of `UserPersonalInput` via:
//
//	UserPersonalArgs{...}
type UserPersonalInput interface {
	pulumi.Input

	ToUserPersonalOutput() UserPersonalOutput
	ToUserPersonalOutputWithContext(context.Context) UserPersonalOutput
}

type UserPersonalArgs struct {
	// .
	CompanyName pulumi.StringPtrInput `pulumi:"companyName"`
	// .
	Country pulumi.StringPtrInput `pulumi:"country"`
	// .
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// .
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
	// .
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (UserPersonalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPersonal)(nil)).Elem()
}

func (i UserPersonalArgs) ToUserPersonalOutput() UserPersonalOutput {
	return i.ToUserPersonalOutputWithContext(context.Background())
}

func (i UserPersonalArgs) ToUserPersonalOutputWithContext(ctx context.Context) UserPersonalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPersonalOutput)
}

func (i UserPersonalArgs) ToUserPersonalPtrOutput() UserPersonalPtrOutput {
	return i.ToUserPersonalPtrOutputWithContext(context.Background())
}

func (i UserPersonalArgs) ToUserPersonalPtrOutputWithContext(ctx context.Context) UserPersonalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPersonalOutput).ToUserPersonalPtrOutputWithContext(ctx)
}

// UserPersonalPtrInput is an input type that accepts UserPersonalArgs, UserPersonalPtr and UserPersonalPtrOutput values.
// You can construct a concrete instance of `UserPersonalPtrInput` via:
//
//	        UserPersonalArgs{...}
//
//	or:
//
//	        nil
type UserPersonalPtrInput interface {
	pulumi.Input

	ToUserPersonalPtrOutput() UserPersonalPtrOutput
	ToUserPersonalPtrOutputWithContext(context.Context) UserPersonalPtrOutput
}

type userPersonalPtrType UserPersonalArgs

func UserPersonalPtr(v *UserPersonalArgs) UserPersonalPtrInput {
	return (*userPersonalPtrType)(v)
}

func (*userPersonalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPersonal)(nil)).Elem()
}

func (i *userPersonalPtrType) ToUserPersonalPtrOutput() UserPersonalPtrOutput {
	return i.ToUserPersonalPtrOutputWithContext(context.Background())
}

func (i *userPersonalPtrType) ToUserPersonalPtrOutputWithContext(ctx context.Context) UserPersonalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPersonalPtrOutput)
}

type UserPersonalOutput struct{ *pulumi.OutputState }

func (UserPersonalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPersonal)(nil)).Elem()
}

func (o UserPersonalOutput) ToUserPersonalOutput() UserPersonalOutput {
	return o
}

func (o UserPersonalOutput) ToUserPersonalOutputWithContext(ctx context.Context) UserPersonalOutput {
	return o
}

func (o UserPersonalOutput) ToUserPersonalPtrOutput() UserPersonalPtrOutput {
	return o.ToUserPersonalPtrOutputWithContext(context.Background())
}

func (o UserPersonalOutput) ToUserPersonalPtrOutputWithContext(ctx context.Context) UserPersonalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPersonal) *UserPersonal {
		return &v
	}).(UserPersonalPtrOutput)
}

// .
func (o UserPersonalOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPersonal) *string { return v.CompanyName }).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPersonal) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPersonal) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPersonal) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPersonal) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type UserPersonalPtrOutput struct{ *pulumi.OutputState }

func (UserPersonalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPersonal)(nil)).Elem()
}

func (o UserPersonalPtrOutput) ToUserPersonalPtrOutput() UserPersonalPtrOutput {
	return o
}

func (o UserPersonalPtrOutput) ToUserPersonalPtrOutputWithContext(ctx context.Context) UserPersonalPtrOutput {
	return o
}

func (o UserPersonalPtrOutput) Elem() UserPersonalOutput {
	return o.ApplyT(func(v *UserPersonal) UserPersonal {
		if v != nil {
			return *v
		}
		var ret UserPersonal
		return ret
	}).(UserPersonalOutput)
}

// .
func (o UserPersonalPtrOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPersonal) *string {
		if v == nil {
			return nil
		}
		return v.CompanyName
	}).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPersonal) *string {
		if v == nil {
			return nil
		}
		return v.Country
	}).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPersonal) *string {
		if v == nil {
			return nil
		}
		return v.FirstName
	}).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPersonal) *string {
		if v == nil {
			return nil
		}
		return v.LastName
	}).(pulumi.StringPtrOutput)
}

// .
func (o UserPersonalPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPersonal) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type UserShortProfile struct {
	// The new user name.
	UserName *string `pulumi:"userName"`
}

// UserShortProfileInput is an input type that accepts UserShortProfileArgs and UserShortProfileOutput values.
// You can construct a concrete instance of `UserShortProfileInput` via:
//
//	UserShortProfileArgs{...}
type UserShortProfileInput interface {
	pulumi.Input

	ToUserShortProfileOutput() UserShortProfileOutput
	ToUserShortProfileOutputWithContext(context.Context) UserShortProfileOutput
}

type UserShortProfileArgs struct {
	// The new user name.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserShortProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserShortProfile)(nil)).Elem()
}

func (i UserShortProfileArgs) ToUserShortProfileOutput() UserShortProfileOutput {
	return i.ToUserShortProfileOutputWithContext(context.Background())
}

func (i UserShortProfileArgs) ToUserShortProfileOutputWithContext(ctx context.Context) UserShortProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserShortProfileOutput)
}

// UserShortProfileArrayInput is an input type that accepts UserShortProfileArray and UserShortProfileArrayOutput values.
// You can construct a concrete instance of `UserShortProfileArrayInput` via:
//
//	UserShortProfileArray{ UserShortProfileArgs{...} }
type UserShortProfileArrayInput interface {
	pulumi.Input

	ToUserShortProfileArrayOutput() UserShortProfileArrayOutput
	ToUserShortProfileArrayOutputWithContext(context.Context) UserShortProfileArrayOutput
}

type UserShortProfileArray []UserShortProfileInput

func (UserShortProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserShortProfile)(nil)).Elem()
}

func (i UserShortProfileArray) ToUserShortProfileArrayOutput() UserShortProfileArrayOutput {
	return i.ToUserShortProfileArrayOutputWithContext(context.Background())
}

func (i UserShortProfileArray) ToUserShortProfileArrayOutputWithContext(ctx context.Context) UserShortProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserShortProfileArrayOutput)
}

type UserShortProfileOutput struct{ *pulumi.OutputState }

func (UserShortProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserShortProfile)(nil)).Elem()
}

func (o UserShortProfileOutput) ToUserShortProfileOutput() UserShortProfileOutput {
	return o
}

func (o UserShortProfileOutput) ToUserShortProfileOutputWithContext(ctx context.Context) UserShortProfileOutput {
	return o
}

// The new user name.
func (o UserShortProfileOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserShortProfile) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserShortProfileArrayOutput struct{ *pulumi.OutputState }

func (UserShortProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserShortProfile)(nil)).Elem()
}

func (o UserShortProfileArrayOutput) ToUserShortProfileArrayOutput() UserShortProfileArrayOutput {
	return o
}

func (o UserShortProfileArrayOutput) ToUserShortProfileArrayOutputWithContext(ctx context.Context) UserShortProfileArrayOutput {
	return o
}

func (o UserShortProfileArrayOutput) Index(i pulumi.IntInput) UserShortProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserShortProfile {
		return vs[0].([]UserShortProfile)[vs[1].(int)]
	}).(UserShortProfileOutput)
}

type GetCurrentAccountUser struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
}

// GetCurrentAccountUserInput is an input type that accepts GetCurrentAccountUserArgs and GetCurrentAccountUserOutput values.
// You can construct a concrete instance of `GetCurrentAccountUserInput` via:
//
//	GetCurrentAccountUserArgs{...}
type GetCurrentAccountUserInput interface {
	pulumi.Input

	ToGetCurrentAccountUserOutput() GetCurrentAccountUserOutput
	ToGetCurrentAccountUserOutputWithContext(context.Context) GetCurrentAccountUserOutput
}

type GetCurrentAccountUserArgs struct {
	Email pulumi.StringInput `pulumi:"email"`
	Id    pulumi.StringInput `pulumi:"id"`
	Name  pulumi.StringInput `pulumi:"name"`
}

func (GetCurrentAccountUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCurrentAccountUser)(nil)).Elem()
}

func (i GetCurrentAccountUserArgs) ToGetCurrentAccountUserOutput() GetCurrentAccountUserOutput {
	return i.ToGetCurrentAccountUserOutputWithContext(context.Background())
}

func (i GetCurrentAccountUserArgs) ToGetCurrentAccountUserOutputWithContext(ctx context.Context) GetCurrentAccountUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCurrentAccountUserOutput)
}

// GetCurrentAccountUserArrayInput is an input type that accepts GetCurrentAccountUserArray and GetCurrentAccountUserArrayOutput values.
// You can construct a concrete instance of `GetCurrentAccountUserArrayInput` via:
//
//	GetCurrentAccountUserArray{ GetCurrentAccountUserArgs{...} }
type GetCurrentAccountUserArrayInput interface {
	pulumi.Input

	ToGetCurrentAccountUserArrayOutput() GetCurrentAccountUserArrayOutput
	ToGetCurrentAccountUserArrayOutputWithContext(context.Context) GetCurrentAccountUserArrayOutput
}

type GetCurrentAccountUserArray []GetCurrentAccountUserInput

func (GetCurrentAccountUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCurrentAccountUser)(nil)).Elem()
}

func (i GetCurrentAccountUserArray) ToGetCurrentAccountUserArrayOutput() GetCurrentAccountUserArrayOutput {
	return i.ToGetCurrentAccountUserArrayOutputWithContext(context.Background())
}

func (i GetCurrentAccountUserArray) ToGetCurrentAccountUserArrayOutputWithContext(ctx context.Context) GetCurrentAccountUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCurrentAccountUserArrayOutput)
}

type GetCurrentAccountUserOutput struct{ *pulumi.OutputState }

func (GetCurrentAccountUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCurrentAccountUser)(nil)).Elem()
}

func (o GetCurrentAccountUserOutput) ToGetCurrentAccountUserOutput() GetCurrentAccountUserOutput {
	return o
}

func (o GetCurrentAccountUserOutput) ToGetCurrentAccountUserOutputWithContext(ctx context.Context) GetCurrentAccountUserOutput {
	return o
}

func (o GetCurrentAccountUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetCurrentAccountUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetCurrentAccountUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCurrentAccountUser) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCurrentAccountUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCurrentAccountUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetCurrentAccountUserArrayOutput struct{ *pulumi.OutputState }

func (GetCurrentAccountUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCurrentAccountUser)(nil)).Elem()
}

func (o GetCurrentAccountUserArrayOutput) ToGetCurrentAccountUserArrayOutput() GetCurrentAccountUserArrayOutput {
	return o
}

func (o GetCurrentAccountUserArrayOutput) ToGetCurrentAccountUserArrayOutputWithContext(ctx context.Context) GetCurrentAccountUserArrayOutput {
	return o
}

func (o GetCurrentAccountUserArrayOutput) Index(i pulumi.IntInput) GetCurrentAccountUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCurrentAccountUser {
		return vs[0].([]GetCurrentAccountUser)[vs[1].(int)]
	}).(GetCurrentAccountUserOutput)
}

type GetStepTypesVersion struct {
	// YAML String containing the definition of a typed plugin
	StepTypesYaml string `pulumi:"stepTypesYaml"`
	// String representing the semVer for the step
	VersionNumber string `pulumi:"versionNumber"`
}

// GetStepTypesVersionInput is an input type that accepts GetStepTypesVersionArgs and GetStepTypesVersionOutput values.
// You can construct a concrete instance of `GetStepTypesVersionInput` via:
//
//	GetStepTypesVersionArgs{...}
type GetStepTypesVersionInput interface {
	pulumi.Input

	ToGetStepTypesVersionOutput() GetStepTypesVersionOutput
	ToGetStepTypesVersionOutputWithContext(context.Context) GetStepTypesVersionOutput
}

type GetStepTypesVersionArgs struct {
	// YAML String containing the definition of a typed plugin
	StepTypesYaml pulumi.StringInput `pulumi:"stepTypesYaml"`
	// String representing the semVer for the step
	VersionNumber pulumi.StringInput `pulumi:"versionNumber"`
}

func (GetStepTypesVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStepTypesVersion)(nil)).Elem()
}

func (i GetStepTypesVersionArgs) ToGetStepTypesVersionOutput() GetStepTypesVersionOutput {
	return i.ToGetStepTypesVersionOutputWithContext(context.Background())
}

func (i GetStepTypesVersionArgs) ToGetStepTypesVersionOutputWithContext(ctx context.Context) GetStepTypesVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStepTypesVersionOutput)
}

// GetStepTypesVersionArrayInput is an input type that accepts GetStepTypesVersionArray and GetStepTypesVersionArrayOutput values.
// You can construct a concrete instance of `GetStepTypesVersionArrayInput` via:
//
//	GetStepTypesVersionArray{ GetStepTypesVersionArgs{...} }
type GetStepTypesVersionArrayInput interface {
	pulumi.Input

	ToGetStepTypesVersionArrayOutput() GetStepTypesVersionArrayOutput
	ToGetStepTypesVersionArrayOutputWithContext(context.Context) GetStepTypesVersionArrayOutput
}

type GetStepTypesVersionArray []GetStepTypesVersionInput

func (GetStepTypesVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStepTypesVersion)(nil)).Elem()
}

func (i GetStepTypesVersionArray) ToGetStepTypesVersionArrayOutput() GetStepTypesVersionArrayOutput {
	return i.ToGetStepTypesVersionArrayOutputWithContext(context.Background())
}

func (i GetStepTypesVersionArray) ToGetStepTypesVersionArrayOutputWithContext(ctx context.Context) GetStepTypesVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStepTypesVersionArrayOutput)
}

type GetStepTypesVersionOutput struct{ *pulumi.OutputState }

func (GetStepTypesVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStepTypesVersion)(nil)).Elem()
}

func (o GetStepTypesVersionOutput) ToGetStepTypesVersionOutput() GetStepTypesVersionOutput {
	return o
}

func (o GetStepTypesVersionOutput) ToGetStepTypesVersionOutputWithContext(ctx context.Context) GetStepTypesVersionOutput {
	return o
}

// YAML String containing the definition of a typed plugin
func (o GetStepTypesVersionOutput) StepTypesYaml() pulumi.StringOutput {
	return o.ApplyT(func(v GetStepTypesVersion) string { return v.StepTypesYaml }).(pulumi.StringOutput)
}

// String representing the semVer for the step
func (o GetStepTypesVersionOutput) VersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetStepTypesVersion) string { return v.VersionNumber }).(pulumi.StringOutput)
}

type GetStepTypesVersionArrayOutput struct{ *pulumi.OutputState }

func (GetStepTypesVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStepTypesVersion)(nil)).Elem()
}

func (o GetStepTypesVersionArrayOutput) ToGetStepTypesVersionArrayOutput() GetStepTypesVersionArrayOutput {
	return o
}

func (o GetStepTypesVersionArrayOutput) ToGetStepTypesVersionArrayOutputWithContext(ctx context.Context) GetStepTypesVersionArrayOutput {
	return o
}

func (o GetStepTypesVersionArrayOutput) Index(i pulumi.IntInput) GetStepTypesVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStepTypesVersion {
		return vs[0].([]GetStepTypesVersion)[vs[1].(int)]
	}).(GetStepTypesVersionOutput)
}

type GetUserLogin struct {
	Credentials []GetUserLoginCredential `pulumi:"credentials"`
	Idps        []GetUserLoginIdp        `pulumi:"idps"`
}

// GetUserLoginInput is an input type that accepts GetUserLoginArgs and GetUserLoginOutput values.
// You can construct a concrete instance of `GetUserLoginInput` via:
//
//	GetUserLoginArgs{...}
type GetUserLoginInput interface {
	pulumi.Input

	ToGetUserLoginOutput() GetUserLoginOutput
	ToGetUserLoginOutputWithContext(context.Context) GetUserLoginOutput
}

type GetUserLoginArgs struct {
	Credentials GetUserLoginCredentialArrayInput `pulumi:"credentials"`
	Idps        GetUserLoginIdpArrayInput        `pulumi:"idps"`
}

func (GetUserLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLogin)(nil)).Elem()
}

func (i GetUserLoginArgs) ToGetUserLoginOutput() GetUserLoginOutput {
	return i.ToGetUserLoginOutputWithContext(context.Background())
}

func (i GetUserLoginArgs) ToGetUserLoginOutputWithContext(ctx context.Context) GetUserLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginOutput)
}

// GetUserLoginArrayInput is an input type that accepts GetUserLoginArray and GetUserLoginArrayOutput values.
// You can construct a concrete instance of `GetUserLoginArrayInput` via:
//
//	GetUserLoginArray{ GetUserLoginArgs{...} }
type GetUserLoginArrayInput interface {
	pulumi.Input

	ToGetUserLoginArrayOutput() GetUserLoginArrayOutput
	ToGetUserLoginArrayOutputWithContext(context.Context) GetUserLoginArrayOutput
}

type GetUserLoginArray []GetUserLoginInput

func (GetUserLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLogin)(nil)).Elem()
}

func (i GetUserLoginArray) ToGetUserLoginArrayOutput() GetUserLoginArrayOutput {
	return i.ToGetUserLoginArrayOutputWithContext(context.Background())
}

func (i GetUserLoginArray) ToGetUserLoginArrayOutputWithContext(ctx context.Context) GetUserLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginArrayOutput)
}

type GetUserLoginOutput struct{ *pulumi.OutputState }

func (GetUserLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLogin)(nil)).Elem()
}

func (o GetUserLoginOutput) ToGetUserLoginOutput() GetUserLoginOutput {
	return o
}

func (o GetUserLoginOutput) ToGetUserLoginOutputWithContext(ctx context.Context) GetUserLoginOutput {
	return o
}

func (o GetUserLoginOutput) Credentials() GetUserLoginCredentialArrayOutput {
	return o.ApplyT(func(v GetUserLogin) []GetUserLoginCredential { return v.Credentials }).(GetUserLoginCredentialArrayOutput)
}

func (o GetUserLoginOutput) Idps() GetUserLoginIdpArrayOutput {
	return o.ApplyT(func(v GetUserLogin) []GetUserLoginIdp { return v.Idps }).(GetUserLoginIdpArrayOutput)
}

type GetUserLoginArrayOutput struct{ *pulumi.OutputState }

func (GetUserLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLogin)(nil)).Elem()
}

func (o GetUserLoginArrayOutput) ToGetUserLoginArrayOutput() GetUserLoginArrayOutput {
	return o
}

func (o GetUserLoginArrayOutput) ToGetUserLoginArrayOutputWithContext(ctx context.Context) GetUserLoginArrayOutput {
	return o
}

func (o GetUserLoginArrayOutput) Index(i pulumi.IntInput) GetUserLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserLogin {
		return vs[0].([]GetUserLogin)[vs[1].(int)]
	}).(GetUserLoginOutput)
}

type GetUserLoginCredential struct {
	Permissions []string `pulumi:"permissions"`
}

// GetUserLoginCredentialInput is an input type that accepts GetUserLoginCredentialArgs and GetUserLoginCredentialOutput values.
// You can construct a concrete instance of `GetUserLoginCredentialInput` via:
//
//	GetUserLoginCredentialArgs{...}
type GetUserLoginCredentialInput interface {
	pulumi.Input

	ToGetUserLoginCredentialOutput() GetUserLoginCredentialOutput
	ToGetUserLoginCredentialOutputWithContext(context.Context) GetUserLoginCredentialOutput
}

type GetUserLoginCredentialArgs struct {
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetUserLoginCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginCredential)(nil)).Elem()
}

func (i GetUserLoginCredentialArgs) ToGetUserLoginCredentialOutput() GetUserLoginCredentialOutput {
	return i.ToGetUserLoginCredentialOutputWithContext(context.Background())
}

func (i GetUserLoginCredentialArgs) ToGetUserLoginCredentialOutputWithContext(ctx context.Context) GetUserLoginCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginCredentialOutput)
}

// GetUserLoginCredentialArrayInput is an input type that accepts GetUserLoginCredentialArray and GetUserLoginCredentialArrayOutput values.
// You can construct a concrete instance of `GetUserLoginCredentialArrayInput` via:
//
//	GetUserLoginCredentialArray{ GetUserLoginCredentialArgs{...} }
type GetUserLoginCredentialArrayInput interface {
	pulumi.Input

	ToGetUserLoginCredentialArrayOutput() GetUserLoginCredentialArrayOutput
	ToGetUserLoginCredentialArrayOutputWithContext(context.Context) GetUserLoginCredentialArrayOutput
}

type GetUserLoginCredentialArray []GetUserLoginCredentialInput

func (GetUserLoginCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLoginCredential)(nil)).Elem()
}

func (i GetUserLoginCredentialArray) ToGetUserLoginCredentialArrayOutput() GetUserLoginCredentialArrayOutput {
	return i.ToGetUserLoginCredentialArrayOutputWithContext(context.Background())
}

func (i GetUserLoginCredentialArray) ToGetUserLoginCredentialArrayOutputWithContext(ctx context.Context) GetUserLoginCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginCredentialArrayOutput)
}

type GetUserLoginCredentialOutput struct{ *pulumi.OutputState }

func (GetUserLoginCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginCredential)(nil)).Elem()
}

func (o GetUserLoginCredentialOutput) ToGetUserLoginCredentialOutput() GetUserLoginCredentialOutput {
	return o
}

func (o GetUserLoginCredentialOutput) ToGetUserLoginCredentialOutputWithContext(ctx context.Context) GetUserLoginCredentialOutput {
	return o
}

func (o GetUserLoginCredentialOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserLoginCredential) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetUserLoginCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetUserLoginCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLoginCredential)(nil)).Elem()
}

func (o GetUserLoginCredentialArrayOutput) ToGetUserLoginCredentialArrayOutput() GetUserLoginCredentialArrayOutput {
	return o
}

func (o GetUserLoginCredentialArrayOutput) ToGetUserLoginCredentialArrayOutputWithContext(ctx context.Context) GetUserLoginCredentialArrayOutput {
	return o
}

func (o GetUserLoginCredentialArrayOutput) Index(i pulumi.IntInput) GetUserLoginCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserLoginCredential {
		return vs[0].([]GetUserLoginCredential)[vs[1].(int)]
	}).(GetUserLoginCredentialOutput)
}

type GetUserLoginIdp struct {
	ClientType *string `pulumi:"clientType"`
	Id         *string `pulumi:"id"`
}

// GetUserLoginIdpInput is an input type that accepts GetUserLoginIdpArgs and GetUserLoginIdpOutput values.
// You can construct a concrete instance of `GetUserLoginIdpInput` via:
//
//	GetUserLoginIdpArgs{...}
type GetUserLoginIdpInput interface {
	pulumi.Input

	ToGetUserLoginIdpOutput() GetUserLoginIdpOutput
	ToGetUserLoginIdpOutputWithContext(context.Context) GetUserLoginIdpOutput
}

type GetUserLoginIdpArgs struct {
	ClientType pulumi.StringPtrInput `pulumi:"clientType"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
}

func (GetUserLoginIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginIdp)(nil)).Elem()
}

func (i GetUserLoginIdpArgs) ToGetUserLoginIdpOutput() GetUserLoginIdpOutput {
	return i.ToGetUserLoginIdpOutputWithContext(context.Background())
}

func (i GetUserLoginIdpArgs) ToGetUserLoginIdpOutputWithContext(ctx context.Context) GetUserLoginIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginIdpOutput)
}

// GetUserLoginIdpArrayInput is an input type that accepts GetUserLoginIdpArray and GetUserLoginIdpArrayOutput values.
// You can construct a concrete instance of `GetUserLoginIdpArrayInput` via:
//
//	GetUserLoginIdpArray{ GetUserLoginIdpArgs{...} }
type GetUserLoginIdpArrayInput interface {
	pulumi.Input

	ToGetUserLoginIdpArrayOutput() GetUserLoginIdpArrayOutput
	ToGetUserLoginIdpArrayOutputWithContext(context.Context) GetUserLoginIdpArrayOutput
}

type GetUserLoginIdpArray []GetUserLoginIdpInput

func (GetUserLoginIdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLoginIdp)(nil)).Elem()
}

func (i GetUserLoginIdpArray) ToGetUserLoginIdpArrayOutput() GetUserLoginIdpArrayOutput {
	return i.ToGetUserLoginIdpArrayOutputWithContext(context.Background())
}

func (i GetUserLoginIdpArray) ToGetUserLoginIdpArrayOutputWithContext(ctx context.Context) GetUserLoginIdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginIdpArrayOutput)
}

type GetUserLoginIdpOutput struct{ *pulumi.OutputState }

func (GetUserLoginIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginIdp)(nil)).Elem()
}

func (o GetUserLoginIdpOutput) ToGetUserLoginIdpOutput() GetUserLoginIdpOutput {
	return o
}

func (o GetUserLoginIdpOutput) ToGetUserLoginIdpOutputWithContext(ctx context.Context) GetUserLoginIdpOutput {
	return o
}

func (o GetUserLoginIdpOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserLoginIdp) *string { return v.ClientType }).(pulumi.StringPtrOutput)
}

func (o GetUserLoginIdpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserLoginIdp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type GetUserLoginIdpArrayOutput struct{ *pulumi.OutputState }

func (GetUserLoginIdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLoginIdp)(nil)).Elem()
}

func (o GetUserLoginIdpArrayOutput) ToGetUserLoginIdpArrayOutput() GetUserLoginIdpArrayOutput {
	return o
}

func (o GetUserLoginIdpArrayOutput) ToGetUserLoginIdpArrayOutputWithContext(ctx context.Context) GetUserLoginIdpArrayOutput {
	return o
}

func (o GetUserLoginIdpArrayOutput) Index(i pulumi.IntInput) GetUserLoginIdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserLoginIdp {
		return vs[0].([]GetUserLoginIdp)[vs[1].(int)]
	}).(GetUserLoginIdpOutput)
}

type GetUserPersonal struct {
	CompanyName *string `pulumi:"companyName"`
	Country     *string `pulumi:"country"`
	FirstName   *string `pulumi:"firstName"`
	LastName    *string `pulumi:"lastName"`
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// GetUserPersonalInput is an input type that accepts GetUserPersonalArgs and GetUserPersonalOutput values.
// You can construct a concrete instance of `GetUserPersonalInput` via:
//
//	GetUserPersonalArgs{...}
type GetUserPersonalInput interface {
	pulumi.Input

	ToGetUserPersonalOutput() GetUserPersonalOutput
	ToGetUserPersonalOutputWithContext(context.Context) GetUserPersonalOutput
}

type GetUserPersonalArgs struct {
	CompanyName pulumi.StringPtrInput `pulumi:"companyName"`
	Country     pulumi.StringPtrInput `pulumi:"country"`
	FirstName   pulumi.StringPtrInput `pulumi:"firstName"`
	LastName    pulumi.StringPtrInput `pulumi:"lastName"`
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (GetUserPersonalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPersonal)(nil)).Elem()
}

func (i GetUserPersonalArgs) ToGetUserPersonalOutput() GetUserPersonalOutput {
	return i.ToGetUserPersonalOutputWithContext(context.Background())
}

func (i GetUserPersonalArgs) ToGetUserPersonalOutputWithContext(ctx context.Context) GetUserPersonalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPersonalOutput)
}

// GetUserPersonalArrayInput is an input type that accepts GetUserPersonalArray and GetUserPersonalArrayOutput values.
// You can construct a concrete instance of `GetUserPersonalArrayInput` via:
//
//	GetUserPersonalArray{ GetUserPersonalArgs{...} }
type GetUserPersonalArrayInput interface {
	pulumi.Input

	ToGetUserPersonalArrayOutput() GetUserPersonalArrayOutput
	ToGetUserPersonalArrayOutputWithContext(context.Context) GetUserPersonalArrayOutput
}

type GetUserPersonalArray []GetUserPersonalInput

func (GetUserPersonalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPersonal)(nil)).Elem()
}

func (i GetUserPersonalArray) ToGetUserPersonalArrayOutput() GetUserPersonalArrayOutput {
	return i.ToGetUserPersonalArrayOutputWithContext(context.Background())
}

func (i GetUserPersonalArray) ToGetUserPersonalArrayOutputWithContext(ctx context.Context) GetUserPersonalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPersonalArrayOutput)
}

type GetUserPersonalOutput struct{ *pulumi.OutputState }

func (GetUserPersonalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPersonal)(nil)).Elem()
}

func (o GetUserPersonalOutput) ToGetUserPersonalOutput() GetUserPersonalOutput {
	return o
}

func (o GetUserPersonalOutput) ToGetUserPersonalOutputWithContext(ctx context.Context) GetUserPersonalOutput {
	return o
}

func (o GetUserPersonalOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserPersonal) *string { return v.CompanyName }).(pulumi.StringPtrOutput)
}

func (o GetUserPersonalOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserPersonal) *string { return v.Country }).(pulumi.StringPtrOutput)
}

func (o GetUserPersonalOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserPersonal) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

func (o GetUserPersonalOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserPersonal) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

func (o GetUserPersonalOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserPersonal) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type GetUserPersonalArrayOutput struct{ *pulumi.OutputState }

func (GetUserPersonalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPersonal)(nil)).Elem()
}

func (o GetUserPersonalArrayOutput) ToGetUserPersonalArrayOutput() GetUserPersonalArrayOutput {
	return o
}

func (o GetUserPersonalArrayOutput) ToGetUserPersonalArrayOutputWithContext(ctx context.Context) GetUserPersonalArrayOutput {
	return o
}

func (o GetUserPersonalArrayOutput) Index(i pulumi.IntInput) GetUserPersonalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserPersonal {
		return vs[0].([]GetUserPersonal)[vs[1].(int)]
	}).(GetUserPersonalOutput)
}

type GetUserShortProfile struct {
	UserName *string `pulumi:"userName"`
}

// GetUserShortProfileInput is an input type that accepts GetUserShortProfileArgs and GetUserShortProfileOutput values.
// You can construct a concrete instance of `GetUserShortProfileInput` via:
//
//	GetUserShortProfileArgs{...}
type GetUserShortProfileInput interface {
	pulumi.Input

	ToGetUserShortProfileOutput() GetUserShortProfileOutput
	ToGetUserShortProfileOutputWithContext(context.Context) GetUserShortProfileOutput
}

type GetUserShortProfileArgs struct {
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetUserShortProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserShortProfile)(nil)).Elem()
}

func (i GetUserShortProfileArgs) ToGetUserShortProfileOutput() GetUserShortProfileOutput {
	return i.ToGetUserShortProfileOutputWithContext(context.Background())
}

func (i GetUserShortProfileArgs) ToGetUserShortProfileOutputWithContext(ctx context.Context) GetUserShortProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserShortProfileOutput)
}

// GetUserShortProfileArrayInput is an input type that accepts GetUserShortProfileArray and GetUserShortProfileArrayOutput values.
// You can construct a concrete instance of `GetUserShortProfileArrayInput` via:
//
//	GetUserShortProfileArray{ GetUserShortProfileArgs{...} }
type GetUserShortProfileArrayInput interface {
	pulumi.Input

	ToGetUserShortProfileArrayOutput() GetUserShortProfileArrayOutput
	ToGetUserShortProfileArrayOutputWithContext(context.Context) GetUserShortProfileArrayOutput
}

type GetUserShortProfileArray []GetUserShortProfileInput

func (GetUserShortProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserShortProfile)(nil)).Elem()
}

func (i GetUserShortProfileArray) ToGetUserShortProfileArrayOutput() GetUserShortProfileArrayOutput {
	return i.ToGetUserShortProfileArrayOutputWithContext(context.Background())
}

func (i GetUserShortProfileArray) ToGetUserShortProfileArrayOutputWithContext(ctx context.Context) GetUserShortProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserShortProfileArrayOutput)
}

type GetUserShortProfileOutput struct{ *pulumi.OutputState }

func (GetUserShortProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserShortProfile)(nil)).Elem()
}

func (o GetUserShortProfileOutput) ToGetUserShortProfileOutput() GetUserShortProfileOutput {
	return o
}

func (o GetUserShortProfileOutput) ToGetUserShortProfileOutputWithContext(ctx context.Context) GetUserShortProfileOutput {
	return o
}

func (o GetUserShortProfileOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserShortProfile) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type GetUserShortProfileArrayOutput struct{ *pulumi.OutputState }

func (GetUserShortProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserShortProfile)(nil)).Elem()
}

func (o GetUserShortProfileArrayOutput) ToGetUserShortProfileArrayOutput() GetUserShortProfileArrayOutput {
	return o
}

func (o GetUserShortProfileArrayOutput) ToGetUserShortProfileArrayOutputWithContext(ctx context.Context) GetUserShortProfileArrayOutput {
	return o
}

func (o GetUserShortProfileArrayOutput) Index(i pulumi.IntInput) GetUserShortProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserShortProfile {
		return vs[0].([]GetUserShortProfile)[vs[1].(int)]
	}).(GetUserShortProfileOutput)
}

type GetUsersUser struct {
	Email         string                     `pulumi:"email"`
	Logins        []GetUsersUserLogin        `pulumi:"logins"`
	Personals     []GetUsersUserPersonal     `pulumi:"personals"`
	Roles         []string                   `pulumi:"roles"`
	ShortProfiles []GetUsersUserShortProfile `pulumi:"shortProfiles"`
	Status        string                     `pulumi:"status"`
	UserId        string                     `pulumi:"userId"`
	UserName      string                     `pulumi:"userName"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	Email         pulumi.StringInput                 `pulumi:"email"`
	Logins        GetUsersUserLoginArrayInput        `pulumi:"logins"`
	Personals     GetUsersUserPersonalArrayInput     `pulumi:"personals"`
	Roles         pulumi.StringArrayInput            `pulumi:"roles"`
	ShortProfiles GetUsersUserShortProfileArrayInput `pulumi:"shortProfiles"`
	Status        pulumi.StringInput                 `pulumi:"status"`
	UserId        pulumi.StringInput                 `pulumi:"userId"`
	UserName      pulumi.StringInput                 `pulumi:"userName"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Logins() GetUsersUserLoginArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserLogin { return v.Logins }).(GetUsersUserLoginArrayOutput)
}

func (o GetUsersUserOutput) Personals() GetUsersUserPersonalArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserPersonal { return v.Personals }).(GetUsersUserPersonalArrayOutput)
}

func (o GetUsersUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

func (o GetUsersUserOutput) ShortProfiles() GetUsersUserShortProfileArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserShortProfile { return v.ShortProfiles }).(GetUsersUserShortProfileArrayOutput)
}

func (o GetUsersUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UserId }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UserName }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

type GetUsersUserLogin struct {
	Credentials []GetUsersUserLoginCredential `pulumi:"credentials"`
	Idps        []GetUsersUserLoginIdp        `pulumi:"idps"`
}

// GetUsersUserLoginInput is an input type that accepts GetUsersUserLoginArgs and GetUsersUserLoginOutput values.
// You can construct a concrete instance of `GetUsersUserLoginInput` via:
//
//	GetUsersUserLoginArgs{...}
type GetUsersUserLoginInput interface {
	pulumi.Input

	ToGetUsersUserLoginOutput() GetUsersUserLoginOutput
	ToGetUsersUserLoginOutputWithContext(context.Context) GetUsersUserLoginOutput
}

type GetUsersUserLoginArgs struct {
	Credentials GetUsersUserLoginCredentialArrayInput `pulumi:"credentials"`
	Idps        GetUsersUserLoginIdpArrayInput        `pulumi:"idps"`
}

func (GetUsersUserLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLogin)(nil)).Elem()
}

func (i GetUsersUserLoginArgs) ToGetUsersUserLoginOutput() GetUsersUserLoginOutput {
	return i.ToGetUsersUserLoginOutputWithContext(context.Background())
}

func (i GetUsersUserLoginArgs) ToGetUsersUserLoginOutputWithContext(ctx context.Context) GetUsersUserLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginOutput)
}

// GetUsersUserLoginArrayInput is an input type that accepts GetUsersUserLoginArray and GetUsersUserLoginArrayOutput values.
// You can construct a concrete instance of `GetUsersUserLoginArrayInput` via:
//
//	GetUsersUserLoginArray{ GetUsersUserLoginArgs{...} }
type GetUsersUserLoginArrayInput interface {
	pulumi.Input

	ToGetUsersUserLoginArrayOutput() GetUsersUserLoginArrayOutput
	ToGetUsersUserLoginArrayOutputWithContext(context.Context) GetUsersUserLoginArrayOutput
}

type GetUsersUserLoginArray []GetUsersUserLoginInput

func (GetUsersUserLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLogin)(nil)).Elem()
}

func (i GetUsersUserLoginArray) ToGetUsersUserLoginArrayOutput() GetUsersUserLoginArrayOutput {
	return i.ToGetUsersUserLoginArrayOutputWithContext(context.Background())
}

func (i GetUsersUserLoginArray) ToGetUsersUserLoginArrayOutputWithContext(ctx context.Context) GetUsersUserLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginArrayOutput)
}

type GetUsersUserLoginOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLogin)(nil)).Elem()
}

func (o GetUsersUserLoginOutput) ToGetUsersUserLoginOutput() GetUsersUserLoginOutput {
	return o
}

func (o GetUsersUserLoginOutput) ToGetUsersUserLoginOutputWithContext(ctx context.Context) GetUsersUserLoginOutput {
	return o
}

func (o GetUsersUserLoginOutput) Credentials() GetUsersUserLoginCredentialArrayOutput {
	return o.ApplyT(func(v GetUsersUserLogin) []GetUsersUserLoginCredential { return v.Credentials }).(GetUsersUserLoginCredentialArrayOutput)
}

func (o GetUsersUserLoginOutput) Idps() GetUsersUserLoginIdpArrayOutput {
	return o.ApplyT(func(v GetUsersUserLogin) []GetUsersUserLoginIdp { return v.Idps }).(GetUsersUserLoginIdpArrayOutput)
}

type GetUsersUserLoginArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLogin)(nil)).Elem()
}

func (o GetUsersUserLoginArrayOutput) ToGetUsersUserLoginArrayOutput() GetUsersUserLoginArrayOutput {
	return o
}

func (o GetUsersUserLoginArrayOutput) ToGetUsersUserLoginArrayOutputWithContext(ctx context.Context) GetUsersUserLoginArrayOutput {
	return o
}

func (o GetUsersUserLoginArrayOutput) Index(i pulumi.IntInput) GetUsersUserLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserLogin {
		return vs[0].([]GetUsersUserLogin)[vs[1].(int)]
	}).(GetUsersUserLoginOutput)
}

type GetUsersUserLoginCredential struct {
	Permissions []string `pulumi:"permissions"`
}

// GetUsersUserLoginCredentialInput is an input type that accepts GetUsersUserLoginCredentialArgs and GetUsersUserLoginCredentialOutput values.
// You can construct a concrete instance of `GetUsersUserLoginCredentialInput` via:
//
//	GetUsersUserLoginCredentialArgs{...}
type GetUsersUserLoginCredentialInput interface {
	pulumi.Input

	ToGetUsersUserLoginCredentialOutput() GetUsersUserLoginCredentialOutput
	ToGetUsersUserLoginCredentialOutputWithContext(context.Context) GetUsersUserLoginCredentialOutput
}

type GetUsersUserLoginCredentialArgs struct {
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (GetUsersUserLoginCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLoginCredential)(nil)).Elem()
}

func (i GetUsersUserLoginCredentialArgs) ToGetUsersUserLoginCredentialOutput() GetUsersUserLoginCredentialOutput {
	return i.ToGetUsersUserLoginCredentialOutputWithContext(context.Background())
}

func (i GetUsersUserLoginCredentialArgs) ToGetUsersUserLoginCredentialOutputWithContext(ctx context.Context) GetUsersUserLoginCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginCredentialOutput)
}

// GetUsersUserLoginCredentialArrayInput is an input type that accepts GetUsersUserLoginCredentialArray and GetUsersUserLoginCredentialArrayOutput values.
// You can construct a concrete instance of `GetUsersUserLoginCredentialArrayInput` via:
//
//	GetUsersUserLoginCredentialArray{ GetUsersUserLoginCredentialArgs{...} }
type GetUsersUserLoginCredentialArrayInput interface {
	pulumi.Input

	ToGetUsersUserLoginCredentialArrayOutput() GetUsersUserLoginCredentialArrayOutput
	ToGetUsersUserLoginCredentialArrayOutputWithContext(context.Context) GetUsersUserLoginCredentialArrayOutput
}

type GetUsersUserLoginCredentialArray []GetUsersUserLoginCredentialInput

func (GetUsersUserLoginCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLoginCredential)(nil)).Elem()
}

func (i GetUsersUserLoginCredentialArray) ToGetUsersUserLoginCredentialArrayOutput() GetUsersUserLoginCredentialArrayOutput {
	return i.ToGetUsersUserLoginCredentialArrayOutputWithContext(context.Background())
}

func (i GetUsersUserLoginCredentialArray) ToGetUsersUserLoginCredentialArrayOutputWithContext(ctx context.Context) GetUsersUserLoginCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginCredentialArrayOutput)
}

type GetUsersUserLoginCredentialOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLoginCredential)(nil)).Elem()
}

func (o GetUsersUserLoginCredentialOutput) ToGetUsersUserLoginCredentialOutput() GetUsersUserLoginCredentialOutput {
	return o
}

func (o GetUsersUserLoginCredentialOutput) ToGetUsersUserLoginCredentialOutputWithContext(ctx context.Context) GetUsersUserLoginCredentialOutput {
	return o
}

func (o GetUsersUserLoginCredentialOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUserLoginCredential) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type GetUsersUserLoginCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLoginCredential)(nil)).Elem()
}

func (o GetUsersUserLoginCredentialArrayOutput) ToGetUsersUserLoginCredentialArrayOutput() GetUsersUserLoginCredentialArrayOutput {
	return o
}

func (o GetUsersUserLoginCredentialArrayOutput) ToGetUsersUserLoginCredentialArrayOutputWithContext(ctx context.Context) GetUsersUserLoginCredentialArrayOutput {
	return o
}

func (o GetUsersUserLoginCredentialArrayOutput) Index(i pulumi.IntInput) GetUsersUserLoginCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserLoginCredential {
		return vs[0].([]GetUsersUserLoginCredential)[vs[1].(int)]
	}).(GetUsersUserLoginCredentialOutput)
}

type GetUsersUserLoginIdp struct {
	ClientType *string `pulumi:"clientType"`
	Id         *string `pulumi:"id"`
}

// GetUsersUserLoginIdpInput is an input type that accepts GetUsersUserLoginIdpArgs and GetUsersUserLoginIdpOutput values.
// You can construct a concrete instance of `GetUsersUserLoginIdpInput` via:
//
//	GetUsersUserLoginIdpArgs{...}
type GetUsersUserLoginIdpInput interface {
	pulumi.Input

	ToGetUsersUserLoginIdpOutput() GetUsersUserLoginIdpOutput
	ToGetUsersUserLoginIdpOutputWithContext(context.Context) GetUsersUserLoginIdpOutput
}

type GetUsersUserLoginIdpArgs struct {
	ClientType pulumi.StringPtrInput `pulumi:"clientType"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
}

func (GetUsersUserLoginIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLoginIdp)(nil)).Elem()
}

func (i GetUsersUserLoginIdpArgs) ToGetUsersUserLoginIdpOutput() GetUsersUserLoginIdpOutput {
	return i.ToGetUsersUserLoginIdpOutputWithContext(context.Background())
}

func (i GetUsersUserLoginIdpArgs) ToGetUsersUserLoginIdpOutputWithContext(ctx context.Context) GetUsersUserLoginIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginIdpOutput)
}

// GetUsersUserLoginIdpArrayInput is an input type that accepts GetUsersUserLoginIdpArray and GetUsersUserLoginIdpArrayOutput values.
// You can construct a concrete instance of `GetUsersUserLoginIdpArrayInput` via:
//
//	GetUsersUserLoginIdpArray{ GetUsersUserLoginIdpArgs{...} }
type GetUsersUserLoginIdpArrayInput interface {
	pulumi.Input

	ToGetUsersUserLoginIdpArrayOutput() GetUsersUserLoginIdpArrayOutput
	ToGetUsersUserLoginIdpArrayOutputWithContext(context.Context) GetUsersUserLoginIdpArrayOutput
}

type GetUsersUserLoginIdpArray []GetUsersUserLoginIdpInput

func (GetUsersUserLoginIdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLoginIdp)(nil)).Elem()
}

func (i GetUsersUserLoginIdpArray) ToGetUsersUserLoginIdpArrayOutput() GetUsersUserLoginIdpArrayOutput {
	return i.ToGetUsersUserLoginIdpArrayOutputWithContext(context.Background())
}

func (i GetUsersUserLoginIdpArray) ToGetUsersUserLoginIdpArrayOutputWithContext(ctx context.Context) GetUsersUserLoginIdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLoginIdpArrayOutput)
}

type GetUsersUserLoginIdpOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLoginIdp)(nil)).Elem()
}

func (o GetUsersUserLoginIdpOutput) ToGetUsersUserLoginIdpOutput() GetUsersUserLoginIdpOutput {
	return o
}

func (o GetUsersUserLoginIdpOutput) ToGetUsersUserLoginIdpOutputWithContext(ctx context.Context) GetUsersUserLoginIdpOutput {
	return o
}

func (o GetUsersUserLoginIdpOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserLoginIdp) *string { return v.ClientType }).(pulumi.StringPtrOutput)
}

func (o GetUsersUserLoginIdpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserLoginIdp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type GetUsersUserLoginIdpArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserLoginIdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLoginIdp)(nil)).Elem()
}

func (o GetUsersUserLoginIdpArrayOutput) ToGetUsersUserLoginIdpArrayOutput() GetUsersUserLoginIdpArrayOutput {
	return o
}

func (o GetUsersUserLoginIdpArrayOutput) ToGetUsersUserLoginIdpArrayOutputWithContext(ctx context.Context) GetUsersUserLoginIdpArrayOutput {
	return o
}

func (o GetUsersUserLoginIdpArrayOutput) Index(i pulumi.IntInput) GetUsersUserLoginIdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserLoginIdp {
		return vs[0].([]GetUsersUserLoginIdp)[vs[1].(int)]
	}).(GetUsersUserLoginIdpOutput)
}

type GetUsersUserPersonal struct {
	CompanyName *string `pulumi:"companyName"`
	Country     *string `pulumi:"country"`
	FirstName   *string `pulumi:"firstName"`
	LastName    *string `pulumi:"lastName"`
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// GetUsersUserPersonalInput is an input type that accepts GetUsersUserPersonalArgs and GetUsersUserPersonalOutput values.
// You can construct a concrete instance of `GetUsersUserPersonalInput` via:
//
//	GetUsersUserPersonalArgs{...}
type GetUsersUserPersonalInput interface {
	pulumi.Input

	ToGetUsersUserPersonalOutput() GetUsersUserPersonalOutput
	ToGetUsersUserPersonalOutputWithContext(context.Context) GetUsersUserPersonalOutput
}

type GetUsersUserPersonalArgs struct {
	CompanyName pulumi.StringPtrInput `pulumi:"companyName"`
	Country     pulumi.StringPtrInput `pulumi:"country"`
	FirstName   pulumi.StringPtrInput `pulumi:"firstName"`
	LastName    pulumi.StringPtrInput `pulumi:"lastName"`
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (GetUsersUserPersonalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPersonal)(nil)).Elem()
}

func (i GetUsersUserPersonalArgs) ToGetUsersUserPersonalOutput() GetUsersUserPersonalOutput {
	return i.ToGetUsersUserPersonalOutputWithContext(context.Background())
}

func (i GetUsersUserPersonalArgs) ToGetUsersUserPersonalOutputWithContext(ctx context.Context) GetUsersUserPersonalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPersonalOutput)
}

// GetUsersUserPersonalArrayInput is an input type that accepts GetUsersUserPersonalArray and GetUsersUserPersonalArrayOutput values.
// You can construct a concrete instance of `GetUsersUserPersonalArrayInput` via:
//
//	GetUsersUserPersonalArray{ GetUsersUserPersonalArgs{...} }
type GetUsersUserPersonalArrayInput interface {
	pulumi.Input

	ToGetUsersUserPersonalArrayOutput() GetUsersUserPersonalArrayOutput
	ToGetUsersUserPersonalArrayOutputWithContext(context.Context) GetUsersUserPersonalArrayOutput
}

type GetUsersUserPersonalArray []GetUsersUserPersonalInput

func (GetUsersUserPersonalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPersonal)(nil)).Elem()
}

func (i GetUsersUserPersonalArray) ToGetUsersUserPersonalArrayOutput() GetUsersUserPersonalArrayOutput {
	return i.ToGetUsersUserPersonalArrayOutputWithContext(context.Background())
}

func (i GetUsersUserPersonalArray) ToGetUsersUserPersonalArrayOutputWithContext(ctx context.Context) GetUsersUserPersonalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPersonalArrayOutput)
}

type GetUsersUserPersonalOutput struct{ *pulumi.OutputState }

func (GetUsersUserPersonalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPersonal)(nil)).Elem()
}

func (o GetUsersUserPersonalOutput) ToGetUsersUserPersonalOutput() GetUsersUserPersonalOutput {
	return o
}

func (o GetUsersUserPersonalOutput) ToGetUsersUserPersonalOutputWithContext(ctx context.Context) GetUsersUserPersonalOutput {
	return o
}

func (o GetUsersUserPersonalOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserPersonal) *string { return v.CompanyName }).(pulumi.StringPtrOutput)
}

func (o GetUsersUserPersonalOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserPersonal) *string { return v.Country }).(pulumi.StringPtrOutput)
}

func (o GetUsersUserPersonalOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserPersonal) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

func (o GetUsersUserPersonalOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserPersonal) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

func (o GetUsersUserPersonalOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserPersonal) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type GetUsersUserPersonalArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserPersonalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPersonal)(nil)).Elem()
}

func (o GetUsersUserPersonalArrayOutput) ToGetUsersUserPersonalArrayOutput() GetUsersUserPersonalArrayOutput {
	return o
}

func (o GetUsersUserPersonalArrayOutput) ToGetUsersUserPersonalArrayOutputWithContext(ctx context.Context) GetUsersUserPersonalArrayOutput {
	return o
}

func (o GetUsersUserPersonalArrayOutput) Index(i pulumi.IntInput) GetUsersUserPersonalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserPersonal {
		return vs[0].([]GetUsersUserPersonal)[vs[1].(int)]
	}).(GetUsersUserPersonalOutput)
}

type GetUsersUserShortProfile struct {
	UserName *string `pulumi:"userName"`
}

// GetUsersUserShortProfileInput is an input type that accepts GetUsersUserShortProfileArgs and GetUsersUserShortProfileOutput values.
// You can construct a concrete instance of `GetUsersUserShortProfileInput` via:
//
//	GetUsersUserShortProfileArgs{...}
type GetUsersUserShortProfileInput interface {
	pulumi.Input

	ToGetUsersUserShortProfileOutput() GetUsersUserShortProfileOutput
	ToGetUsersUserShortProfileOutputWithContext(context.Context) GetUsersUserShortProfileOutput
}

type GetUsersUserShortProfileArgs struct {
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetUsersUserShortProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserShortProfile)(nil)).Elem()
}

func (i GetUsersUserShortProfileArgs) ToGetUsersUserShortProfileOutput() GetUsersUserShortProfileOutput {
	return i.ToGetUsersUserShortProfileOutputWithContext(context.Background())
}

func (i GetUsersUserShortProfileArgs) ToGetUsersUserShortProfileOutputWithContext(ctx context.Context) GetUsersUserShortProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserShortProfileOutput)
}

// GetUsersUserShortProfileArrayInput is an input type that accepts GetUsersUserShortProfileArray and GetUsersUserShortProfileArrayOutput values.
// You can construct a concrete instance of `GetUsersUserShortProfileArrayInput` via:
//
//	GetUsersUserShortProfileArray{ GetUsersUserShortProfileArgs{...} }
type GetUsersUserShortProfileArrayInput interface {
	pulumi.Input

	ToGetUsersUserShortProfileArrayOutput() GetUsersUserShortProfileArrayOutput
	ToGetUsersUserShortProfileArrayOutputWithContext(context.Context) GetUsersUserShortProfileArrayOutput
}

type GetUsersUserShortProfileArray []GetUsersUserShortProfileInput

func (GetUsersUserShortProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserShortProfile)(nil)).Elem()
}

func (i GetUsersUserShortProfileArray) ToGetUsersUserShortProfileArrayOutput() GetUsersUserShortProfileArrayOutput {
	return i.ToGetUsersUserShortProfileArrayOutputWithContext(context.Background())
}

func (i GetUsersUserShortProfileArray) ToGetUsersUserShortProfileArrayOutputWithContext(ctx context.Context) GetUsersUserShortProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserShortProfileArrayOutput)
}

type GetUsersUserShortProfileOutput struct{ *pulumi.OutputState }

func (GetUsersUserShortProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserShortProfile)(nil)).Elem()
}

func (o GetUsersUserShortProfileOutput) ToGetUsersUserShortProfileOutput() GetUsersUserShortProfileOutput {
	return o
}

func (o GetUsersUserShortProfileOutput) ToGetUsersUserShortProfileOutputWithContext(ctx context.Context) GetUsersUserShortProfileOutput {
	return o
}

func (o GetUsersUserShortProfileOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUserShortProfile) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type GetUsersUserShortProfileArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserShortProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserShortProfile)(nil)).Elem()
}

func (o GetUsersUserShortProfileArrayOutput) ToGetUsersUserShortProfileArrayOutput() GetUsersUserShortProfileArrayOutput {
	return o
}

func (o GetUsersUserShortProfileArrayOutput) ToGetUsersUserShortProfileArrayOutputWithContext(ctx context.Context) GetUsersUserShortProfileArrayOutput {
	return o
}

func (o GetUsersUserShortProfileArrayOutput) Index(i pulumi.IntInput) GetUsersUserShortProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserShortProfile {
		return vs[0].([]GetUsersUserShortProfile)[vs[1].(int)]
	}).(GetUsersUserShortProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountBuildInput)(nil)).Elem(), AccountBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountBuildArrayInput)(nil)).Elem(), AccountBuildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountLimitInput)(nil)).Elem(), AccountLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountLimitArrayInput)(nil)).Elem(), AccountLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecInput)(nil)).Elem(), ContextSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecPtrInput)(nil)).Elem(), ContextSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecConfigInput)(nil)).Elem(), ContextSpecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecConfigPtrInput)(nil)).Elem(), ContextSpecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecSecretInput)(nil)).Elem(), ContextSpecSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecSecretPtrInput)(nil)).Elem(), ContextSpecSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecSecretyamlInput)(nil)).Elem(), ContextSpecSecretyamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecSecretyamlPtrInput)(nil)).Elem(), ContextSpecSecretyamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefInput)(nil)).Elem(), ContextSpecStorageazurefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefPtrInput)(nil)).Elem(), ContextSpecStorageazurefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefDataInput)(nil)).Elem(), ContextSpecStorageazurefDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefDataPtrInput)(nil)).Elem(), ContextSpecStorageazurefDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefDataAuthInput)(nil)).Elem(), ContextSpecStorageazurefDataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorageazurefDataAuthPtrInput)(nil)).Elem(), ContextSpecStorageazurefDataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcInput)(nil)).Elem(), ContextSpecStoragegcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcPtrInput)(nil)).Elem(), ContextSpecStoragegcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcDataInput)(nil)).Elem(), ContextSpecStoragegcDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcDataPtrInput)(nil)).Elem(), ContextSpecStoragegcDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcDataAuthInput)(nil)).Elem(), ContextSpecStoragegcDataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStoragegcDataAuthPtrInput)(nil)).Elem(), ContextSpecStoragegcDataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3Input)(nil)).Elem(), ContextSpecStorages3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3PtrInput)(nil)).Elem(), ContextSpecStorages3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3DataInput)(nil)).Elem(), ContextSpecStorages3DataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3DataPtrInput)(nil)).Elem(), ContextSpecStorages3DataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3DataAuthInput)(nil)).Elem(), ContextSpecStorages3DataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecStorages3DataAuthPtrInput)(nil)).Elem(), ContextSpecStorages3DataAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecYamlInput)(nil)).Elem(), ContextSpecYamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextSpecYamlPtrInput)(nil)).Elem(), ContextSpecYamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecInput)(nil)).Elem(), PipelineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecPtrInput)(nil)).Elem(), PipelineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecOptionsInput)(nil)).Elem(), PipelineSpecOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecOptionsPtrInput)(nil)).Elem(), PipelineSpecOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecRuntimeEnvironmentInput)(nil)).Elem(), PipelineSpecRuntimeEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecRuntimeEnvironmentArrayInput)(nil)).Elem(), PipelineSpecRuntimeEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecSpecTemplateInput)(nil)).Elem(), PipelineSpecSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecSpecTemplateArrayInput)(nil)).Elem(), PipelineSpecSpecTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTerminationPolicyInput)(nil)).Elem(), PipelineSpecTerminationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTerminationPolicyPtrInput)(nil)).Elem(), PipelineSpecTerminationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTerminationPolicyOnCreateBranchInput)(nil)).Elem(), PipelineSpecTerminationPolicyOnCreateBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTerminationPolicyOnCreateBranchPtrInput)(nil)).Elem(), PipelineSpecTerminationPolicyOnCreateBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerInput)(nil)).Elem(), PipelineSpecTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerArrayInput)(nil)).Elem(), PipelineSpecTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerOptionInput)(nil)).Elem(), PipelineSpecTriggerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerOptionArrayInput)(nil)).Elem(), PipelineSpecTriggerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerRuntimeEnvironmentInput)(nil)).Elem(), PipelineSpecTriggerRuntimeEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSpecTriggerRuntimeEnvironmentArrayInput)(nil)).Elem(), PipelineSpecTriggerRuntimeEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecInput)(nil)).Elem(), RegistrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecPtrInput)(nil)).Elem(), RegistrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecAcrInput)(nil)).Elem(), RegistrySpecAcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecAcrPtrInput)(nil)).Elem(), RegistrySpecAcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecBintrayInput)(nil)).Elem(), RegistrySpecBintrayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecBintrayPtrInput)(nil)).Elem(), RegistrySpecBintrayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecDockerhubInput)(nil)).Elem(), RegistrySpecDockerhubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecDockerhubPtrInput)(nil)).Elem(), RegistrySpecDockerhubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecEcrInput)(nil)).Elem(), RegistrySpecEcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecEcrPtrInput)(nil)).Elem(), RegistrySpecEcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecGarInput)(nil)).Elem(), RegistrySpecGarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecGarPtrInput)(nil)).Elem(), RegistrySpecGarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecGcrInput)(nil)).Elem(), RegistrySpecGcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecGcrPtrInput)(nil)).Elem(), RegistrySpecGcrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecOtherInput)(nil)).Elem(), RegistrySpecOtherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrySpecOtherPtrInput)(nil)).Elem(), RegistrySpecOtherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepTypesVersionInput)(nil)).Elem(), StepTypesVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepTypesVersionArrayInput)(nil)).Elem(), StepTypesVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginInput)(nil)).Elem(), UserLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginArrayInput)(nil)).Elem(), UserLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPersonalInput)(nil)).Elem(), UserPersonalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPersonalPtrInput)(nil)).Elem(), UserPersonalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserShortProfileInput)(nil)).Elem(), UserShortProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserShortProfileArrayInput)(nil)).Elem(), UserShortProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCurrentAccountUserInput)(nil)).Elem(), GetCurrentAccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCurrentAccountUserArrayInput)(nil)).Elem(), GetCurrentAccountUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStepTypesVersionInput)(nil)).Elem(), GetStepTypesVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStepTypesVersionArrayInput)(nil)).Elem(), GetStepTypesVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginInput)(nil)).Elem(), GetUserLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginArrayInput)(nil)).Elem(), GetUserLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginCredentialInput)(nil)).Elem(), GetUserLoginCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginCredentialArrayInput)(nil)).Elem(), GetUserLoginCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginIdpInput)(nil)).Elem(), GetUserLoginIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginIdpArrayInput)(nil)).Elem(), GetUserLoginIdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPersonalInput)(nil)).Elem(), GetUserPersonalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPersonalArrayInput)(nil)).Elem(), GetUserPersonalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserShortProfileInput)(nil)).Elem(), GetUserShortProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserShortProfileArrayInput)(nil)).Elem(), GetUserShortProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginInput)(nil)).Elem(), GetUsersUserLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginArrayInput)(nil)).Elem(), GetUsersUserLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginCredentialInput)(nil)).Elem(), GetUsersUserLoginCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginCredentialArrayInput)(nil)).Elem(), GetUsersUserLoginCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginIdpInput)(nil)).Elem(), GetUsersUserLoginIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLoginIdpArrayInput)(nil)).Elem(), GetUsersUserLoginIdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPersonalInput)(nil)).Elem(), GetUsersUserPersonalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPersonalArrayInput)(nil)).Elem(), GetUsersUserPersonalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserShortProfileInput)(nil)).Elem(), GetUsersUserShortProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserShortProfileArrayInput)(nil)).Elem(), GetUsersUserShortProfileArray{})
	pulumi.RegisterOutputType(AccountBuildOutput{})
	pulumi.RegisterOutputType(AccountBuildArrayOutput{})
	pulumi.RegisterOutputType(AccountLimitOutput{})
	pulumi.RegisterOutputType(AccountLimitArrayOutput{})
	pulumi.RegisterOutputType(ContextSpecOutput{})
	pulumi.RegisterOutputType(ContextSpecPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecConfigOutput{})
	pulumi.RegisterOutputType(ContextSpecConfigPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecSecretOutput{})
	pulumi.RegisterOutputType(ContextSpecSecretPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecSecretyamlOutput{})
	pulumi.RegisterOutputType(ContextSpecSecretyamlPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefDataOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefDataPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefDataAuthOutput{})
	pulumi.RegisterOutputType(ContextSpecStorageazurefDataAuthPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcDataOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcDataPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcDataAuthOutput{})
	pulumi.RegisterOutputType(ContextSpecStoragegcDataAuthPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorages3Output{})
	pulumi.RegisterOutputType(ContextSpecStorages3PtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorages3DataOutput{})
	pulumi.RegisterOutputType(ContextSpecStorages3DataPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecStorages3DataAuthOutput{})
	pulumi.RegisterOutputType(ContextSpecStorages3DataAuthPtrOutput{})
	pulumi.RegisterOutputType(ContextSpecYamlOutput{})
	pulumi.RegisterOutputType(ContextSpecYamlPtrOutput{})
	pulumi.RegisterOutputType(PipelineSpecOutput{})
	pulumi.RegisterOutputType(PipelineSpecPtrOutput{})
	pulumi.RegisterOutputType(PipelineSpecOptionsOutput{})
	pulumi.RegisterOutputType(PipelineSpecOptionsPtrOutput{})
	pulumi.RegisterOutputType(PipelineSpecRuntimeEnvironmentOutput{})
	pulumi.RegisterOutputType(PipelineSpecRuntimeEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(PipelineSpecSpecTemplateOutput{})
	pulumi.RegisterOutputType(PipelineSpecSpecTemplateArrayOutput{})
	pulumi.RegisterOutputType(PipelineSpecTerminationPolicyOutput{})
	pulumi.RegisterOutputType(PipelineSpecTerminationPolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelineSpecTerminationPolicyOnCreateBranchOutput{})
	pulumi.RegisterOutputType(PipelineSpecTerminationPolicyOnCreateBranchPtrOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerArrayOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerOptionOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerOptionArrayOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerRuntimeEnvironmentOutput{})
	pulumi.RegisterOutputType(PipelineSpecTriggerRuntimeEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(RegistrySpecOutput{})
	pulumi.RegisterOutputType(RegistrySpecPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecAcrOutput{})
	pulumi.RegisterOutputType(RegistrySpecAcrPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecBintrayOutput{})
	pulumi.RegisterOutputType(RegistrySpecBintrayPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecDockerhubOutput{})
	pulumi.RegisterOutputType(RegistrySpecDockerhubPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecEcrOutput{})
	pulumi.RegisterOutputType(RegistrySpecEcrPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecGarOutput{})
	pulumi.RegisterOutputType(RegistrySpecGarPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecGcrOutput{})
	pulumi.RegisterOutputType(RegistrySpecGcrPtrOutput{})
	pulumi.RegisterOutputType(RegistrySpecOtherOutput{})
	pulumi.RegisterOutputType(RegistrySpecOtherPtrOutput{})
	pulumi.RegisterOutputType(StepTypesVersionOutput{})
	pulumi.RegisterOutputType(StepTypesVersionArrayOutput{})
	pulumi.RegisterOutputType(UserLoginOutput{})
	pulumi.RegisterOutputType(UserLoginArrayOutput{})
	pulumi.RegisterOutputType(UserPersonalOutput{})
	pulumi.RegisterOutputType(UserPersonalPtrOutput{})
	pulumi.RegisterOutputType(UserShortProfileOutput{})
	pulumi.RegisterOutputType(UserShortProfileArrayOutput{})
	pulumi.RegisterOutputType(GetCurrentAccountUserOutput{})
	pulumi.RegisterOutputType(GetCurrentAccountUserArrayOutput{})
	pulumi.RegisterOutputType(GetStepTypesVersionOutput{})
	pulumi.RegisterOutputType(GetStepTypesVersionArrayOutput{})
	pulumi.RegisterOutputType(GetUserLoginOutput{})
	pulumi.RegisterOutputType(GetUserLoginArrayOutput{})
	pulumi.RegisterOutputType(GetUserLoginCredentialOutput{})
	pulumi.RegisterOutputType(GetUserLoginCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetUserLoginIdpOutput{})
	pulumi.RegisterOutputType(GetUserLoginIdpArrayOutput{})
	pulumi.RegisterOutputType(GetUserPersonalOutput{})
	pulumi.RegisterOutputType(GetUserPersonalArrayOutput{})
	pulumi.RegisterOutputType(GetUserShortProfileOutput{})
	pulumi.RegisterOutputType(GetUserShortProfileArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginCredentialOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginIdpOutput{})
	pulumi.RegisterOutputType(GetUsersUserLoginIdpArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserPersonalOutput{})
	pulumi.RegisterOutputType(GetUsersUserPersonalArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserShortProfileOutput{})
	pulumi.RegisterOutputType(GetUsersUserShortProfileArrayOutput{})
}
