// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codefresh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # User resource
//
// Use this resource to create a new user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := codefresh.NewAccount(ctx, "test", &codefresh.AccountArgs{
//				Limits: AccountLimitArray{
//					&AccountLimitArgs{
//						Collaborators:      pulumi.Int(25),
//						DataRetentionWeeks: pulumi.Int(5),
//					},
//				},
//				Builds: AccountBuildArray{
//					&AccountBuildArgs{
//						Parallel: pulumi.Int(2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = codefresh.NewUser(ctx, "new", &codefresh.UserArgs{
//				Email:    pulumi.String("<EMAIL>"),
//				UserName: pulumi.String("<USER>"),
//				Activate: pulumi.Bool(true),
//				Roles: pulumi.StringArray{
//					pulumi.String("Admin"),
//					pulumi.String("User"),
//				},
//				Logins: UserLoginArray{
//					&UserLoginArgs{
//						IdpId: pulumi.Any(data.Codefresh_idps.Idp_azure.Id),
//						Sso:   pulumi.Bool(true),
//					},
//					&UserLoginArgs{
//						IdpId: pulumi.Any(data.Codefresh_idps.Local.Id),
//					},
//				},
//				Personal: &UserPersonalArgs{
//					FirstName: pulumi.String("John"),
//					LastName:  pulumi.String("Smith"),
//				},
//				Accounts: pulumi.StringArray{
//					test.ID(),
//					pulumi.String("59009117c102763beda7ce71"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import codefresh:index/user:User new xxxxxxxxxxxxxxxxxxx
//
// ```
type User struct {
	pulumi.CustomResourceState

	// A list of user roles. Possible values - `Admin`, `User`.
	Accounts pulumi.StringArrayOutput `pulumi:"accounts"`
	// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// A new user email.
	Email pulumi.StringOutput `pulumi:"email"`
	// A collection of `login` blocks as documented below.
	Logins UserLoginArrayOutput `pulumi:"logins"`
	// A collection of `personal` blocks as documented below.
	Personal      UserPersonalPtrOutput       `pulumi:"personal"`
	Roles         pulumi.StringArrayOutput    `pulumi:"roles"`
	ShortProfiles UserShortProfileArrayOutput `pulumi:"shortProfiles"`
	Status        pulumi.StringOutput         `pulumi:"status"`
	// The new user name.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accounts == nil {
		return nil, errors.New("invalid value for required argument 'Accounts'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource User
	err := ctx.RegisterResource("codefresh:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("codefresh:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// A list of user roles. Possible values - `Admin`, `User`.
	Accounts []string `pulumi:"accounts"`
	// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
	Activate *bool `pulumi:"activate"`
	// A new user email.
	Email *string `pulumi:"email"`
	// A collection of `login` blocks as documented below.
	Logins []UserLogin `pulumi:"logins"`
	// A collection of `personal` blocks as documented below.
	Personal      *UserPersonal      `pulumi:"personal"`
	Roles         []string           `pulumi:"roles"`
	ShortProfiles []UserShortProfile `pulumi:"shortProfiles"`
	Status        *string            `pulumi:"status"`
	// The new user name.
	UserName *string `pulumi:"userName"`
}

type UserState struct {
	// A list of user roles. Possible values - `Admin`, `User`.
	Accounts pulumi.StringArrayInput
	// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
	Activate pulumi.BoolPtrInput
	// A new user email.
	Email pulumi.StringPtrInput
	// A collection of `login` blocks as documented below.
	Logins UserLoginArrayInput
	// A collection of `personal` blocks as documented below.
	Personal      UserPersonalPtrInput
	Roles         pulumi.StringArrayInput
	ShortProfiles UserShortProfileArrayInput
	Status        pulumi.StringPtrInput
	// The new user name.
	UserName pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// A list of user roles. Possible values - `Admin`, `User`.
	Accounts []string `pulumi:"accounts"`
	// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
	Activate *bool `pulumi:"activate"`
	// A new user email.
	Email string `pulumi:"email"`
	// A collection of `login` blocks as documented below.
	Logins []UserLogin `pulumi:"logins"`
	// A collection of `personal` blocks as documented below.
	Personal *UserPersonal `pulumi:"personal"`
	Roles    []string      `pulumi:"roles"`
	// The new user name.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// A list of user roles. Possible values - `Admin`, `User`.
	Accounts pulumi.StringArrayInput
	// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
	Activate pulumi.BoolPtrInput
	// A new user email.
	Email pulumi.StringInput
	// A collection of `login` blocks as documented below.
	Logins UserLoginArrayInput
	// A collection of `personal` blocks as documented below.
	Personal UserPersonalPtrInput
	Roles    pulumi.StringArrayInput
	// The new user name.
	UserName pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// A list of user roles. Possible values - `Admin`, `User`.
func (o UserOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Accounts }).(pulumi.StringArrayOutput)
}

// Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
func (o UserOutput) Activate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Activate }).(pulumi.BoolPtrOutput)
}

// A new user email.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// A collection of `login` blocks as documented below.
func (o UserOutput) Logins() UserLoginArrayOutput {
	return o.ApplyT(func(v *User) UserLoginArrayOutput { return v.Logins }).(UserLoginArrayOutput)
}

// A collection of `personal` blocks as documented below.
func (o UserOutput) Personal() UserPersonalPtrOutput {
	return o.ApplyT(func(v *User) UserPersonalPtrOutput { return v.Personal }).(UserPersonalPtrOutput)
}

func (o UserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

func (o UserOutput) ShortProfiles() UserShortProfileArrayOutput {
	return o.ApplyT(func(v *User) UserShortProfileArrayOutput { return v.ShortProfiles }).(UserShortProfileArrayOutput)
}

func (o UserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The new user name.
func (o UserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
