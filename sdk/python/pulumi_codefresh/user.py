# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 accounts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 email: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 activate: Optional[pulumi.Input[bool]] = None,
                 logins: Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]] = None,
                 personal: Optional[pulumi.Input['UserPersonalArgs']] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] accounts: A list of user roles. Possible values - `Admin`, `User`.
        :param pulumi.Input[str] email: A new user email.
        :param pulumi.Input[str] user_name: The new user name.
        :param pulumi.Input[bool] activate: Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        :param pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]] logins: A collection of `login` blocks as documented below.
        :param pulumi.Input['UserPersonalArgs'] personal: A collection of `personal` blocks as documented below.
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "user_name", user_name)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if logins is not None:
            pulumi.set(__self__, "logins", logins)
        if personal is not None:
            pulumi.set(__self__, "personal", personal)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of user roles. Possible values - `Admin`, `User`.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        A new user email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The new user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def logins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]]:
        """
        A collection of `login` blocks as documented below.
        """
        return pulumi.get(self, "logins")

    @logins.setter
    def logins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]]):
        pulumi.set(self, "logins", value)

    @property
    @pulumi.getter
    def personal(self) -> Optional[pulumi.Input['UserPersonalArgs']]:
        """
        A collection of `personal` blocks as documented below.
        """
        return pulumi.get(self, "personal")

    @personal.setter
    def personal(self, value: Optional[pulumi.Input['UserPersonalArgs']]):
        pulumi.set(self, "personal", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 logins: Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]] = None,
                 personal: Optional[pulumi.Input['UserPersonalArgs']] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 short_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['UserShortProfileArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] accounts: A list of user roles. Possible values - `Admin`, `User`.
        :param pulumi.Input[bool] activate: Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        :param pulumi.Input[str] email: A new user email.
        :param pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]] logins: A collection of `login` blocks as documented below.
        :param pulumi.Input['UserPersonalArgs'] personal: A collection of `personal` blocks as documented below.
        :param pulumi.Input[str] user_name: The new user name.
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if logins is not None:
            pulumi.set(__self__, "logins", logins)
        if personal is not None:
            pulumi.set(__self__, "personal", personal)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if short_profiles is not None:
            pulumi.set(__self__, "short_profiles", short_profiles)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of user roles. Possible values - `Admin`, `User`.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        A new user email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def logins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]]:
        """
        A collection of `login` blocks as documented below.
        """
        return pulumi.get(self, "logins")

    @logins.setter
    def logins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLoginArgs']]]]):
        pulumi.set(self, "logins", value)

    @property
    @pulumi.getter
    def personal(self) -> Optional[pulumi.Input['UserPersonalArgs']]:
        """
        A collection of `personal` blocks as documented below.
        """
        return pulumi.get(self, "personal")

    @personal.setter
    def personal(self, value: Optional[pulumi.Input['UserPersonalArgs']]):
        pulumi.set(self, "personal", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shortProfiles")
    def short_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserShortProfileArgs']]]]:
        return pulumi.get(self, "short_profiles")

    @short_profiles.setter
    def short_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserShortProfileArgs']]]]):
        pulumi.set(self, "short_profiles", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The new user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 logins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLoginArgs']]]]] = None,
                 personal: Optional[pulumi.Input[pulumi.InputType['UserPersonalArgs']]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # User resource

        Use this resource to create a new user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test = codefresh.Account("test",
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )],
            builds=[codefresh.AccountBuildArgs(
                parallel=2,
            )])
        new = codefresh.User("new",
            email="<EMAIL>",
            user_name="<USER>",
            activate=True,
            roles=[
                "Admin",
                "User",
            ],
            logins=[
                codefresh.UserLoginArgs(
                    idp_id=data["codefresh_idps"]["idp_azure"]["id"],
                    sso=True,
                ),
                codefresh.UserLoginArgs(
                    idp_id=data["codefresh_idps"]["local"]["id"],
                ),
            ],
            personal=codefresh.UserPersonalArgs(
                first_name="John",
                last_name="Smith",
            ),
            accounts=[
                test.id,
                "59009117c102763beda7ce71",
            ])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/user:User new xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] accounts: A list of user roles. Possible values - `Admin`, `User`.
        :param pulumi.Input[bool] activate: Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        :param pulumi.Input[str] email: A new user email.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLoginArgs']]]] logins: A collection of `login` blocks as documented below.
        :param pulumi.Input[pulumi.InputType['UserPersonalArgs']] personal: A collection of `personal` blocks as documented below.
        :param pulumi.Input[str] user_name: The new user name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # User resource

        Use this resource to create a new user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test = codefresh.Account("test",
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )],
            builds=[codefresh.AccountBuildArgs(
                parallel=2,
            )])
        new = codefresh.User("new",
            email="<EMAIL>",
            user_name="<USER>",
            activate=True,
            roles=[
                "Admin",
                "User",
            ],
            logins=[
                codefresh.UserLoginArgs(
                    idp_id=data["codefresh_idps"]["idp_azure"]["id"],
                    sso=True,
                ),
                codefresh.UserLoginArgs(
                    idp_id=data["codefresh_idps"]["local"]["id"],
                ),
            ],
            personal=codefresh.UserPersonalArgs(
                first_name="John",
                last_name="Smith",
            ),
            accounts=[
                test.id,
                "59009117c102763beda7ce71",
            ])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/user:User new xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 logins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLoginArgs']]]]] = None,
                 personal: Optional[pulumi.Input[pulumi.InputType['UserPersonalArgs']]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if accounts is None and not opts.urn:
                raise TypeError("Missing required property 'accounts'")
            __props__.__dict__["accounts"] = accounts
            __props__.__dict__["activate"] = activate
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["logins"] = logins
            __props__.__dict__["personal"] = personal
            __props__.__dict__["roles"] = roles
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["short_profiles"] = None
            __props__.__dict__["status"] = None
        super(User, __self__).__init__(
            'codefresh:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            email: Optional[pulumi.Input[str]] = None,
            logins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLoginArgs']]]]] = None,
            personal: Optional[pulumi.Input[pulumi.InputType['UserPersonalArgs']]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            short_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserShortProfileArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] accounts: A list of user roles. Possible values - `Admin`, `User`.
        :param pulumi.Input[bool] activate: Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        :param pulumi.Input[str] email: A new user email.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLoginArgs']]]] logins: A collection of `login` blocks as documented below.
        :param pulumi.Input[pulumi.InputType['UserPersonalArgs']] personal: A collection of `personal` blocks as documented below.
        :param pulumi.Input[str] user_name: The new user name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["activate"] = activate
        __props__.__dict__["email"] = email
        __props__.__dict__["logins"] = logins
        __props__.__dict__["personal"] = personal
        __props__.__dict__["roles"] = roles
        __props__.__dict__["short_profiles"] = short_profiles
        __props__.__dict__["status"] = status
        __props__.__dict__["user_name"] = user_name
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of user roles. Possible values - `Admin`, `User`.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        A new user email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def logins(self) -> pulumi.Output[Optional[Sequence['outputs.UserLogin']]]:
        """
        A collection of `login` blocks as documented below.
        """
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter
    def personal(self) -> pulumi.Output[Optional['outputs.UserPersonal']]:
        """
        A collection of `personal` blocks as documented below.
        """
        return pulumi.get(self, "personal")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shortProfiles")
    def short_profiles(self) -> pulumi.Output[Sequence['outputs.UserShortProfile']]:
        return pulumi.get(self, "short_profiles")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        The new user name.
        """
        return pulumi.get(self, "user_name")

