# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PermissionArgs', 'Permission']

@pulumi.input_type
class PermissionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 team: pulumi.Input[str],
                 _id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Permission resource.
        :param pulumi.Input[str] action: Action to be allowed. Possible values:
               - __create__
               - __read__
               - __update__
               - __delete__
               - __run__ (Only valid for `pipeline` resource)
               - __approve__ (Only valid for `pipeline` resource)
               - __debug__ (Only valid for `pipeline` resource)
        :param pulumi.Input[str] resource: The type of resource the permission applies to. Possible values:
               - __pipeline__
               - __cluster__
        :param pulumi.Input[str] team: The Id of the team the permissions apply to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The effective tags to apply the permission. It supports 2 custom tags:
               - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
               - __*__ (the star character) means all tags.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "team", team)
        if _id is not None:
            pulumi.set(__self__, "_id", _id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action to be allowed. Possible values:
        - __create__
        - __read__
        - __update__
        - __delete__
        - __run__ (Only valid for `pipeline` resource)
        - __approve__ (Only valid for `pipeline` resource)
        - __debug__ (Only valid for `pipeline` resource)
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        The type of resource the permission applies to. Possible values:
        - __pipeline__
        - __cluster__
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[str]:
        """
        The Id of the team the permissions apply to.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[str]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def _id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "_id")

    @_id.setter
    def _id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The effective tags to apply the permission. It supports 2 custom tags:
        - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
        - __*__ (the star character) means all tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PermissionState:
    def __init__(__self__, *,
                 _id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Permission resources.
        :param pulumi.Input[str] action: Action to be allowed. Possible values:
               - __create__
               - __read__
               - __update__
               - __delete__
               - __run__ (Only valid for `pipeline` resource)
               - __approve__ (Only valid for `pipeline` resource)
               - __debug__ (Only valid for `pipeline` resource)
        :param pulumi.Input[str] resource: The type of resource the permission applies to. Possible values:
               - __pipeline__
               - __cluster__
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The effective tags to apply the permission. It supports 2 custom tags:
               - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
               - __*__ (the star character) means all tags.
        :param pulumi.Input[str] team: The Id of the team the permissions apply to.
        """
        if _id is not None:
            pulumi.set(__self__, "_id", _id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if team is not None:
            pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter
    def _id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "_id")

    @_id.setter
    def _id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be allowed. Possible values:
        - __create__
        - __read__
        - __update__
        - __delete__
        - __run__ (Only valid for `pipeline` resource)
        - __approve__ (Only valid for `pipeline` resource)
        - __debug__ (Only valid for `pipeline` resource)
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The type of resource the permission applies to. Possible values:
        - __pipeline__
        - __cluster__
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The effective tags to apply the permission. It supports 2 custom tags:
        - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
        - __*__ (the star character) means all tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of the team the permissions apply to.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team", value)


class Permission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 _id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # resource Permission

        Permission are used to setup access control and allow to define which teams have access to which clusters and pipelines based on tags
        See the [documentation](https://codefresh.io/docs/docs/administration/access-control/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        developers_team = codefresh.Team("developersTeam", users=[
            "5efc3cb6355c6647041b6e49",
            "59009221c102763beda7cf04",
        ])
        developers_permission = codefresh.Permission("developersPermission",
            team=developers_team.id,
            resource="pipeline",
            action="run",
            tags=[
                "demo",
                "test",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to be allowed. Possible values:
               - __create__
               - __read__
               - __update__
               - __delete__
               - __run__ (Only valid for `pipeline` resource)
               - __approve__ (Only valid for `pipeline` resource)
               - __debug__ (Only valid for `pipeline` resource)
        :param pulumi.Input[str] resource: The type of resource the permission applies to. Possible values:
               - __pipeline__
               - __cluster__
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The effective tags to apply the permission. It supports 2 custom tags:
               - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
               - __*__ (the star character) means all tags.
        :param pulumi.Input[str] team: The Id of the team the permissions apply to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # resource Permission

        Permission are used to setup access control and allow to define which teams have access to which clusters and pipelines based on tags
        See the [documentation](https://codefresh.io/docs/docs/administration/access-control/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        developers_team = codefresh.Team("developersTeam", users=[
            "5efc3cb6355c6647041b6e49",
            "59009221c102763beda7cf04",
        ])
        developers_permission = codefresh.Permission("developersPermission",
            team=developers_team.id,
            resource="pipeline",
            action="run",
            tags=[
                "demo",
                "test",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param PermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 _id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionArgs.__new__(PermissionArgs)

            __props__.__dict__["_id"] = _id
            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if resource is None and not opts.urn:
                raise TypeError("Missing required property 'resource'")
            __props__.__dict__["resource"] = resource
            __props__.__dict__["tags"] = tags
            if team is None and not opts.urn:
                raise TypeError("Missing required property 'team'")
            __props__.__dict__["team"] = team
        super(Permission, __self__).__init__(
            'codefresh:index/permission:Permission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            _id: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            resource: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            team: Optional[pulumi.Input[str]] = None) -> 'Permission':
        """
        Get an existing Permission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to be allowed. Possible values:
               - __create__
               - __read__
               - __update__
               - __delete__
               - __run__ (Only valid for `pipeline` resource)
               - __approve__ (Only valid for `pipeline` resource)
               - __debug__ (Only valid for `pipeline` resource)
        :param pulumi.Input[str] resource: The type of resource the permission applies to. Possible values:
               - __pipeline__
               - __cluster__
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The effective tags to apply the permission. It supports 2 custom tags:
               - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
               - __*__ (the star character) means all tags.
        :param pulumi.Input[str] team: The Id of the team the permissions apply to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionState.__new__(_PermissionState)

        __props__.__dict__["_id"] = _id
        __props__.__dict__["action"] = action
        __props__.__dict__["resource"] = resource
        __props__.__dict__["tags"] = tags
        __props__.__dict__["team"] = team
        return Permission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def _id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "_id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action to be allowed. Possible values:
        - __create__
        - __read__
        - __update__
        - __delete__
        - __run__ (Only valid for `pipeline` resource)
        - __approve__ (Only valid for `pipeline` resource)
        - __debug__ (Only valid for `pipeline` resource)
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output[str]:
        """
        The type of resource the permission applies to. Possible values:
        - __pipeline__
        - __cluster__
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The effective tags to apply the permission. It supports 2 custom tags:
        - __untagged__ is a “tag” which refers to all clusters that don’t have any tag.
        - __*__ (the star character) means all tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def team(self) -> pulumi.Output[str]:
        """
        The Id of the team the permissions apply to.
        """
        return pulumi.get(self, "team")

