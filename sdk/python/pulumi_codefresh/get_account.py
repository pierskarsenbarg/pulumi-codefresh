# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAccountResult',
    'AwaitableGetAccountResult',
    'get_account',
    'get_account_output',
]

@pulumi.output_type
class GetAccountResult:
    """
    A collection of values returned by getAccount.
    """
    def __init__(__self__, _id=None, admins=None, id=None, name=None):
        if _id and not isinstance(_id, str):
            raise TypeError("Expected argument '_id' to be a str")
        pulumi.set(__self__, "_id", _id)
        if admins and not isinstance(admins, list):
            raise TypeError("Expected argument 'admins' to be a list")
        pulumi.set(__self__, "admins", admins)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def _id(self) -> Optional[str]:
        return pulumi.get(self, "_id")

    @property
    @pulumi.getter
    def admins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "admins")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


class AwaitableGetAccountResult(GetAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountResult(
            _id=self._id,
            admins=self.admins,
            id=self.id,
            name=self.name)


def get_account(_id: Optional[str] = None,
                admins: Optional[Sequence[str]] = None,
                name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountResult:
    """
    ## # account data module

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    acc = codefresh.get_account(name="acc1")
    user1 = codefresh.User("user1",
        email="user1@example.com",
        user_name="user1",
        accounts=[acc.id],
        activate=True,
        roles=[
            "Admin",
            "User",
        ],
        logins=[
            codefresh.UserLoginArgs(
                idp_id=data["codefresh_idps"]["idp_azure"]["id"],
                sso=True,
            ),
            codefresh.UserLoginArgs(
                idp_id=data["codefresh_idps"]["local"]["id"],
            ),
        ],
        personal=codefresh.UserPersonalArgs(
            first_name="John",
            last_name="Smith",
        ))
    ```
    """
    __args__ = dict()
    __args__['_id'] = _id
    __args__['admins'] = admins
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('codefresh:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult).value

    return AwaitableGetAccountResult(
        _id=__ret__._id,
        admins=__ret__.admins,
        id=__ret__.id,
        name=__ret__.name)


@_utilities.lift_output_func(get_account)
def get_account_output(_id: Optional[pulumi.Input[Optional[str]]] = None,
                       admins: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountResult]:
    """
    ## # account data module

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    acc = codefresh.get_account(name="acc1")
    user1 = codefresh.User("user1",
        email="user1@example.com",
        user_name="user1",
        accounts=[acc.id],
        activate=True,
        roles=[
            "Admin",
            "User",
        ],
        logins=[
            codefresh.UserLoginArgs(
                idp_id=data["codefresh_idps"]["idp_azure"]["id"],
                sso=True,
            ),
            codefresh.UserLoginArgs(
                idp_id=data["codefresh_idps"]["local"]["id"],
            ),
        ],
        personal=codefresh.UserPersonalArgs(
            first_name="John",
            last_name="Smith",
        ))
    ```
    """
    ...
