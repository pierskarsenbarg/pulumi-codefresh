# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCurrentAccountResult',
    'AwaitableGetCurrentAccountResult',
    'get_current_account',
    'get_current_account_output',
]

@pulumi.output_type
class GetCurrentAccountResult:
    """
    A collection of values returned by getCurrentAccount.
    """
    def __init__(__self__, _id=None, id=None, name=None, users=None):
        if _id and not isinstance(_id, str):
            raise TypeError("Expected argument '_id' to be a str")
        pulumi.set(__self__, "_id", _id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def _id(self) -> Optional[str]:
        return pulumi.get(self, "_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetCurrentAccountUserResult']]:
        return pulumi.get(self, "users")


class AwaitableGetCurrentAccountResult(GetCurrentAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCurrentAccountResult(
            _id=self._id,
            id=self.id,
            name=self.name,
            users=self.users)


def get_current_account(_id: Optional[str] = None,
                        name: Optional[str] = None,
                        users: Optional[Sequence[pulumi.InputType['GetCurrentAccountUserArgs']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCurrentAccountResult:
    """
    ## # current_account data module

    Return current account (owner of the token) and its users
    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    acc = codefresh.get_current_account()
    pulumi.export("currentAc", acc)
    ```

    The output example:
    ```python
    import pulumi
    ```
    """
    __args__ = dict()
    __args__['_id'] = _id
    __args__['name'] = name
    __args__['users'] = users
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('codefresh:index/getCurrentAccount:getCurrentAccount', __args__, opts=opts, typ=GetCurrentAccountResult).value

    return AwaitableGetCurrentAccountResult(
        _id=__ret__._id,
        id=__ret__.id,
        name=__ret__.name,
        users=__ret__.users)


@_utilities.lift_output_func(get_current_account)
def get_current_account_output(_id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               users: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCurrentAccountUserArgs']]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCurrentAccountResult]:
    """
    ## # current_account data module

    Return current account (owner of the token) and its users
    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    acc = codefresh.get_current_account()
    pulumi.export("currentAc", acc)
    ```

    The output example:
    ```python
    import pulumi
    ```
    """
    ...
