# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegistryArgs', 'Registry']

@pulumi.input_type
class RegistryArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['RegistrySpecArgs'],
                 default: Optional[pulumi.Input[bool]] = None,
                 fallback_registry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Registry resource.
        :param pulumi.Input['RegistrySpecArgs'] spec: _(Required)_ A `spec` block as documented below.
        :param pulumi.Input[bool] default: _(Optional, Default = false)_ default registry
        :param pulumi.Input[str] fallback_registry: _(Optional)_ fallback registry
        :param pulumi.Input[str] name: _(Required)_ some unique name for registry
        :param pulumi.Input[bool] primary: _(Optional, Default = true)_ primary registry
        """
        pulumi.set(__self__, "spec", spec)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if fallback_registry is not None:
            pulumi.set(__self__, "fallback_registry", fallback_registry)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['RegistrySpecArgs']:
        """
        _(Required)_ A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['RegistrySpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        _(Optional, Default = false)_ default registry
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="fallbackRegistry")
    def fallback_registry(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ fallback registry
        """
        return pulumi.get(self, "fallback_registry")

    @fallback_registry.setter
    def fallback_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback_registry", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        _(Required)_ some unique name for registry
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        _(Optional, Default = true)_ primary registry
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)


@pulumi.input_type
class _RegistryState:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 fallback_registry: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input['RegistrySpecArgs']] = None):
        """
        Input properties used for looking up and filtering Registry resources.
        :param pulumi.Input[bool] default: _(Optional, Default = false)_ default registry
        :param pulumi.Input[str] fallback_registry: _(Optional)_ fallback registry
        :param pulumi.Input[str] name: _(Required)_ some unique name for registry
        :param pulumi.Input[bool] primary: _(Optional, Default = true)_ primary registry
        :param pulumi.Input['RegistrySpecArgs'] spec: _(Required)_ A `spec` block as documented below.
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if fallback_registry is not None:
            pulumi.set(__self__, "fallback_registry", fallback_registry)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        _(Optional, Default = false)_ default registry
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="fallbackRegistry")
    def fallback_registry(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ fallback registry
        """
        return pulumi.get(self, "fallback_registry")

    @fallback_registry.setter
    def fallback_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback_registry", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        _(Required)_ some unique name for registry
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        _(Optional, Default = true)_ primary registry
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['RegistrySpecArgs']]:
        """
        _(Required)_ A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['RegistrySpecArgs']]):
        pulumi.set(self, "spec", value)


class Registry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 fallback_registry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['RegistrySpecArgs']]] = None,
                 __props__=None):
        """
        Create a Registry resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default: _(Optional, Default = false)_ default registry
        :param pulumi.Input[str] fallback_registry: _(Optional)_ fallback registry
        :param pulumi.Input[str] name: _(Required)_ some unique name for registry
        :param pulumi.Input[bool] primary: _(Optional, Default = true)_ primary registry
        :param pulumi.Input[pulumi.InputType['RegistrySpecArgs']] spec: _(Required)_ A `spec` block as documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Registry resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RegistryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 fallback_registry: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['RegistrySpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistryArgs.__new__(RegistryArgs)

            __props__.__dict__["default"] = default
            __props__.__dict__["fallback_registry"] = fallback_registry
            __props__.__dict__["name"] = name
            __props__.__dict__["primary"] = primary
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            __props__.__dict__["kind"] = None
        super(Registry, __self__).__init__(
            'codefresh:index/registry:Registry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default: Optional[pulumi.Input[bool]] = None,
            fallback_registry: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary: Optional[pulumi.Input[bool]] = None,
            spec: Optional[pulumi.Input[pulumi.InputType['RegistrySpecArgs']]] = None) -> 'Registry':
        """
        Get an existing Registry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default: _(Optional, Default = false)_ default registry
        :param pulumi.Input[str] fallback_registry: _(Optional)_ fallback registry
        :param pulumi.Input[str] name: _(Required)_ some unique name for registry
        :param pulumi.Input[bool] primary: _(Optional, Default = true)_ primary registry
        :param pulumi.Input[pulumi.InputType['RegistrySpecArgs']] spec: _(Required)_ A `spec` block as documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistryState.__new__(_RegistryState)

        __props__.__dict__["default"] = default
        __props__.__dict__["fallback_registry"] = fallback_registry
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["primary"] = primary
        __props__.__dict__["spec"] = spec
        return Registry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[Optional[bool]]:
        """
        _(Optional, Default = false)_ default registry
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="fallbackRegistry")
    def fallback_registry(self) -> pulumi.Output[Optional[str]]:
        """
        _(Optional)_ fallback registry
        """
        return pulumi.get(self, "fallback_registry")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        _(Required)_ some unique name for registry
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[Optional[bool]]:
        """
        _(Optional, Default = true)_ primary registry
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.RegistrySpec']:
        """
        _(Required)_ A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

