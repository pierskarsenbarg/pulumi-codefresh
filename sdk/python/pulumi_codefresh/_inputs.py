# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AccountBuildArgs',
    'AccountLimitArgs',
    'ContextSpecArgs',
    'ContextSpecConfigArgs',
    'ContextSpecSecretArgs',
    'ContextSpecSecretyamlArgs',
    'ContextSpecStorageazurefArgs',
    'ContextSpecStorageazurefDataArgs',
    'ContextSpecStorageazurefDataAuthArgs',
    'ContextSpecStoragegcArgs',
    'ContextSpecStoragegcDataArgs',
    'ContextSpecStoragegcDataAuthArgs',
    'ContextSpecStorages3Args',
    'ContextSpecStorages3DataArgs',
    'ContextSpecStorages3DataAuthArgs',
    'ContextSpecYamlArgs',
    'PipelineSpecArgs',
    'PipelineSpecOptionsArgs',
    'PipelineSpecRuntimeEnvironmentArgs',
    'PipelineSpecSpecTemplateArgs',
    'PipelineSpecTerminationPolicyArgs',
    'PipelineSpecTerminationPolicyOnCreateBranchArgs',
    'PipelineSpecTriggerArgs',
    'PipelineSpecTriggerOptionArgs',
    'PipelineSpecTriggerRuntimeEnvironmentArgs',
    'RegistrySpecArgs',
    'RegistrySpecAcrArgs',
    'RegistrySpecBintrayArgs',
    'RegistrySpecDockerhubArgs',
    'RegistrySpecEcrArgs',
    'RegistrySpecGarArgs',
    'RegistrySpecGcrArgs',
    'RegistrySpecOtherArgs',
    'StepTypesVersionArgs',
    'UserLoginArgs',
    'UserPersonalArgs',
    'UserShortProfileArgs',
    'GetCurrentAccountUserArgs',
]

@pulumi.input_type
class AccountBuildArgs:
    def __init__(__self__, *,
                 parallel: pulumi.Input[int],
                 nodes: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] parallel: How many pipelines can be run in parallel.
               ` `node` - (Optional) Number of nodes.
        """
        pulumi.set(__self__, "parallel", parallel)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def parallel(self) -> pulumi.Input[int]:
        """
        How many pipelines can be run in parallel.
        ` `node` - (Optional) Number of nodes.
        """
        return pulumi.get(self, "parallel")

    @parallel.setter
    def parallel(self, value: pulumi.Input[int]):
        pulumi.set(self, "parallel", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nodes", value)


@pulumi.input_type
class AccountLimitArgs:
    def __init__(__self__, *,
                 collaborators: pulumi.Input[int],
                 data_retention_weeks: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] collaborators: Max account's collaborators number.
        :param pulumi.Input[int] data_retention_weeks: -(Optional) How long in weeks will the builds be stored.
        """
        pulumi.set(__self__, "collaborators", collaborators)
        if data_retention_weeks is not None:
            pulumi.set(__self__, "data_retention_weeks", data_retention_weeks)

    @property
    @pulumi.getter
    def collaborators(self) -> pulumi.Input[int]:
        """
        Max account's collaborators number.
        """
        return pulumi.get(self, "collaborators")

    @collaborators.setter
    def collaborators(self, value: pulumi.Input[int]):
        pulumi.set(self, "collaborators", value)

    @property
    @pulumi.getter(name="dataRetentionWeeks")
    def data_retention_weeks(self) -> Optional[pulumi.Input[int]]:
        """
        -(Optional) How long in weeks will the builds be stored.
        """
        return pulumi.get(self, "data_retention_weeks")

    @data_retention_weeks.setter
    def data_retention_weeks(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_retention_weeks", value)


@pulumi.input_type
class ContextSpecArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ContextSpecConfigArgs']] = None,
                 secret: Optional[pulumi.Input['ContextSpecSecretArgs']] = None,
                 secretyaml: Optional[pulumi.Input['ContextSpecSecretyamlArgs']] = None,
                 storageazuref: Optional[pulumi.Input['ContextSpecStorageazurefArgs']] = None,
                 storagegc: Optional[pulumi.Input['ContextSpecStoragegcArgs']] = None,
                 storages3: Optional[pulumi.Input['ContextSpecStorages3Args']] = None,
                 yaml: Optional[pulumi.Input['ContextSpecYamlArgs']] = None):
        """
        :param pulumi.Input['ContextSpecConfigArgs'] config: A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
        :param pulumi.Input['ContextSpecSecretArgs'] secret: A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
        :param pulumi.Input['ContextSpecSecretyamlArgs'] secretyaml: A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
        :param pulumi.Input['ContextSpecYamlArgs'] yaml: A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secretyaml is not None:
            pulumi.set(__self__, "secretyaml", secretyaml)
        if storageazuref is not None:
            pulumi.set(__self__, "storageazuref", storageazuref)
        if storagegc is not None:
            pulumi.set(__self__, "storagegc", storagegc)
        if storages3 is not None:
            pulumi.set(__self__, "storages3", storages3)
        if yaml is not None:
            pulumi.set(__self__, "yaml", yaml)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ContextSpecConfigArgs']]:
        """
        A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ContextSpecConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ContextSpecSecretArgs']]:
        """
        A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ContextSpecSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def secretyaml(self) -> Optional[pulumi.Input['ContextSpecSecretyamlArgs']]:
        """
        A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).
        """
        return pulumi.get(self, "secretyaml")

    @secretyaml.setter
    def secretyaml(self, value: Optional[pulumi.Input['ContextSpecSecretyamlArgs']]):
        pulumi.set(self, "secretyaml", value)

    @property
    @pulumi.getter
    def storageazuref(self) -> Optional[pulumi.Input['ContextSpecStorageazurefArgs']]:
        return pulumi.get(self, "storageazuref")

    @storageazuref.setter
    def storageazuref(self, value: Optional[pulumi.Input['ContextSpecStorageazurefArgs']]):
        pulumi.set(self, "storageazuref", value)

    @property
    @pulumi.getter
    def storagegc(self) -> Optional[pulumi.Input['ContextSpecStoragegcArgs']]:
        return pulumi.get(self, "storagegc")

    @storagegc.setter
    def storagegc(self, value: Optional[pulumi.Input['ContextSpecStoragegcArgs']]):
        pulumi.set(self, "storagegc", value)

    @property
    @pulumi.getter
    def storages3(self) -> Optional[pulumi.Input['ContextSpecStorages3Args']]:
        return pulumi.get(self, "storages3")

    @storages3.setter
    def storages3(self, value: Optional[pulumi.Input['ContextSpecStorages3Args']]):
        pulumi.set(self, "storages3", value)

    @property
    @pulumi.getter
    def yaml(self) -> Optional[pulumi.Input['ContextSpecYamlArgs']]:
        """
        A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).
        """
        return pulumi.get(self, "yaml")

    @yaml.setter
    def yaml(self, value: Optional[pulumi.Input['ContextSpecYamlArgs']]):
        pulumi.set(self, "yaml", value)


@pulumi.input_type
class ContextSpecConfigArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: Map of strings representing the variables to be defined in the Shared Config.
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map of strings representing the variables to be defined in the Shared Config.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecSecretArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: Map of strings representing the variables to be defined in the Shared Config.
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map of strings representing the variables to be defined in the Shared Config.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecSecretyamlArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data: String representing a YAML file content
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input[str]:
        """
        String representing a YAML file content
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[str]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecStorageazurefArgs:
    def __init__(__self__, *,
                 data: pulumi.Input['ContextSpecStorageazurefDataArgs']):
        """
        :param pulumi.Input['ContextSpecStorageazurefDataArgs'] data: Map of strings representing the variables to be defined in the Shared Config.
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input['ContextSpecStorageazurefDataArgs']:
        """
        Map of strings representing the variables to be defined in the Shared Config.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input['ContextSpecStorageazurefDataArgs']):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecStorageazurefDataArgs:
    def __init__(__self__, *,
                 auth: pulumi.Input['ContextSpecStorageazurefDataAuthArgs']):
        pulumi.set(__self__, "auth", auth)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Input['ContextSpecStorageazurefDataAuthArgs']:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: pulumi.Input['ContextSpecStorageazurefDataAuthArgs']):
        pulumi.set(self, "auth", value)


@pulumi.input_type
class ContextSpecStorageazurefDataAuthArgs:
    def __init__(__self__, *,
                 account_key: pulumi.Input[str],
                 account_name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "account_key", account_key)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_key", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContextSpecStoragegcArgs:
    def __init__(__self__, *,
                 data: pulumi.Input['ContextSpecStoragegcDataArgs']):
        """
        :param pulumi.Input['ContextSpecStoragegcDataArgs'] data: Map of strings representing the variables to be defined in the Shared Config.
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input['ContextSpecStoragegcDataArgs']:
        """
        Map of strings representing the variables to be defined in the Shared Config.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input['ContextSpecStoragegcDataArgs']):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecStoragegcDataArgs:
    def __init__(__self__, *,
                 auth: pulumi.Input['ContextSpecStoragegcDataAuthArgs']):
        pulumi.set(__self__, "auth", auth)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Input['ContextSpecStoragegcDataAuthArgs']:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: pulumi.Input['ContextSpecStoragegcDataAuthArgs']):
        pulumi.set(self, "auth", value)


@pulumi.input_type
class ContextSpecStoragegcDataAuthArgs:
    def __init__(__self__, *,
                 json_config: pulumi.Input[Mapping[str, Any]],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "json_config", json_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="jsonConfig")
    def json_config(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "json_config")

    @json_config.setter
    def json_config(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "json_config", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContextSpecStorages3Args:
    def __init__(__self__, *,
                 data: pulumi.Input['ContextSpecStorages3DataArgs']):
        """
        :param pulumi.Input['ContextSpecStorages3DataArgs'] data: Map of strings representing the variables to be defined in the Shared Config.
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input['ContextSpecStorages3DataArgs']:
        """
        Map of strings representing the variables to be defined in the Shared Config.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input['ContextSpecStorages3DataArgs']):
        pulumi.set(self, "data", value)


@pulumi.input_type
class ContextSpecStorages3DataArgs:
    def __init__(__self__, *,
                 auth: pulumi.Input['ContextSpecStorages3DataAuthArgs']):
        pulumi.set(__self__, "auth", auth)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Input['ContextSpecStorages3DataAuthArgs']:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: pulumi.Input['ContextSpecStorages3DataAuthArgs']):
        pulumi.set(self, "auth", value)


@pulumi.input_type
class ContextSpecStorages3DataAuthArgs:
    def __init__(__self__, *,
                 json_config: pulumi.Input[Mapping[str, Any]],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "json_config", json_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="jsonConfig")
    def json_config(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "json_config")

    @json_config.setter
    def json_config(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "json_config", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContextSpecYamlArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data: String representing a YAML file content
        """
        pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input[str]:
        """
        String representing a YAML file content
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[str]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class PipelineSpecArgs:
    def __init__(__self__, *,
                 branch_concurrency: Optional[pulumi.Input[int]] = None,
                 concurrency: Optional[pulumi.Input[int]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input['PipelineSpecOptionsArgs']] = None,
                 pack_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 required_available_storage: Optional[pulumi.Input[str]] = None,
                 runtime_environments: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecRuntimeEnvironmentArgs']]]] = None,
                 spec_templates: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecSpecTemplateArgs']]]] = None,
                 termination_policy: Optional[pulumi.Input['PipelineSpecTerminationPolicyArgs']] = None,
                 trigger_concurrency: Optional[pulumi.Input[int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerArgs']]]] = None,
                 variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] branch_concurrency: The maximum amount of concurrent builds that may run for each branch
        :param pulumi.Input[int] concurrency: The maximum amount of concurrent builds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contexts: A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
        :param pulumi.Input['PipelineSpecOptionsArgs'] options: A `options` block as documented below.
        :param pulumi.Input[str] pack_id: SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
        :param pulumi.Input[int] priority: Helps to organize the order of builds execution in case of reaching the concurrency limit.
        :param pulumi.Input[str] required_available_storage: Minimum disk space required for build filesystem ( unit Gi is required)
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSpecRuntimeEnvironmentArgs']]] runtime_environments: A collection of `runtime_environment` blocks as documented below.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSpecSpecTemplateArgs']]] spec_templates: A collection of `spec_template` blocks as documented below.
        :param pulumi.Input['PipelineSpecTerminationPolicyArgs'] termination_policy: A `termination_policy` block as documented below.
        :param pulumi.Input[int] trigger_concurrency: The maximum amount of concurrent builds that may run for each trigger.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerArgs']]] triggers: A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] variables: Pipeline variables.
        """
        if branch_concurrency is not None:
            pulumi.set(__self__, "branch_concurrency", branch_concurrency)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if contexts is not None:
            pulumi.set(__self__, "contexts", contexts)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if pack_id is not None:
            pulumi.set(__self__, "pack_id", pack_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if required_available_storage is not None:
            pulumi.set(__self__, "required_available_storage", required_available_storage)
        if runtime_environments is not None:
            pulumi.set(__self__, "runtime_environments", runtime_environments)
        if spec_templates is not None:
            pulumi.set(__self__, "spec_templates", spec_templates)
        if termination_policy is not None:
            pulumi.set(__self__, "termination_policy", termination_policy)
        if trigger_concurrency is not None:
            pulumi.set(__self__, "trigger_concurrency", trigger_concurrency)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="branchConcurrency")
    def branch_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum amount of concurrent builds that may run for each branch
        """
        return pulumi.get(self, "branch_concurrency")

    @branch_concurrency.setter
    def branch_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "branch_concurrency", value)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum amount of concurrent builds.
        """
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter
    def contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline
        """
        return pulumi.get(self, "contexts")

    @contexts.setter
    def contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contexts", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['PipelineSpecOptionsArgs']]:
        """
        A `options` block as documented below.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['PipelineSpecOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="packId")
    def pack_id(self) -> Optional[pulumi.Input[str]]:
        """
        SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)
        """
        return pulumi.get(self, "pack_id")

    @pack_id.setter
    def pack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pack_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Helps to organize the order of builds execution in case of reaching the concurrency limit.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="requiredAvailableStorage")
    def required_available_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum disk space required for build filesystem ( unit Gi is required)
        """
        return pulumi.get(self, "required_available_storage")

    @required_available_storage.setter
    def required_available_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_available_storage", value)

    @property
    @pulumi.getter(name="runtimeEnvironments")
    def runtime_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecRuntimeEnvironmentArgs']]]]:
        """
        A collection of `runtime_environment` blocks as documented below.
        """
        return pulumi.get(self, "runtime_environments")

    @runtime_environments.setter
    def runtime_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecRuntimeEnvironmentArgs']]]]):
        pulumi.set(self, "runtime_environments", value)

    @property
    @pulumi.getter(name="specTemplates")
    def spec_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecSpecTemplateArgs']]]]:
        """
        A collection of `spec_template` blocks as documented below.
        """
        return pulumi.get(self, "spec_templates")

    @spec_templates.setter
    def spec_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecSpecTemplateArgs']]]]):
        pulumi.set(self, "spec_templates", value)

    @property
    @pulumi.getter(name="terminationPolicy")
    def termination_policy(self) -> Optional[pulumi.Input['PipelineSpecTerminationPolicyArgs']]:
        """
        A `termination_policy` block as documented below.
        """
        return pulumi.get(self, "termination_policy")

    @termination_policy.setter
    def termination_policy(self, value: Optional[pulumi.Input['PipelineSpecTerminationPolicyArgs']]):
        pulumi.set(self, "termination_policy", value)

    @property
    @pulumi.getter(name="triggerConcurrency")
    def trigger_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum amount of concurrent builds that may run for each trigger.
        """
        return pulumi.get(self, "trigger_concurrency")

    @trigger_concurrency.setter
    def trigger_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_concurrency", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerArgs']]]]:
        """
        A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Pipeline variables.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class PipelineSpecOptionsArgs:
    def __init__(__self__, *,
                 keep_pvcs_for_pending_approval: Optional[pulumi.Input[bool]] = None,
                 pending_approval_concurrency_applied: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] keep_pvcs_for_pending_approval: Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
               * Default (attribute not specified): "Use Setting accounts"
               * true: "Remain (build remains active)"
               * false: "Be removed"
        :param pulumi.Input[bool] pending_approval_concurrency_applied: Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
               * Default (attribute not specified): "Use Setting accounts"
               * true: "Included in concurrency"
               * false: "Not included in concurrency"
        """
        if keep_pvcs_for_pending_approval is not None:
            pulumi.set(__self__, "keep_pvcs_for_pending_approval", keep_pvcs_for_pending_approval)
        if pending_approval_concurrency_applied is not None:
            pulumi.set(__self__, "pending_approval_concurrency_applied", pending_approval_concurrency_applied)

    @property
    @pulumi.getter(name="keepPvcsForPendingApproval")
    def keep_pvcs_for_pending_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean for the Settings under pending approval: `When build enters "Pending Approval" state, volume should`:
        * Default (attribute not specified): "Use Setting accounts"
        * true: "Remain (build remains active)"
        * false: "Be removed"
        """
        return pulumi.get(self, "keep_pvcs_for_pending_approval")

    @keep_pvcs_for_pending_approval.setter
    def keep_pvcs_for_pending_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_pvcs_for_pending_approval", value)

    @property
    @pulumi.getter(name="pendingApprovalConcurrencyApplied")
    def pending_approval_concurrency_applied(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on "Pending Approval" state should be`:
        * Default (attribute not specified): "Use Setting accounts"
        * true: "Included in concurrency"
        * false: "Not included in concurrency"
        """
        return pulumi.get(self, "pending_approval_concurrency_applied")

    @pending_approval_concurrency_applied.setter
    def pending_approval_concurrency_applied(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pending_approval_concurrency_applied", value)


@pulumi.input_type
class PipelineSpecRuntimeEnvironmentArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 dind_storage: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu: A required amount of CPU.
        :param pulumi.Input[str] dind_storage: A pipeline shared storage.
        :param pulumi.Input[str] memory: A required amount of memory.
        :param pulumi.Input[str] name: A name of runtime.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if dind_storage is not None:
            pulumi.set(__self__, "dind_storage", dind_storage)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        A required amount of CPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dindStorage")
    def dind_storage(self) -> Optional[pulumi.Input[str]]:
        """
        A pipeline shared storage.
        """
        return pulumi.get(self, "dind_storage")

    @dind_storage.setter
    def dind_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dind_storage", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        A required amount of memory.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name of runtime.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PipelineSpecSpecTemplateArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 revision: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: The relative path to the Codefresh pipeline file.
        :param pulumi.Input[str] repo: The GitHub `account/repo_name`.
        :param pulumi.Input[str] revision: The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        :param pulumi.Input[str] context: The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
        :param pulumi.Input[str] location: Default value - **git**.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "revision", revision)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path to the Codefresh pipeline file.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        The GitHub `account/repo_name`.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Input[str]:
        """
        The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: pulumi.Input[str]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Default value - **git**.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class PipelineSpecTerminationPolicyArgs:
    def __init__(__self__, *,
                 on_create_branch: Optional[pulumi.Input['PipelineSpecTerminationPolicyOnCreateBranchArgs']] = None,
                 on_terminate_annotation: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['PipelineSpecTerminationPolicyOnCreateBranchArgs'] on_create_branch: A `on_create_branch` block as documented below.
        :param pulumi.Input[bool] on_terminate_annotation: Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
        """
        if on_create_branch is not None:
            pulumi.set(__self__, "on_create_branch", on_create_branch)
        if on_terminate_annotation is not None:
            pulumi.set(__self__, "on_terminate_annotation", on_terminate_annotation)

    @property
    @pulumi.getter(name="onCreateBranch")
    def on_create_branch(self) -> Optional[pulumi.Input['PipelineSpecTerminationPolicyOnCreateBranchArgs']]:
        """
        A `on_create_branch` block as documented below.
        """
        return pulumi.get(self, "on_create_branch")

    @on_create_branch.setter
    def on_create_branch(self, value: Optional[pulumi.Input['PipelineSpecTerminationPolicyOnCreateBranchArgs']]):
        pulumi.set(self, "on_create_branch", value)

    @property
    @pulumi.getter(name="onTerminateAnnotation")
    def on_terminate_annotation(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.
        """
        return pulumi.get(self, "on_terminate_annotation")

    @on_terminate_annotation.setter
    def on_terminate_annotation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_terminate_annotation", value)


@pulumi.input_type
class PipelineSpecTerminationPolicyOnCreateBranchArgs:
    def __init__(__self__, *,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 ignore_branch: Optional[pulumi.Input[bool]] = None,
                 ignore_trigger: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] branch_name: A regular expression to filter the branches on with the termination policy applies.
        :param pulumi.Input[bool] ignore_branch: Boolean. See table below for usage.
        :param pulumi.Input[bool] ignore_trigger: Boolean. See table below for usage.
        """
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if ignore_branch is not None:
            pulumi.set(__self__, "ignore_branch", ignore_branch)
        if ignore_trigger is not None:
            pulumi.set(__self__, "ignore_trigger", ignore_trigger)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression to filter the branches on with the termination policy applies.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="ignoreBranch")
    def ignore_branch(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. See table below for usage.
        """
        return pulumi.get(self, "ignore_branch")

    @ignore_branch.setter
    def ignore_branch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_branch", value)

    @property
    @pulumi.getter(name="ignoreTrigger")
    def ignore_trigger(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. See table below for usage.
        """
        return pulumi.get(self, "ignore_trigger")

    @ignore_trigger.setter
    def ignore_trigger(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_trigger", value)


@pulumi.input_type
class PipelineSpecTriggerArgs:
    def __init__(__self__, *,
                 branch_regex: Optional[pulumi.Input[str]] = None,
                 branch_regex_input: Optional[pulumi.Input[str]] = None,
                 comment_regex: Optional[pulumi.Input[str]] = None,
                 commit_status_title: Optional[pulumi.Input[str]] = None,
                 context: Optional[pulumi.Input[str]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 modified_files_glob: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerOptionArgs']]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 pull_request_allow_fork_events: Optional[pulumi.Input[bool]] = None,
                 pull_request_target_branch_regex: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 runtime_environments: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerRuntimeEnvironmentArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] branch_regex: A regular expression and will only trigger for branches that match this naming pattern.
        :param pulumi.Input[str] branch_regex_input: Flag to manage how the `branch_regex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
        :param pulumi.Input[str] comment_regex: A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
        :param pulumi.Input[str] commit_status_title: The commit status title pushed to the GIT version control system.
        :param pulumi.Input[str] context: Codefresh Git context.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contexts: A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
        :param pulumi.Input[str] description: The trigger description.
        :param pulumi.Input[bool] disabled: Boolean. If true, trigger will never be activated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
        :param pulumi.Input[str] modified_files_glob: Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
        :param pulumi.Input[str] name: The display name for the pipeline.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerOptionArgs']]] options: A `options` block as documented below.
        :param pulumi.Input[str] provider: Default value - **github**.
        :param pulumi.Input[bool] pull_request_allow_fork_events: Boolean. If this trigger is also applicable to Git forks.
        :param pulumi.Input[str] pull_request_target_branch_regex: A regular expression and will only trigger for pull requests to branches that match this naming pattern.
        :param pulumi.Input[str] repo: The GitHub `account/repo_name`.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerRuntimeEnvironmentArgs']]] runtime_environments: A collection of `runtime_environment` blocks as documented below.
               - `options`: (Optional) A collection `option` blocks as documented below.
               ---
        :param pulumi.Input[str] type: The trigger type. Default value - **git**.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] variables: Trigger variables.
        """
        if branch_regex is not None:
            pulumi.set(__self__, "branch_regex", branch_regex)
        if branch_regex_input is not None:
            pulumi.set(__self__, "branch_regex_input", branch_regex_input)
        if comment_regex is not None:
            pulumi.set(__self__, "comment_regex", comment_regex)
        if commit_status_title is not None:
            pulumi.set(__self__, "commit_status_title", commit_status_title)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if contexts is not None:
            pulumi.set(__self__, "contexts", contexts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if modified_files_glob is not None:
            pulumi.set(__self__, "modified_files_glob", modified_files_glob)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if pull_request_allow_fork_events is not None:
            pulumi.set(__self__, "pull_request_allow_fork_events", pull_request_allow_fork_events)
        if pull_request_target_branch_regex is not None:
            pulumi.set(__self__, "pull_request_target_branch_regex", pull_request_target_branch_regex)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if runtime_environments is not None:
            pulumi.set(__self__, "runtime_environments", runtime_environments)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="branchRegex")
    def branch_regex(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression and will only trigger for branches that match this naming pattern.
        """
        return pulumi.get(self, "branch_regex")

    @branch_regex.setter
    def branch_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_regex", value)

    @property
    @pulumi.getter(name="branchRegexInput")
    def branch_regex_input(self) -> Optional[pulumi.Input[str]]:
        """
        Flag to manage how the `branch_regex` field is interpreted. Possible values: "multiselect-exclude", "multiselect", "regex". Default: "regex"
        """
        return pulumi.get(self, "branch_regex_input")

    @branch_regex_input.setter
    def branch_regex_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_regex_input", value)

    @property
    @pulumi.getter(name="commentRegex")
    def comment_regex(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression and will only trigger for pull requests where a comment matches this naming pattern.
        """
        return pulumi.get(self, "comment_regex")

    @comment_regex.setter
    def comment_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment_regex", value)

    @property
    @pulumi.getter(name="commitStatusTitle")
    def commit_status_title(self) -> Optional[pulumi.Input[str]]:
        """
        The commit status title pushed to the GIT version control system.
        """
        return pulumi.get(self, "commit_status_title")

    @commit_status_title.setter
    def commit_status_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_status_title", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        Codefresh Git context.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed
        """
        return pulumi.get(self, "contexts")

    @contexts.setter
    def contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contexts", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If true, trigger will never be activated.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="modifiedFilesGlob")
    def modified_files_glob(self) -> Optional[pulumi.Input[str]]:
        """
        Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.
        """
        return pulumi.get(self, "modified_files_glob")

    @modified_files_glob.setter
    def modified_files_glob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_files_glob", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerOptionArgs']]]]:
        """
        A `options` block as documented below.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Default value - **github**.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="pullRequestAllowForkEvents")
    def pull_request_allow_fork_events(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If this trigger is also applicable to Git forks.
        """
        return pulumi.get(self, "pull_request_allow_fork_events")

    @pull_request_allow_fork_events.setter
    def pull_request_allow_fork_events(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pull_request_allow_fork_events", value)

    @property
    @pulumi.getter(name="pullRequestTargetBranchRegex")
    def pull_request_target_branch_regex(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression and will only trigger for pull requests to branches that match this naming pattern.
        """
        return pulumi.get(self, "pull_request_target_branch_regex")

    @pull_request_target_branch_regex.setter
    def pull_request_target_branch_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_request_target_branch_regex", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub `account/repo_name`.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="runtimeEnvironments")
    def runtime_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerRuntimeEnvironmentArgs']]]]:
        """
        A collection of `runtime_environment` blocks as documented below.
        - `options`: (Optional) A collection `option` blocks as documented below.
        ---
        """
        return pulumi.get(self, "runtime_environments")

    @runtime_environments.setter
    def runtime_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineSpecTriggerRuntimeEnvironmentArgs']]]]):
        pulumi.set(self, "runtime_environments", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger type. Default value - **git**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Trigger variables.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class PipelineSpecTriggerOptionArgs:
    def __init__(__self__, *,
                 enable_notifications: Optional[pulumi.Input[bool]] = None,
                 no_cache: Optional[pulumi.Input[bool]] = None,
                 no_cf_cache: Optional[pulumi.Input[bool]] = None,
                 reset_volume: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_notifications: Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
        :param pulumi.Input[bool] no_cache: Boolean. If true, docker layer cache is disabled. Default false
        :param pulumi.Input[bool] no_cf_cache: Boolean. If true, extra Codefresh caching is disabled. Default false
        :param pulumi.Input[bool] reset_volume: Boolean. If true, all files on volume will be deleted before each execution. Default false
        """
        if enable_notifications is not None:
            pulumi.set(__self__, "enable_notifications", enable_notifications)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)
        if no_cf_cache is not None:
            pulumi.set(__self__, "no_cf_cache", no_cf_cache)
        if reset_volume is not None:
            pulumi.set(__self__, "reset_volume", reset_volume)

    @property
    @pulumi.getter(name="enableNotifications")
    def enable_notifications(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false
        """
        return pulumi.get(self, "enable_notifications")

    @enable_notifications.setter
    def enable_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_notifications", value)

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If true, docker layer cache is disabled. Default false
        """
        return pulumi.get(self, "no_cache")

    @no_cache.setter
    def no_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_cache", value)

    @property
    @pulumi.getter(name="noCfCache")
    def no_cf_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If true, extra Codefresh caching is disabled. Default false
        """
        return pulumi.get(self, "no_cf_cache")

    @no_cf_cache.setter
    def no_cf_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_cf_cache", value)

    @property
    @pulumi.getter(name="resetVolume")
    def reset_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. If true, all files on volume will be deleted before each execution. Default false
        """
        return pulumi.get(self, "reset_volume")

    @reset_volume.setter
    def reset_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset_volume", value)


@pulumi.input_type
class PipelineSpecTriggerRuntimeEnvironmentArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 dind_storage: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu: A required amount of CPU.
        :param pulumi.Input[str] dind_storage: A pipeline shared storage.
        :param pulumi.Input[str] memory: A required amount of memory.
        :param pulumi.Input[str] name: A name of runtime.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if dind_storage is not None:
            pulumi.set(__self__, "dind_storage", dind_storage)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        A required amount of CPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dindStorage")
    def dind_storage(self) -> Optional[pulumi.Input[str]]:
        """
        A pipeline shared storage.
        """
        return pulumi.get(self, "dind_storage")

    @dind_storage.setter
    def dind_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dind_storage", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        A required amount of memory.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A name of runtime.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RegistrySpecArgs:
    def __init__(__self__, *,
                 acr: Optional[pulumi.Input['RegistrySpecAcrArgs']] = None,
                 bintray: Optional[pulumi.Input['RegistrySpecBintrayArgs']] = None,
                 dockerhub: Optional[pulumi.Input['RegistrySpecDockerhubArgs']] = None,
                 ecr: Optional[pulumi.Input['RegistrySpecEcrArgs']] = None,
                 gar: Optional[pulumi.Input['RegistrySpecGarArgs']] = None,
                 gcr: Optional[pulumi.Input['RegistrySpecGcrArgs']] = None,
                 other: Optional[pulumi.Input['RegistrySpecOtherArgs']] = None):
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if bintray is not None:
            pulumi.set(__self__, "bintray", bintray)
        if dockerhub is not None:
            pulumi.set(__self__, "dockerhub", dockerhub)
        if ecr is not None:
            pulumi.set(__self__, "ecr", ecr)
        if gar is not None:
            pulumi.set(__self__, "gar", gar)
        if gcr is not None:
            pulumi.set(__self__, "gcr", gcr)
        if other is not None:
            pulumi.set(__self__, "other", other)

    @property
    @pulumi.getter
    def acr(self) -> Optional[pulumi.Input['RegistrySpecAcrArgs']]:
        return pulumi.get(self, "acr")

    @acr.setter
    def acr(self, value: Optional[pulumi.Input['RegistrySpecAcrArgs']]):
        pulumi.set(self, "acr", value)

    @property
    @pulumi.getter
    def bintray(self) -> Optional[pulumi.Input['RegistrySpecBintrayArgs']]:
        return pulumi.get(self, "bintray")

    @bintray.setter
    def bintray(self, value: Optional[pulumi.Input['RegistrySpecBintrayArgs']]):
        pulumi.set(self, "bintray", value)

    @property
    @pulumi.getter
    def dockerhub(self) -> Optional[pulumi.Input['RegistrySpecDockerhubArgs']]:
        return pulumi.get(self, "dockerhub")

    @dockerhub.setter
    def dockerhub(self, value: Optional[pulumi.Input['RegistrySpecDockerhubArgs']]):
        pulumi.set(self, "dockerhub", value)

    @property
    @pulumi.getter
    def ecr(self) -> Optional[pulumi.Input['RegistrySpecEcrArgs']]:
        return pulumi.get(self, "ecr")

    @ecr.setter
    def ecr(self, value: Optional[pulumi.Input['RegistrySpecEcrArgs']]):
        pulumi.set(self, "ecr", value)

    @property
    @pulumi.getter
    def gar(self) -> Optional[pulumi.Input['RegistrySpecGarArgs']]:
        return pulumi.get(self, "gar")

    @gar.setter
    def gar(self, value: Optional[pulumi.Input['RegistrySpecGarArgs']]):
        pulumi.set(self, "gar", value)

    @property
    @pulumi.getter
    def gcr(self) -> Optional[pulumi.Input['RegistrySpecGcrArgs']]:
        return pulumi.get(self, "gcr")

    @gcr.setter
    def gcr(self, value: Optional[pulumi.Input['RegistrySpecGcrArgs']]):
        pulumi.set(self, "gcr", value)

    @property
    @pulumi.getter
    def other(self) -> Optional[pulumi.Input['RegistrySpecOtherArgs']]:
        return pulumi.get(self, "other")

    @other.setter
    def other(self, value: Optional[pulumi.Input['RegistrySpecOtherArgs']]):
        pulumi.set(self, "other", value)


@pulumi.input_type
class RegistrySpecAcrArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: _(Required)_ String representing client id.
        :param pulumi.Input[str] client_secret: _(Required)_ String representing client secret.
        :param pulumi.Input[str] domain: _(Required)_ String representing your acr registry domain.
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain", domain)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing client id.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing client secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing your acr registry domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class RegistrySpecBintrayArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 token: pulumi.Input[str],
                 username: pulumi.Input[str],
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: _(Required)_ String representing the bintray domain
        :param pulumi.Input[str] token: _(Required)_ String representing token
        :param pulumi.Input[str] username: _(Required)_ String representing the username
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "username", username)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing the bintray domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing token
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing the username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class RegistrySpecDockerhubArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: _(Required, Sensitive)_ String.
        :param pulumi.Input[str] username: _(Required)_ String.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        _(Required, Sensitive)_ String.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        _(Required)_ String.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class RegistrySpecEcrArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key_id: _(Required)_ String representing access key id
        :param pulumi.Input[str] region: _(Required)_ String representing one of the Amazon regions
        :param pulumi.Input[str] secret_access_key: _(Required)_ String representing secret access key
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing access key id
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing one of the Amazon regions
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing secret access key
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class RegistrySpecGarArgs:
    def __init__(__self__, *,
                 keyfile: pulumi.Input[str],
                 location: pulumi.Input[str],
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keyfile: _(Required)_ String representing service account json file contents
        :param pulumi.Input[str] location: _(Required)_ String representing one of the Google's gar locations
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "keyfile", keyfile)
        pulumi.set(__self__, "location", location)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter
    def keyfile(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing service account json file contents
        """
        return pulumi.get(self, "keyfile")

    @keyfile.setter
    def keyfile(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyfile", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing one of the Google's gar locations
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class RegistrySpecGcrArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 keyfile: pulumi.Input[str],
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: _(Required)_ String representing one of the Google's gcr domains
        :param pulumi.Input[str] keyfile: _(Required)_ String representing service account json file contents
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "keyfile", keyfile)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing one of the Google's gcr domains
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def keyfile(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing service account json file contents
        """
        return pulumi.get(self, "keyfile")

    @keyfile.setter
    def keyfile(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyfile", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class RegistrySpecOtherArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 behind_firewall: Optional[pulumi.Input[bool]] = None,
                 repository_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: _(Required)_ String representing the bintray domain
        :param pulumi.Input[str] password: _(Required)_ String representing token
        :param pulumi.Input[str] username: _(Required)_ String representing the username
        :param pulumi.Input[bool] behind_firewall: _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
        :param pulumi.Input[str] repository_prefix: _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if behind_firewall is not None:
            pulumi.set(__self__, "behind_firewall", behind_firewall)
        if repository_prefix is not None:
            pulumi.set(__self__, "repository_prefix", repository_prefix)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing the bintray domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing token
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        _(Required)_ String representing the username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="behindFirewall")
    def behind_firewall(self) -> Optional[pulumi.Input[bool]]:
        """
        _(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
        """
        return pulumi.get(self, "behind_firewall")

    @behind_firewall.setter
    def behind_firewall(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "behind_firewall", value)

    @property
    @pulumi.getter(name="repositoryPrefix")
    def repository_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        _(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
        """
        return pulumi.get(self, "repository_prefix")

    @repository_prefix.setter
    def repository_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_prefix", value)


@pulumi.input_type
class StepTypesVersionArgs:
    def __init__(__self__, *,
                 step_types_yaml: pulumi.Input[str],
                 version_number: pulumi.Input[str]):
        """
        :param pulumi.Input[str] step_types_yaml: YAML String containing a valid definition of a typed plugin
        :param pulumi.Input[str] version_number: String representing the semVer for the step
        """
        pulumi.set(__self__, "step_types_yaml", step_types_yaml)
        pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="stepTypesYaml")
    def step_types_yaml(self) -> pulumi.Input[str]:
        """
        YAML String containing a valid definition of a typed plugin
        """
        return pulumi.get(self, "step_types_yaml")

    @step_types_yaml.setter
    def step_types_yaml(self, value: pulumi.Input[str]):
        pulumi.set(self, "step_types_yaml", value)

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> pulumi.Input[str]:
        """
        String representing the semVer for the step
        """
        return pulumi.get(self, "version_number")

    @version_number.setter
    def version_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "version_number", value)


@pulumi.input_type
class UserLoginArgs:
    def __init__(__self__, *,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] idp_id: The id of IDP to the user to.
        """
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of IDP to the user to.
        """
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sso", value)


@pulumi.input_type
class UserPersonalArgs:
    def __init__(__self__, *,
                 company_name: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] company_name: .
        :param pulumi.Input[str] country: .
        :param pulumi.Input[str] first_name: .
        :param pulumi.Input[str] last_name: .
        :param pulumi.Input[str] phone_number: .
        """
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        .
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        .
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        .
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        .
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        .
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)


@pulumi.input_type
class UserShortProfileArgs:
    def __init__(__self__, *,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_name: The new user name.
        """
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The new user name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class GetCurrentAccountUserArgs:
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: str):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


