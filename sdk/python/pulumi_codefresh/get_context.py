# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetContextResult',
    'AwaitableGetContextResult',
    'get_context',
    'get_context_output',
]

@pulumi.output_type
class GetContextResult:
    """
    A collection of values returned by getContext.
    """
    def __init__(__self__, data=None, id=None, name=None, type=None):
        if data and not isinstance(data, str):
            raise TypeError("Expected argument 'data' to be a str")
        pulumi.set(__self__, "data", data)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The yaml string representing the context. Use the `yamldecode` function to access the values belonging the context.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        String identifying the type of extracted context. E.g. `config`, `secret`, `git.github-app`, etc.
        """
        return pulumi.get(self, "type")


class AwaitableGetContextResult(GetContextResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContextResult(
            data=self.data,
            id=self.id,
            name=self.name,
            type=self.type)


def get_context(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContextResult:
    """
    ## # Data Source: Context

    This data source allows to retrieve information on any defined context


    :param str name: Name of the context to be retrived
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('codefresh:index/getContext:getContext', __args__, opts=opts, typ=GetContextResult).value

    return AwaitableGetContextResult(
        data=__ret__.data,
        id=__ret__.id,
        name=__ret__.name,
        type=__ret__.type)


@_utilities.lift_output_func(get_context)
def get_context_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetContextResult]:
    """
    ## # Data Source: Context

    This data source allows to retrieve information on any defined context


    :param str name: Name of the context to be retrived
    """
    ...
