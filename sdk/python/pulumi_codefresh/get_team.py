# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, _id=None, account_id=None, id=None, name=None, tags=None, type=None, users=None):
        if _id and not isinstance(_id, str):
            raise TypeError("Expected argument '_id' to be a str")
        pulumi.set(__self__, "_id", _id)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def _id(self) -> Optional[str]:
        return pulumi.get(self, "_id")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            _id=self._id,
            account_id=self.account_id,
            id=self.id,
            name=self.name,
            tags=self.tags,
            type=self.type,
            users=self.users)


def get_team(_id: Optional[str] = None,
             account_id: Optional[str] = None,
             name: Optional[str] = None,
             tags: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             users: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    ## # data Team

    *Note*: Teams resources should be called with account specific access token

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    admin = codefresh.get_team(name="users")
    permission2 = codefresh.Permission("permission2",
        team=admin.id,
        action="create",
        resource="pipeline",
        tags=["frontend"],
        opts=pulumi.ResourceOptions(provider=codefresh["acc1"]))
    ```
    """
    __args__ = dict()
    __args__['_id'] = _id
    __args__['accountId'] = account_id
    __args__['name'] = name
    __args__['tags'] = tags
    __args__['type'] = type
    __args__['users'] = users
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('codefresh:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        _id=__ret__._id,
        account_id=__ret__.account_id,
        id=__ret__.id,
        name=__ret__.name,
        tags=__ret__.tags,
        type=__ret__.type,
        users=__ret__.users)


@_utilities.lift_output_func(get_team)
def get_team_output(_id: Optional[pulumi.Input[Optional[str]]] = None,
                    account_id: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    tags: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    type: Optional[pulumi.Input[Optional[str]]] = None,
                    users: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    ## # data Team

    *Note*: Teams resources should be called with account specific access token

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    admin = codefresh.get_team(name="users")
    permission2 = codefresh.Permission("permission2",
        team=admin.id,
        action="create",
        resource="pipeline",
        tags=["frontend"],
        opts=pulumi.ResourceOptions(provider=codefresh["acc1"]))
    ```
    """
    ...
