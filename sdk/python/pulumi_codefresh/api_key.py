# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ApiKeyArgs', 'ApiKey']

@pulumi.input_type
class ApiKeyArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ApiKey resource.
        :param pulumi.Input[str] account_id: The ID of account in which the API key will be created.
        :param pulumi.Input[str] user_id: The ID of a user within the referenced `account_id` that will own the API key.
        :param pulumi.Input[str] name: The display name for the API key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A list of access scopes, that can be targeted. The possible values:
               - `agent`
               - `agents`
               - `audit`
               - `build`
               - `cluster`
               - `clusters`
               - `environments-v2`
               - `github-action`
               - `helm`
               - `kubernetes`
               - `pipeline`
               - `project`
               - `repos`
               - `runner-installation`
               - `step-type`
               - `step-types`
               - `view`
               - `workflow`
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "user_id", user_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The ID of account in which the API key will be created.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        The ID of a user within the referenced `account_id` that will own the API key.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of access scopes, that can be targeted. The possible values:
        - `agent`
        - `agents`
        - `audit`
        - `build`
        - `cluster`
        - `clusters`
        - `environments-v2`
        - `github-action`
        - `helm`
        - `kubernetes`
        - `pipeline`
        - `project`
        - `repos`
        - `runner-installation`
        - `step-type`
        - `step-types`
        - `view`
        - `workflow`
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class _ApiKeyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiKey resources.
        :param pulumi.Input[str] account_id: The ID of account in which the API key will be created.
        :param pulumi.Input[str] name: The display name for the API key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A list of access scopes, that can be targeted. The possible values:
               - `agent`
               - `agents`
               - `audit`
               - `build`
               - `cluster`
               - `clusters`
               - `environments-v2`
               - `github-action`
               - `helm`
               - `kubernetes`
               - `pipeline`
               - `project`
               - `repos`
               - `runner-installation`
               - `step-type`
               - `step-types`
               - `view`
               - `workflow`
        :param pulumi.Input[str] token: The Token, that should used as a new provider's token attribute.
        :param pulumi.Input[str] user_id: The ID of a user within the referenced `account_id` that will own the API key.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of account in which the API key will be created.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of access scopes, that can be targeted. The possible values:
        - `agent`
        - `agents`
        - `audit`
        - `build`
        - `cluster`
        - `clusters`
        - `environments-v2`
        - `github-action`
        - `helm`
        - `kubernetes`
        - `pipeline`
        - `project`
        - `repos`
        - `runner-installation`
        - `step-type`
        - `step-types`
        - `view`
        - `workflow`
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The Token, that should used as a new provider's token attribute.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a user within the referenced `account_id` that will own the API key.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


class ApiKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh
        import pulumi_random as random

        test = codefresh.Account("test")
        random = random.RandomString("random",
            length=16,
            special=False)
        new = codefresh.ApiKey("new",
            account_id=test.id,
            user_id=data["codefresh_account"]["test_account_user"]["user_id"],
            scopes=[
                "agent",
                "agents",
                "audit",
                "build",
                "cluster",
                "clusters",
                "environments-v2",
                "github-action",
                "helm",
                "kubernetes",
                "pipeline",
                "project",
                "repos",
                "runner-installation",
                "step-type",
                "step-types",
                "view",
                "workflow",
            ])
        new_account = codefresh.Provider("newAccount",
            api_url="my API URL",
            token=new.token)
        team1 = codefresh.Team("team1", opts=pulumi.ResourceOptions(provider=codefresh["new_account"]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of account in which the API key will be created.
        :param pulumi.Input[str] name: The display name for the API key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A list of access scopes, that can be targeted. The possible values:
               - `agent`
               - `agents`
               - `audit`
               - `build`
               - `cluster`
               - `clusters`
               - `environments-v2`
               - `github-action`
               - `helm`
               - `kubernetes`
               - `pipeline`
               - `project`
               - `repos`
               - `runner-installation`
               - `step-type`
               - `step-types`
               - `view`
               - `workflow`
        :param pulumi.Input[str] user_id: The ID of a user within the referenced `account_id` that will own the API key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh
        import pulumi_random as random

        test = codefresh.Account("test")
        random = random.RandomString("random",
            length=16,
            special=False)
        new = codefresh.ApiKey("new",
            account_id=test.id,
            user_id=data["codefresh_account"]["test_account_user"]["user_id"],
            scopes=[
                "agent",
                "agents",
                "audit",
                "build",
                "cluster",
                "clusters",
                "environments-v2",
                "github-action",
                "helm",
                "kubernetes",
                "pipeline",
                "project",
                "repos",
                "runner-installation",
                "step-type",
                "step-types",
                "view",
                "workflow",
            ])
        new_account = codefresh.Provider("newAccount",
            api_url="my API URL",
            token=new.token)
        team1 = codefresh.Team("team1", opts=pulumi.ResourceOptions(provider=codefresh["new_account"]))
        ```

        :param str resource_name: The name of the resource.
        :param ApiKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiKeyArgs.__new__(ApiKeyArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["name"] = name
            __props__.__dict__["scopes"] = scopes
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["token"] = None
        super(ApiKey, __self__).__init__(
            'codefresh:index/apiKey:ApiKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            token: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'ApiKey':
        """
        Get an existing ApiKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of account in which the API key will be created.
        :param pulumi.Input[str] name: The display name for the API key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: A list of access scopes, that can be targeted. The possible values:
               - `agent`
               - `agents`
               - `audit`
               - `build`
               - `cluster`
               - `clusters`
               - `environments-v2`
               - `github-action`
               - `helm`
               - `kubernetes`
               - `pipeline`
               - `project`
               - `repos`
               - `runner-installation`
               - `step-type`
               - `step-types`
               - `view`
               - `workflow`
        :param pulumi.Input[str] token: The Token, that should used as a new provider's token attribute.
        :param pulumi.Input[str] user_id: The ID of a user within the referenced `account_id` that will own the API key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiKeyState.__new__(_ApiKeyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["name"] = name
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["token"] = token
        __props__.__dict__["user_id"] = user_id
        return ApiKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The ID of account in which the API key will be created.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name for the API key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of access scopes, that can be targeted. The possible values:
        - `agent`
        - `agents`
        - `audit`
        - `build`
        - `cluster`
        - `clusters`
        - `environments-v2`
        - `github-action`
        - `helm`
        - `kubernetes`
        - `pipeline`
        - `project`
        - `repos`
        - `runner-installation`
        - `step-type`
        - `step-types`
        - `view`
        - `workflow`
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        The Token, that should used as a new provider's token attribute.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        The ID of a user within the referenced `account_id` that will own the API key.
        """
        return pulumi.get(self, "user_id")

