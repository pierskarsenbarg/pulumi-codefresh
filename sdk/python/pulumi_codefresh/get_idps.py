# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIdpsResult',
    'AwaitableGetIdpsResult',
    'get_idps',
    'get_idps_output',
]

@pulumi.output_type
class GetIdpsResult:
    """
    A collection of values returned by getIdps.
    """
    def __init__(__self__, _id=None, access_token=None, accounts=None, app_id=None, client_host=None, client_id=None, client_name=None, client_secret=None, client_type=None, cookie_iv=None, cookie_key=None, display_name=None, id=None, scopes=None, tenant=None):
        if _id and not isinstance(_id, str):
            raise TypeError("Expected argument '_id' to be a str")
        pulumi.set(__self__, "_id", _id)
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if client_host and not isinstance(client_host, str):
            raise TypeError("Expected argument 'client_host' to be a str")
        pulumi.set(__self__, "client_host", client_host)
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if client_name and not isinstance(client_name, str):
            raise TypeError("Expected argument 'client_name' to be a str")
        pulumi.set(__self__, "client_name", client_name)
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        pulumi.set(__self__, "client_secret", client_secret)
        if client_type and not isinstance(client_type, str):
            raise TypeError("Expected argument 'client_type' to be a str")
        pulumi.set(__self__, "client_type", client_type)
        if cookie_iv and not isinstance(cookie_iv, str):
            raise TypeError("Expected argument 'cookie_iv' to be a str")
        pulumi.set(__self__, "cookie_iv", cookie_iv)
        if cookie_key and not isinstance(cookie_key, str):
            raise TypeError("Expected argument 'cookie_key' to be a str")
        pulumi.set(__self__, "cookie_key", cookie_key)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if tenant and not isinstance(tenant, str):
            raise TypeError("Expected argument 'tenant' to be a str")
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def _id(self) -> Optional[str]:
        return pulumi.get(self, "_id")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence[str]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clientHost")
    def client_host(self) -> str:
        return pulumi.get(self, "client_host")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientName")
    def client_name(self) -> Optional[str]:
        return pulumi.get(self, "client_name")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientType")
    def client_type(self) -> Optional[str]:
        return pulumi.get(self, "client_type")

    @property
    @pulumi.getter(name="cookieIv")
    def cookie_iv(self) -> str:
        return pulumi.get(self, "cookie_iv")

    @property
    @pulumi.getter(name="cookieKey")
    def cookie_key(self) -> str:
        return pulumi.get(self, "cookie_key")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def tenant(self) -> str:
        return pulumi.get(self, "tenant")


class AwaitableGetIdpsResult(GetIdpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdpsResult(
            _id=self._id,
            access_token=self.access_token,
            accounts=self.accounts,
            app_id=self.app_id,
            client_host=self.client_host,
            client_id=self.client_id,
            client_name=self.client_name,
            client_secret=self.client_secret,
            client_type=self.client_type,
            cookie_iv=self.cookie_iv,
            cookie_key=self.cookie_key,
            display_name=self.display_name,
            id=self.id,
            scopes=self.scopes,
            tenant=self.tenant)


def get_idps(_id: Optional[str] = None,
             client_name: Optional[str] = None,
             client_type: Optional[str] = None,
             display_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdpsResult:
    """
    ## # data get_idps

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    idp_azure = codefresh.get_idps(display_name="codefresh-onprem-tst-2",
        client_type="azure")
    local = codefresh.get_idps(display_name="local")
    acc = codefresh.Account("acc",
        features=var["accountFeatures"],
        limits=[codefresh.AccountLimitArgs(
            collaborators=25,
            data_retention_weeks=5,
        )],
        builds=[codefresh.AccountBuildArgs(
            parallel=25,
            nodes=7,
        )])
    user1 = codefresh.User("user1",
        email="user1@example.com",
        user_name="user1",
        activate=True,
        roles=[
            "Admin",
            "User",
        ],
        logins=[
            codefresh.UserLoginArgs(
                idp_id=idp_azure.id,
                sso=True,
            ),
            codefresh.UserLoginArgs(
                idp_id=local.id,
            ),
        ],
        personal=codefresh.UserPersonalArgs(
            first_name="John",
            last_name="Smith",
        ),
        accounts=[acc.id])
    acc_idp = codefresh.IdpAccounts("accIdp",
        idp_id=idp_azure.id,
        account_ids=[acc.id])
    ```
    """
    __args__ = dict()
    __args__['_id'] = _id
    __args__['clientName'] = client_name
    __args__['clientType'] = client_type
    __args__['displayName'] = display_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('codefresh:index/getIdps:getIdps', __args__, opts=opts, typ=GetIdpsResult).value

    return AwaitableGetIdpsResult(
        _id=__ret__._id,
        access_token=__ret__.access_token,
        accounts=__ret__.accounts,
        app_id=__ret__.app_id,
        client_host=__ret__.client_host,
        client_id=__ret__.client_id,
        client_name=__ret__.client_name,
        client_secret=__ret__.client_secret,
        client_type=__ret__.client_type,
        cookie_iv=__ret__.cookie_iv,
        cookie_key=__ret__.cookie_key,
        display_name=__ret__.display_name,
        id=__ret__.id,
        scopes=__ret__.scopes,
        tenant=__ret__.tenant)


@_utilities.lift_output_func(get_idps)
def get_idps_output(_id: Optional[pulumi.Input[Optional[str]]] = None,
                    client_name: Optional[pulumi.Input[Optional[str]]] = None,
                    client_type: Optional[pulumi.Input[Optional[str]]] = None,
                    display_name: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdpsResult]:
    """
    ## # data get_idps

    ```python
    import pulumi
    import pulumi_codefresh as codefresh

    idp_azure = codefresh.get_idps(display_name="codefresh-onprem-tst-2",
        client_type="azure")
    local = codefresh.get_idps(display_name="local")
    acc = codefresh.Account("acc",
        features=var["accountFeatures"],
        limits=[codefresh.AccountLimitArgs(
            collaborators=25,
            data_retention_weeks=5,
        )],
        builds=[codefresh.AccountBuildArgs(
            parallel=25,
            nodes=7,
        )])
    user1 = codefresh.User("user1",
        email="user1@example.com",
        user_name="user1",
        activate=True,
        roles=[
            "Admin",
            "User",
        ],
        logins=[
            codefresh.UserLoginArgs(
                idp_id=idp_azure.id,
                sso=True,
            ),
            codefresh.UserLoginArgs(
                idp_id=local.id,
            ),
        ],
        personal=codefresh.UserPersonalArgs(
            first_name="John",
            last_name="Smith",
        ),
        accounts=[acc.id])
    acc_idp = codefresh.IdpAccounts("accIdp",
        idp_id=idp_azure.id,
        account_ids=[acc.id])
    ```
    """
    ...
