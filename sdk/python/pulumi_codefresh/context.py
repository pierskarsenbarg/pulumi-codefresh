# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContextArgs', 'Context']

@pulumi.input_type
class ContextArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['ContextSpecArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Context resource.
        :param pulumi.Input['ContextSpecArgs'] spec: A `spec` block as documented below.
        :param pulumi.Input[str] name: The display name for the context.
        """
        pulumi.set(__self__, "spec", spec)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ContextSpecArgs']:
        """
        A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ContextSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the context.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ContextState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input['ContextSpecArgs']] = None):
        """
        Input properties used for looking up and filtering Context resources.
        :param pulumi.Input[str] name: The display name for the context.
        :param pulumi.Input['ContextSpecArgs'] spec: A `spec` block as documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the context.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ContextSpecArgs']]:
        """
        A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ContextSpecArgs']]):
        pulumi.set(self, "spec", value)


class Context(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ContextSpecArgs']]] = None,
                 __props__=None):
        """
        ## # Context Resource

        A Context is an  authentication/configuration that is used by Codefresh system and engine.
        There are multiple types of context available in Codefresh but they all have the following main components to define them:
        * Name: A unique identifier for the context
        * Type: A string representing the type of context
        * Data: A data structure that provide the information related to the Context. This differs based on the type of context selected
          For more details of the Context spec see in the [CLI official documentation](https://codefresh-io.github.io/cli/contexts/spec/)

        ## Supported types

        Currently the provider support the following types of Context:
        * config (Shared Config )
        * secret (Shared Secret)
        * yaml (YAML Configuration Context)
        * secret-yaml (Secret YAML Configuration Context)

        ### Shared Configuration
        A Shared Configuration is the entity in Codefresh that allow to create values in a central place that can then be consumed in pipelines to keep them DRY.
        More details in the official [Shared Configuration documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)

        #### Example Usage of config (Shared Config)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_config = codefresh.Context("test-config", spec=codefresh.ContextSpecArgs(
            config=codefresh.ContextSpecConfigArgs(
                data={
                    "var1": "value1",
                    "var2": "value2",
                },
            ),
        ))
        ```

        #### Example Usage of secret (Shared Secret)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_secret = codefresh.Context("test-secret", spec=codefresh.ContextSpecArgs(
            secret=codefresh.ContextSpecSecretArgs(
                data={
                    "var1": "value1",
                    "var2": "value2",
                },
            ),
        ))
        ```

        #### Example Usage of yaml (YAML Configuration Context)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_yaml = codefresh.Context("test-yaml", spec=codefresh.ContextSpecArgs(
            yaml=\"\"\"test:
          nested_value: value1
          list:
            - test2
            - test3
        another_element: value

        \"\"\",
        ))
        ```

        #### Example Usage of secret-yaml (Secret YAML Configuration Context)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_secret_yaml = codefresh.Context("test-secret-yaml", spec=codefresh.ContextSpecArgs(
            secretyaml=(lambda path: open(path).read())("test.yaml"),
        ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The display name for the context.
        :param pulumi.Input[pulumi.InputType['ContextSpecArgs']] spec: A `spec` block as documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContextArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Context Resource

        A Context is an  authentication/configuration that is used by Codefresh system and engine.
        There are multiple types of context available in Codefresh but they all have the following main components to define them:
        * Name: A unique identifier for the context
        * Type: A string representing the type of context
        * Data: A data structure that provide the information related to the Context. This differs based on the type of context selected
          For more details of the Context spec see in the [CLI official documentation](https://codefresh-io.github.io/cli/contexts/spec/)

        ## Supported types

        Currently the provider support the following types of Context:
        * config (Shared Config )
        * secret (Shared Secret)
        * yaml (YAML Configuration Context)
        * secret-yaml (Secret YAML Configuration Context)

        ### Shared Configuration
        A Shared Configuration is the entity in Codefresh that allow to create values in a central place that can then be consumed in pipelines to keep them DRY.
        More details in the official [Shared Configuration documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)

        #### Example Usage of config (Shared Config)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_config = codefresh.Context("test-config", spec=codefresh.ContextSpecArgs(
            config=codefresh.ContextSpecConfigArgs(
                data={
                    "var1": "value1",
                    "var2": "value2",
                },
            ),
        ))
        ```

        #### Example Usage of secret (Shared Secret)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_secret = codefresh.Context("test-secret", spec=codefresh.ContextSpecArgs(
            secret=codefresh.ContextSpecSecretArgs(
                data={
                    "var1": "value1",
                    "var2": "value2",
                },
            ),
        ))
        ```

        #### Example Usage of yaml (YAML Configuration Context)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_yaml = codefresh.Context("test-yaml", spec=codefresh.ContextSpecArgs(
            yaml=\"\"\"test:
          nested_value: value1
          list:
            - test2
            - test3
        another_element: value

        \"\"\",
        ))
        ```

        #### Example Usage of secret-yaml (Secret YAML Configuration Context)
        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_secret_yaml = codefresh.Context("test-secret-yaml", spec=codefresh.ContextSpecArgs(
            secretyaml=(lambda path: open(path).read())("test.yaml"),
        ))
        ```

        :param str resource_name: The name of the resource.
        :param ContextArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContextArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ContextSpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContextArgs.__new__(ContextArgs)

            __props__.__dict__["name"] = name
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
        super(Context, __self__).__init__(
            'codefresh:index/context:Context',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            spec: Optional[pulumi.Input[pulumi.InputType['ContextSpecArgs']]] = None) -> 'Context':
        """
        Get an existing Context resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The display name for the context.
        :param pulumi.Input[pulumi.InputType['ContextSpecArgs']] spec: A `spec` block as documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContextState.__new__(_ContextState)

        __props__.__dict__["name"] = name
        __props__.__dict__["spec"] = spec
        return Context(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name for the context.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ContextSpec']:
        """
        A `spec` block as documented below.
        """
        return pulumi.get(self, "spec")

