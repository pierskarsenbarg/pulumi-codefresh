# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AccountAdminsArgs', 'AccountAdmins']

@pulumi.input_type
class AccountAdminsArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 users: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a AccountAdmins resource.
        :param pulumi.Input[str] account_id: The account id where to set up a list of admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users to set up as account admins.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The account id where to set up a list of admins.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of users to set up as account admins.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _AccountAdminsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering AccountAdmins resources.
        :param pulumi.Input[str] account_id: The account id where to set up a list of admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users to set up as account admins.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id where to set up a list of admins.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users to set up as account admins.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


class AccountAdmins(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## # Account Admins resource

        Use this resource to set a list of admins for any account.

        ## Example Usage
        ### Example 2

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_account = codefresh.Account("testAccount",
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )],
            builds=[codefresh.AccountBuildArgs(
                parallel=2,
            )])
        admin = codefresh.get_user(email="<EXISTING USER EMAIL>")
        test_account_admins = codefresh.AccountAdmins("testAccountAdmins",
            account_id=test_account.id,
            users=[admin.user_id])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/accountAdmins:AccountAdmins test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id where to set up a list of admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users to set up as account admins.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountAdminsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Account Admins resource

        Use this resource to set a list of admins for any account.

        ## Example Usage
        ### Example 2

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_account = codefresh.Account("testAccount",
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )],
            builds=[codefresh.AccountBuildArgs(
                parallel=2,
            )])
        admin = codefresh.get_user(email="<EXISTING USER EMAIL>")
        test_account_admins = codefresh.AccountAdmins("testAccountAdmins",
            account_id=test_account.id,
            users=[admin.user_id])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/accountAdmins:AccountAdmins test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param AccountAdminsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountAdminsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountAdminsArgs.__new__(AccountAdminsArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if users is None and not opts.urn:
                raise TypeError("Missing required property 'users'")
            __props__.__dict__["users"] = users
        super(AccountAdmins, __self__).__init__(
            'codefresh:index/accountAdmins:AccountAdmins',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'AccountAdmins':
        """
        Get an existing AccountAdmins resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id where to set up a list of admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users to set up as account admins.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountAdminsState.__new__(_AccountAdminsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["users"] = users
        return AccountAdmins(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id where to set up a list of admins.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of users to set up as account admins.
        """
        return pulumi.get(self, "users")

