# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IdpAccountsArgs', 'IdpAccounts']

@pulumi.input_type
class IdpAccountsArgs:
    def __init__(__self__, *,
                 account_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 idp_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a IdpAccounts resource.
        """
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "idp_id", idp_id)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_id", value)


@pulumi.input_type
class _IdpAccountsState:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IdpAccounts resources.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)


class IdpAccounts(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # IDP Admins resource

        The resource adds the list of provided account IDs to the IDP.\\
        Because of the current Codefresh API limitation it's impossible to remove account from IDP, only adding is supporting.

        ## Import

        ```sh
         $ pulumi import codefresh:index/idpAccounts:IdpAccounts test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IdpAccountsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # IDP Admins resource

        The resource adds the list of provided account IDs to the IDP.\\
        Because of the current Codefresh API limitation it's impossible to remove account from IDP, only adding is supporting.

        ## Import

        ```sh
         $ pulumi import codefresh:index/idpAccounts:IdpAccounts test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param IdpAccountsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdpAccountsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdpAccountsArgs.__new__(IdpAccountsArgs)

            if account_ids is None and not opts.urn:
                raise TypeError("Missing required property 'account_ids'")
            __props__.__dict__["account_ids"] = account_ids
            if idp_id is None and not opts.urn:
                raise TypeError("Missing required property 'idp_id'")
            __props__.__dict__["idp_id"] = idp_id
        super(IdpAccounts, __self__).__init__(
            'codefresh:index/idpAccounts:IdpAccounts',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            idp_id: Optional[pulumi.Input[str]] = None) -> 'IdpAccounts':
        """
        Get an existing IdpAccounts resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IdpAccountsState.__new__(_IdpAccountsState)

        __props__.__dict__["account_ids"] = account_ids
        __props__.__dict__["idp_id"] = idp_id
        return IdpAccounts(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idp_id")

