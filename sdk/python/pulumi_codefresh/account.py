# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 builds: Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]] = None,
                 features: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]] builds: A collection of `build` blocks as documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] features: map of supported features toggles 
               ---
        :param pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]] limits: A collection of `limits` blocks as documented below.
        :param pulumi.Input[str] name: The display name for the account.
        """
        if builds is not None:
            pulumi.set(__self__, "builds", builds)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def builds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]]:
        """
        A collection of `build` blocks as documented below.
        """
        return pulumi.get(self, "builds")

    @builds.setter
    def builds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]]):
        pulumi.set(self, "builds", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        """
        map of supported features toggles 
        ---
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]]:
        """
        A collection of `limits` blocks as documented below.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 builds: Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]] = None,
                 features: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]] builds: A collection of `build` blocks as documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] features: map of supported features toggles 
               ---
        :param pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]] limits: A collection of `limits` blocks as documented below.
        :param pulumi.Input[str] name: The display name for the account.
        """
        if builds is not None:
            pulumi.set(__self__, "builds", builds)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def builds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]]:
        """
        A collection of `build` blocks as documented below.
        """
        return pulumi.get(self, "builds")

    @builds.setter
    def builds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountBuildArgs']]]]):
        pulumi.set(self, "builds", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        """
        map of supported features toggles 
        ---
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]]:
        """
        A collection of `limits` blocks as documented below.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountLimitArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 builds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountBuildArgs']]]]] = None,
                 features: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountLimitArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Account resource

        By creating different accounts for different teams within the same company a customer can achieve complete segregation of assets between the teams.
        See the [documentation](https://codefresh.io/docs/docs/administration/ent-account-mng/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test = codefresh.Account("test",
            builds=[codefresh.AccountBuildArgs(
                parallel=27,
            )],
            features={
                "OfflineLogging": True,
                "abac": True,
                "customKubernetesCluster": True,
                "launchDarklyManagement": False,
                "ssoManagement": True,
                "teamsManagement": True,
            },
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/account:Account test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountBuildArgs']]]] builds: A collection of `build` blocks as documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] features: map of supported features toggles 
               ---
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountLimitArgs']]]] limits: A collection of `limits` blocks as documented below.
        :param pulumi.Input[str] name: The display name for the account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Account resource

        By creating different accounts for different teams within the same company a customer can achieve complete segregation of assets between the teams.
        See the [documentation](https://codefresh.io/docs/docs/administration/ent-account-mng/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test = codefresh.Account("test",
            builds=[codefresh.AccountBuildArgs(
                parallel=27,
            )],
            features={
                "OfflineLogging": True,
                "abac": True,
                "customKubernetesCluster": True,
                "launchDarklyManagement": False,
                "ssoManagement": True,
                "teamsManagement": True,
            },
            limits=[codefresh.AccountLimitArgs(
                collaborators=25,
                data_retention_weeks=5,
            )])
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/account:Account test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 builds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountBuildArgs']]]]] = None,
                 features: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountLimitArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["builds"] = builds
            __props__.__dict__["features"] = features
            __props__.__dict__["limits"] = limits
            __props__.__dict__["name"] = name
        super(Account, __self__).__init__(
            'codefresh:index/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            builds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountBuildArgs']]]]] = None,
            features: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
            limits: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountLimitArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountBuildArgs']]]] builds: A collection of `build` blocks as documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] features: map of supported features toggles 
               ---
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountLimitArgs']]]] limits: A collection of `limits` blocks as documented below.
        :param pulumi.Input[str] name: The display name for the account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["builds"] = builds
        __props__.__dict__["features"] = features
        __props__.__dict__["limits"] = limits
        __props__.__dict__["name"] = name
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def builds(self) -> pulumi.Output[Optional[Sequence['outputs.AccountBuild']]]:
        """
        A collection of `build` blocks as documented below.
        """
        return pulumi.get(self, "builds")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Mapping[str, bool]]]:
        """
        map of supported features toggles 
        ---
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def limits(self) -> pulumi.Output[Optional[Sequence['outputs.AccountLimit']]]:
        """
        A collection of `limits` blocks as documented below.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name for the account.
        """
        return pulumi.get(self, "name")

