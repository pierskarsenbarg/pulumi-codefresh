# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StepTypesArgs', 'StepTypes']

@pulumi.input_type
class StepTypesArgs:
    def __init__(__self__, *,
                 versions: pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StepTypes resource.
        :param pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]] versions: A collection of `version` blocks as documented below.
        :param pulumi.Input[str] name: The name for the step-type
        """
        pulumi.set(__self__, "versions", versions)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def versions(self) -> pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]]:
        """
        A collection of `version` blocks as documented below.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]]):
        pulumi.set(self, "versions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the step-type
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _StepTypesState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]]] = None):
        """
        Input properties used for looking up and filtering StepTypes resources.
        :param pulumi.Input[str] name: The name for the step-type
        :param pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]] versions: A collection of `version` blocks as documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the step-type
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]]]:
        """
        A collection of `version` blocks as documented below.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StepTypesVersionArgs']]]]):
        pulumi.set(self, "versions", value)


class StepTypes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StepTypesVersionArgs']]]]] = None,
                 __props__=None):
        """
        ## # Step-types Resource

        The Step-types resource allows to create your own typed step and manage all it's published versions.
        The resource allows to handle the life-cycle of the version by allowing specifying multiple blocks `version` where the user provides a version number and the yaml file representing the plugin.
        More about custom steps in the [official documentation](https://codefresh.io/docs/docs/codefresh-yaml/steps/#creating-a-typed-codefresh-plugin).

        ## Known limitations and disclaimers

        ### Version and name in yaml Metadata are ignored.
        The version and name of the step declared in the yaml files are superseeded by the attributes specified at resource level:
        - `name` : at top level
        - `version_numer`: specified in the `version` block
          The above are added/replaced at runtime time.

        ### Number of API requests
        This resource makes a lot of additional API calls to validate the steps and retrieve all the version available.
        Caution is recommended on the amount of versions maintained and the number of resources defined in a single project.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name for the step-type
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StepTypesVersionArgs']]]] versions: A collection of `version` blocks as documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StepTypesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Step-types Resource

        The Step-types resource allows to create your own typed step and manage all it's published versions.
        The resource allows to handle the life-cycle of the version by allowing specifying multiple blocks `version` where the user provides a version number and the yaml file representing the plugin.
        More about custom steps in the [official documentation](https://codefresh.io/docs/docs/codefresh-yaml/steps/#creating-a-typed-codefresh-plugin).

        ## Known limitations and disclaimers

        ### Version and name in yaml Metadata are ignored.
        The version and name of the step declared in the yaml files are superseeded by the attributes specified at resource level:
        - `name` : at top level
        - `version_numer`: specified in the `version` block
          The above are added/replaced at runtime time.

        ### Number of API requests
        This resource makes a lot of additional API calls to validate the steps and retrieve all the version available.
        Caution is recommended on the amount of versions maintained and the number of resources defined in a single project.

        :param str resource_name: The name of the resource.
        :param StepTypesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StepTypesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StepTypesVersionArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StepTypesArgs.__new__(StepTypesArgs)

            __props__.__dict__["name"] = name
            if versions is None and not opts.urn:
                raise TypeError("Missing required property 'versions'")
            __props__.__dict__["versions"] = versions
        super(StepTypes, __self__).__init__(
            'codefresh:index/stepTypes:StepTypes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StepTypesVersionArgs']]]]] = None) -> 'StepTypes':
        """
        Get an existing StepTypes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name for the step-type
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StepTypesVersionArgs']]]] versions: A collection of `version` blocks as documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StepTypesState.__new__(_StepTypesState)

        __props__.__dict__["name"] = name
        __props__.__dict__["versions"] = versions
        return StepTypes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name for the step-type
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def versions(self) -> pulumi.Output[Sequence['outputs.StepTypesVersion']]:
        """
        A collection of `version` blocks as documented below.
        """
        return pulumi.get(self, "versions")

