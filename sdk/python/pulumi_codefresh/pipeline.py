# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_yaml_string: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input['PipelineSpecArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Pipeline resource.
        :param pulumi.Input[bool] is_public: Boolean that specifies if the build logs are publicly accessible. Default: false
        :param pulumi.Input[str] name: The display name for the pipeline.
        :param pulumi.Input[str] original_yaml_string: A string with original yaml pipeline.
               - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
               - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        :param pulumi.Input['PipelineSpecArgs'] spec: A collection of `spec` blocks as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to mark a project for easy management and access control.
        """
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if original_yaml_string is not None:
            pulumi.set(__self__, "original_yaml_string", original_yaml_string)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean that specifies if the build logs are publicly accessible. Default: false
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="originalYamlString")
    def original_yaml_string(self) -> Optional[pulumi.Input[str]]:
        """
        A string with original yaml pipeline.
        - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
        - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        """
        return pulumi.get(self, "original_yaml_string")

    @original_yaml_string.setter
    def original_yaml_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_yaml_string", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['PipelineSpecArgs']]:
        """
        A collection of `spec` blocks as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['PipelineSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to mark a project for easy management and access control.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PipelineState:
    def __init__(__self__, *,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_yaml_string: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input['PipelineSpecArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Pipeline resources.
        :param pulumi.Input[bool] is_public: Boolean that specifies if the build logs are publicly accessible. Default: false
        :param pulumi.Input[str] name: The display name for the pipeline.
        :param pulumi.Input[str] original_yaml_string: A string with original yaml pipeline.
               - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
               - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        :param pulumi.Input[int] revision: The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        :param pulumi.Input['PipelineSpecArgs'] spec: A collection of `spec` blocks as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to mark a project for easy management and access control.
        """
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if original_yaml_string is not None:
            pulumi.set(__self__, "original_yaml_string", original_yaml_string)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean that specifies if the build logs are publicly accessible. Default: false
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="originalYamlString")
    def original_yaml_string(self) -> Optional[pulumi.Input[str]]:
        """
        A string with original yaml pipeline.
        - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
        - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        """
        return pulumi.get(self, "original_yaml_string")

    @original_yaml_string.setter
    def original_yaml_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_yaml_string", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['PipelineSpecArgs']]:
        """
        A collection of `spec` blocks as documented below.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['PipelineSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to mark a project for easy management and access control.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_yaml_string: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['PipelineSpecArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## # Pipeline Resource

        The central component of the Codefresh Platform. Pipelines are workflows that contain individual steps. Each step is responsible for a specific action in the process.
        See the [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/introduction-to-codefresh-pipelines/) for the details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_project = codefresh.Project("testProject")
        test_pipeline = codefresh.Pipeline("testPipeline",
            tags=[
                "production",
                "docker",
            ],
            spec=codefresh.PipelineSpecArgs(
                concurrency=1,
                branch_concurrency=1,
                trigger_concurrency=1,
                priority=5,
                spec_templates=[codefresh.PipelineSpecSpecTemplateArgs(
                    repo="codefresh-contrib/react-sample-app",
                    path="./codefresh.yml",
                    revision="master",
                    context="git",
                )],
                contexts=[
                    "context1-name",
                    "context2-name",
                ],
                triggers=[
                    codefresh.PipelineSpecTriggerArgs(
                        branch_regex="/.*/gi",
                        context="git",
                        description="Trigger for commits",
                        disabled=False,
                        events=["push.heads"],
                        modified_files_glob="",
                        name="commits",
                        provider="github",
                        repo="codefresh-contrib/react-sample-app",
                        type="git",
                    ),
                    codefresh.PipelineSpecTriggerArgs(
                        branch_regex="/.*/gi",
                        context="git",
                        description="Trigger for tags",
                        disabled=False,
                        events=["push.tags"],
                        modified_files_glob="",
                        commit_status_title="tags-trigger",
                        name="tags",
                        provider="github",
                        repo="codefresh-contrib/react-sample-app",
                        type="git",
                    ),
                ],
                variables={
                    "MY_PIP_VAR": "value",
                    "ANOTHER_PIP_VAR": "another_value",
                },
            ))
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/pipeline:Pipeline test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_public: Boolean that specifies if the build logs are publicly accessible. Default: false
        :param pulumi.Input[str] name: The display name for the pipeline.
        :param pulumi.Input[str] original_yaml_string: A string with original yaml pipeline.
               - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
               - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        :param pulumi.Input[pulumi.InputType['PipelineSpecArgs']] spec: A collection of `spec` blocks as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to mark a project for easy management and access control.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PipelineArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Pipeline Resource

        The central component of the Codefresh Platform. Pipelines are workflows that contain individual steps. Each step is responsible for a specific action in the process.
        See the [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/introduction-to-codefresh-pipelines/) for the details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_codefresh as codefresh

        test_project = codefresh.Project("testProject")
        test_pipeline = codefresh.Pipeline("testPipeline",
            tags=[
                "production",
                "docker",
            ],
            spec=codefresh.PipelineSpecArgs(
                concurrency=1,
                branch_concurrency=1,
                trigger_concurrency=1,
                priority=5,
                spec_templates=[codefresh.PipelineSpecSpecTemplateArgs(
                    repo="codefresh-contrib/react-sample-app",
                    path="./codefresh.yml",
                    revision="master",
                    context="git",
                )],
                contexts=[
                    "context1-name",
                    "context2-name",
                ],
                triggers=[
                    codefresh.PipelineSpecTriggerArgs(
                        branch_regex="/.*/gi",
                        context="git",
                        description="Trigger for commits",
                        disabled=False,
                        events=["push.heads"],
                        modified_files_glob="",
                        name="commits",
                        provider="github",
                        repo="codefresh-contrib/react-sample-app",
                        type="git",
                    ),
                    codefresh.PipelineSpecTriggerArgs(
                        branch_regex="/.*/gi",
                        context="git",
                        description="Trigger for tags",
                        disabled=False,
                        events=["push.tags"],
                        modified_files_glob="",
                        commit_status_title="tags-trigger",
                        name="tags",
                        provider="github",
                        repo="codefresh-contrib/react-sample-app",
                        type="git",
                    ),
                ],
                variables={
                    "MY_PIP_VAR": "value",
                    "ANOTHER_PIP_VAR": "another_value",
                },
            ))
        ```

        ## Import

        ```sh
         $ pulumi import codefresh:index/pipeline:Pipeline test xxxxxxxxxxxxxxxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_yaml_string: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['PipelineSpecArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            __props__.__dict__["is_public"] = is_public
            __props__.__dict__["name"] = name
            __props__.__dict__["original_yaml_string"] = original_yaml_string
            __props__.__dict__["spec"] = spec
            __props__.__dict__["tags"] = tags
            __props__.__dict__["project_id"] = None
            __props__.__dict__["revision"] = None
        super(Pipeline, __self__).__init__(
            'codefresh:index/pipeline:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_public: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            original_yaml_string: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            revision: Optional[pulumi.Input[int]] = None,
            spec: Optional[pulumi.Input[pulumi.InputType['PipelineSpecArgs']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_public: Boolean that specifies if the build logs are publicly accessible. Default: false
        :param pulumi.Input[str] name: The display name for the pipeline.
        :param pulumi.Input[str] original_yaml_string: A string with original yaml pipeline.
               - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
               - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        :param pulumi.Input[int] revision: The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        :param pulumi.Input[pulumi.InputType['PipelineSpecArgs']] spec: A collection of `spec` blocks as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to mark a project for easy management and access control.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineState.__new__(_PipelineState)

        __props__.__dict__["is_public"] = is_public
        __props__.__dict__["name"] = name
        __props__.__dict__["original_yaml_string"] = original_yaml_string
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["revision"] = revision
        __props__.__dict__["spec"] = spec
        __props__.__dict__["tags"] = tags
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean that specifies if the build logs are publicly accessible. Default: false
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name for the pipeline.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originalYamlString")
    def original_yaml_string(self) -> pulumi.Output[Optional[str]]:
        """
        A string with original yaml pipeline.
        - `original_yaml_string = "version: \\"1.0\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\"ACC tests\\""`
        - or `original_yaml_string = file("/path/to/my/codefresh.yml")`
        """
        return pulumi.get(self, "original_yaml_string")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[int]:
        """
        The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[Optional['outputs.PipelineSpec']]:
        """
        A collection of `spec` blocks as documented below.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags to mark a project for easy management and access control.
        """
        return pulumi.get(self, "tags")

