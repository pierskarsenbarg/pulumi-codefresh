{
    "name": "codefresh",
    "displayName": "CodeFresh",
    "description": "A Pulumi package for creating and managing codefresh cloud resources.",
    "keywords": [
        "pulumi",
        "codefresh",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`codefresh` Terraform Provider](https://github.com/codefresh-io/terraform-provider-codefresh).",
    "repository": "https://github.com/pierskarsenbarg/pulumi-codefresh",
    "publisher": "Piers Karsenbarg",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "PiersKarsenbarg"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing codefresh cloud resources.",
            "packageName": "@pierskarsenbarg/codefresh",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/codefresh-io/terraform-provider-codefresh)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-codefresh` repo](https://github.com/pierskarsenbarg/pulumi-codefresh/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-codefresh` repo](https://github.com/codefresh-io/terraform-provider-codefresh/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/codefresh-io/terraform-provider-codefresh)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-codefresh` repo](https://github.com/pierskarsenbarg/pulumi-codefresh/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-codefresh` repo](https://github.com/codefresh-io/terraform-provider-codefresh/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiUrl": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "types": {
        "codefresh:index/AccountBuild:AccountBuild": {
            "properties": {
                "nodes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parallel": {
                    "type": "integer",
                    "description": "How many pipelines can be run in parallel.\n` `node` - (Optional) Number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "parallel"
            ]
        },
        "codefresh:index/AccountLimit:AccountLimit": {
            "properties": {
                "collaborators": {
                    "type": "integer",
                    "description": "Max account's collaborators number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataRetentionWeeks": {
                    "type": "integer",
                    "description": "-(Optional) How long in weeks will the builds be stored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collaborators"
            ]
        },
        "codefresh:index/ContextSpec:ContextSpec": {
            "properties": {
                "config": {
                    "$ref": "#/types/codefresh:index/ContextSpecConfig:ContextSpecConfig",
                    "description": "A `config` block as documented below. Shared Config [spec](https://codefresh-io.github.io/cli/contexts/spec/config/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "secret": {
                    "$ref": "#/types/codefresh:index/ContextSpecSecret:ContextSpecSecret",
                    "description": "A `secret` block as documented below. Shared Secret [spec](https://codefresh-io.github.io/cli/contexts/spec/secret/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "secretyaml": {
                    "$ref": "#/types/codefresh:index/ContextSpecSecretyaml:ContextSpecSecretyaml",
                    "description": "A `secretyaml` block as documented below. Secret Yaml Configuration Context[spec](https://codefresh-io.github.io/cli/contexts/spec/secret-yaml/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageazuref": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorageazuref:ContextSpecStorageazuref",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storagegc": {
                    "$ref": "#/types/codefresh:index/ContextSpecStoragegc:ContextSpecStoragegc",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storages3": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorages3:ContextSpecStorages3",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "yaml": {
                    "$ref": "#/types/codefresh:index/ContextSpecYaml:ContextSpecYaml",
                    "description": "A `yaml` block as documented below. Yaml Configuration Context [spec](https://codefresh-io.github.io/cli/contexts/spec/yaml/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "codefresh:index/ContextSpecConfig:ContextSpecConfig": {
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of strings representing the variables to be defined in the Shared Config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecSecret:ContextSpecSecret": {
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of strings representing the variables to be defined in the Shared Config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecSecretyaml:ContextSpecSecretyaml": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "String representing a YAML file content\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecStorageazuref:ContextSpecStorageazuref": {
            "properties": {
                "data": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorageazurefData:ContextSpecStorageazurefData",
                    "description": "Map of strings representing the variables to be defined in the Shared Config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecStorageazurefData:ContextSpecStorageazurefData": {
            "properties": {
                "auth": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorageazurefDataAuth:ContextSpecStorageazurefDataAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "auth"
            ]
        },
        "codefresh:index/ContextSpecStorageazurefDataAuth:ContextSpecStorageazurefDataAuth": {
            "properties": {
                "accountKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountKey",
                "accountName",
                "type"
            ]
        },
        "codefresh:index/ContextSpecStoragegc:ContextSpecStoragegc": {
            "properties": {
                "data": {
                    "$ref": "#/types/codefresh:index/ContextSpecStoragegcData:ContextSpecStoragegcData",
                    "description": "Map of strings representing the variables to be defined in the Shared Config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecStoragegcData:ContextSpecStoragegcData": {
            "properties": {
                "auth": {
                    "$ref": "#/types/codefresh:index/ContextSpecStoragegcDataAuth:ContextSpecStoragegcDataAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "auth"
            ]
        },
        "codefresh:index/ContextSpecStoragegcDataAuth:ContextSpecStoragegcDataAuth": {
            "properties": {
                "jsonConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "jsonConfig",
                "type"
            ]
        },
        "codefresh:index/ContextSpecStorages3:ContextSpecStorages3": {
            "properties": {
                "data": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorages3Data:ContextSpecStorages3Data",
                    "description": "Map of strings representing the variables to be defined in the Shared Config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/ContextSpecStorages3Data:ContextSpecStorages3Data": {
            "properties": {
                "auth": {
                    "$ref": "#/types/codefresh:index/ContextSpecStorages3DataAuth:ContextSpecStorages3DataAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "auth"
            ]
        },
        "codefresh:index/ContextSpecStorages3DataAuth:ContextSpecStorages3DataAuth": {
            "properties": {
                "jsonConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "jsonConfig",
                "type"
            ]
        },
        "codefresh:index/ContextSpecYaml:ContextSpecYaml": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "String representing a YAML file content\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "codefresh:index/PipelineSpec:PipelineSpec": {
            "properties": {
                "branchConcurrency": {
                    "type": "integer",
                    "description": "The maximum amount of concurrent builds that may run for each branch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "concurrency": {
                    "type": "integer",
                    "description": "The maximum amount of concurrent builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "$ref": "#/types/codefresh:index/PipelineSpecOptions:PipelineSpecOptions",
                    "description": "A `options` block as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packId": {
                    "type": "string",
                    "description": "SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Helps to organize the order of builds execution in case of reaching the concurrency limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredAvailableStorage": {
                    "type": "string",
                    "description": "Minimum disk space required for build filesystem ( unit Gi is required)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runtimeEnvironments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/PipelineSpecRuntimeEnvironment:PipelineSpecRuntimeEnvironment"
                    },
                    "description": "A collection of `runtime_environment` blocks as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/PipelineSpecSpecTemplate:PipelineSpecSpecTemplate"
                    },
                    "description": "A collection of `spec_template` blocks as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "terminationPolicy": {
                    "$ref": "#/types/codefresh:index/PipelineSpecTerminationPolicy:PipelineSpecTerminationPolicy",
                    "description": "A `termination_policy` block as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerConcurrency": {
                    "type": "integer",
                    "description": "The maximum amount of concurrent builds that may run for each trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/PipelineSpecTrigger:PipelineSpecTrigger"
                    },
                    "description": "A collection of `trigger` blocks as documented below. Triggers [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/git-triggers/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Pipeline variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecOptions:PipelineSpecOptions": {
            "properties": {
                "keepPvcsForPendingApproval": {
                    "type": "boolean",
                    "description": "Boolean for the Settings under pending approval: `When build enters \"Pending Approval\" state, volume should`:\n* Default (attribute not specified): \"Use Setting accounts\"\n* true: \"Remain (build remains active)\"\n* false: \"Be removed\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pendingApprovalConcurrencyApplied": {
                    "type": "boolean",
                    "description": "Boolean for the Settings under pending approval: `Pipeline concurrency policy: Builds on \"Pending Approval\" state should be`:\n* Default (attribute not specified): \"Use Setting accounts\"\n* true: \"Included in concurrency\"\n* false: \"Not included in concurrency\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecRuntimeEnvironment:PipelineSpecRuntimeEnvironment": {
            "properties": {
                "cpu": {
                    "type": "string",
                    "description": "A required amount of CPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dindStorage": {
                    "type": "string",
                    "description": "A pipeline shared storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "string",
                    "description": "A required amount of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A name of runtime.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecSpecTemplate:PipelineSpecSpecTemplate": {
            "properties": {
                "context": {
                    "type": "string",
                    "description": "The Codefresh Git [context](https://codefresh.io/docs/docs/integrations/git-providers/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Default value - **git**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The relative path to the Codefresh pipeline file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repo": {
                    "type": "string",
                    "description": "The GitHub `account/repo_name`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "revision": {
                    "type": "string",
                    "description": "The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "repo",
                "revision"
            ]
        },
        "codefresh:index/PipelineSpecTerminationPolicy:PipelineSpecTerminationPolicy": {
            "properties": {
                "onCreateBranch": {
                    "$ref": "#/types/codefresh:index/PipelineSpecTerminationPolicyOnCreateBranch:PipelineSpecTerminationPolicyOnCreateBranch",
                    "description": "A `on_create_branch` block as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onTerminateAnnotation": {
                    "type": "boolean",
                    "description": "Boolean. Enables the policy `Once a build is terminated, terminate all child builds initiated from it`. Default false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecTerminationPolicyOnCreateBranch:PipelineSpecTerminationPolicyOnCreateBranch": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "A regular expression to filter the branches on with the termination policy applies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreBranch": {
                    "type": "boolean",
                    "description": "Boolean. See table below for usage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTrigger": {
                    "type": "boolean",
                    "description": "Boolean. See table below for usage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecTrigger:PipelineSpecTrigger": {
            "properties": {
                "branchRegex": {
                    "type": "string",
                    "description": "A regular expression and will only trigger for branches that match this naming pattern.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchRegexInput": {
                    "type": "string",
                    "description": "Flag to manage how the `branch_regex` field is interpreted. Possible values: \"multiselect-exclude\", \"multiselect\", \"regex\". Default: \"regex\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commentRegex": {
                    "type": "string",
                    "description": "A regular expression and will only trigger for pull requests where a comment matches this naming pattern.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitStatusTitle": {
                    "type": "string",
                    "description": "The commit status title pushed to the GIT version control system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "context": {
                    "type": "string",
                    "description": "Codefresh Git context.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The trigger description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Boolean. If true, trigger will never be activated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of GitHub events for which a Pipeline is triggered. Default value - **push.heads**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedFilesGlob": {
                    "type": "string",
                    "description": "Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the pipeline.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/PipelineSpecTriggerOption:PipelineSpecTriggerOption"
                    },
                    "description": "A `options` block as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Default value - **github**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pullRequestAllowForkEvents": {
                    "type": "boolean",
                    "description": "Boolean. If this trigger is also applicable to Git forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pullRequestTargetBranchRegex": {
                    "type": "string",
                    "description": "A regular expression and will only trigger for pull requests to branches that match this naming pattern.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repo": {
                    "type": "string",
                    "description": "The GitHub `account/repo_name`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runtimeEnvironments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/PipelineSpecTriggerRuntimeEnvironment:PipelineSpecTriggerRuntimeEnvironment"
                    },
                    "description": "A collection of `runtime_environment` blocks as documented below.\n- `options`: (Optional) A collection `option` blocks as documented below.\n---\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The trigger type. Default value - **git**.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Trigger variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecTriggerOption:PipelineSpecTriggerOption": {
            "properties": {
                "enableNotifications": {
                    "type": "boolean",
                    "description": "Boolean. If false the pipeline will not send notifications to Slack and status updates back to the Git provider. Default false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noCache": {
                    "type": "boolean",
                    "description": "Boolean. If true, docker layer cache is disabled. Default false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noCfCache": {
                    "type": "boolean",
                    "description": "Boolean. If true, extra Codefresh caching is disabled. Default false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resetVolume": {
                    "type": "boolean",
                    "description": "Boolean. If true, all files on volume will be deleted before each execution. Default false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/PipelineSpecTriggerRuntimeEnvironment:PipelineSpecTriggerRuntimeEnvironment": {
            "properties": {
                "cpu": {
                    "type": "string",
                    "description": "A required amount of CPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dindStorage": {
                    "type": "string",
                    "description": "A pipeline shared storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "string",
                    "description": "A required amount of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A name of runtime.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/RegistrySpec:RegistrySpec": {
            "properties": {
                "acr": {
                    "$ref": "#/types/codefresh:index/RegistrySpecAcr:RegistrySpecAcr",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "bintray": {
                    "$ref": "#/types/codefresh:index/RegistrySpecBintray:RegistrySpecBintray",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "dockerhub": {
                    "$ref": "#/types/codefresh:index/RegistrySpecDockerhub:RegistrySpecDockerhub",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ecr": {
                    "$ref": "#/types/codefresh:index/RegistrySpecEcr:RegistrySpecEcr",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "gar": {
                    "$ref": "#/types/codefresh:index/RegistrySpecGar:RegistrySpecGar",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "gcr": {
                    "$ref": "#/types/codefresh:index/RegistrySpecGcr:RegistrySpecGcr",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "other": {
                    "$ref": "#/types/codefresh:index/RegistrySpecOther:RegistrySpecOther",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "codefresh:index/RegistrySpecAcr:RegistrySpecAcr": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "_(Required)_ String representing client id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "_(Required)_ String representing client secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "_(Required)_ String representing your acr registry domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "domain"
            ]
        },
        "codefresh:index/RegistrySpecBintray:RegistrySpecBintray": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "_(Required)_ String representing the bintray domain\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "token": {
                    "type": "string",
                    "description": "_(Required)_ String representing token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "_(Required)_ String representing the username\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "token",
                "username"
            ]
        },
        "codefresh:index/RegistrySpecDockerhub:RegistrySpecDockerhub": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "_(Required, Sensitive)_ String.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "_(Required)_ String.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "codefresh:index/RegistrySpecEcr:RegistrySpecEcr": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "_(Required)_ String representing access key id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "_(Required)_ String representing one of the Amazon regions\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "_(Required)_ String representing secret access key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "region",
                "secretAccessKey"
            ]
        },
        "codefresh:index/RegistrySpecGar:RegistrySpecGar": {
            "properties": {
                "keyfile": {
                    "type": "string",
                    "description": "_(Required)_ String representing service account json file contents\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "_(Required)_ String representing one of the Google's gar locations\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "keyfile",
                "location"
            ]
        },
        "codefresh:index/RegistrySpecGcr:RegistrySpecGcr": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "_(Required)_ String representing one of the Google's gcr domains\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyfile": {
                    "type": "string",
                    "description": "_(Required)_ String representing service account json file contents\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "domain",
                "keyfile"
            ]
        },
        "codefresh:index/RegistrySpecOther:RegistrySpecOther": {
            "properties": {
                "behindFirewall": {
                    "type": "boolean",
                    "description": "_(Optional, Default = false)_ Bool. See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "domain": {
                    "type": "string",
                    "description": "_(Required)_ String representing the bintray domain\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "_(Required)_ String representing token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryPrefix": {
                    "type": "string",
                    "description": "_(Optional)_ String. See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "_(Required)_ String representing the username\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "password",
                "username"
            ]
        },
        "codefresh:index/StepTypesVersion:StepTypesVersion": {
            "properties": {
                "stepTypesYaml": {
                    "type": "string",
                    "description": "YAML String containing a valid definition of a typed plugin\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionNumber": {
                    "type": "string",
                    "description": "String representing the semVer for the step\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "stepTypesYaml",
                "versionNumber"
            ]
        },
        "codefresh:index/UserLogin:UserLogin": {
            "properties": {
                "idpId": {
                    "type": "string",
                    "description": "The id of IDP to the user to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sso": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/UserPersonal:UserPersonal": {
            "properties": {
                "companyName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/UserShortProfile:UserShortProfile": {
            "properties": {
                "userName": {
                    "type": "string",
                    "description": "The new user name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getCurrentAccountUser:getCurrentAccountUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name"
            ]
        },
        "codefresh:index/getStepTypesVersion:getStepTypesVersion": {
            "properties": {
                "stepTypesYaml": {
                    "type": "string",
                    "description": "YAML String containing the definition of a typed plugin\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionNumber": {
                    "type": "string",
                    "description": "String representing the semVer for the step\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "stepTypesYaml",
                "versionNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "codefresh:index/getUserLogin:getUserLogin": {
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUserLoginCredential:getUserLoginCredential"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUserLoginIdp:getUserLoginIdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUserLoginCredential:getUserLoginCredential": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUserLoginIdp:getUserLoginIdp": {
            "properties": {
                "clientType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUserPersonal:getUserPersonal": {
            "properties": {
                "companyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUserShortProfile:getUserShortProfile": {
            "properties": {
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUsersUser:getUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUsersUserLogin:getUsersUserLogin"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUsersUserPersonal:getUsersUserPersonal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUsersUserShortProfile:getUsersUserShortProfile"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "logins",
                "personals",
                "roles",
                "shortProfiles",
                "status",
                "userId",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "codefresh:index/getUsersUserLogin:getUsersUserLogin": {
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUsersUserLoginCredential:getUsersUserLoginCredential"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/getUsersUserLoginIdp:getUsersUserLoginIdp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUsersUserLoginCredential:getUsersUserLoginCredential": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUsersUserLoginIdp:getUsersUserLoginIdp": {
            "properties": {
                "clientType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUsersUserPersonal:getUsersUserPersonal": {
            "properties": {
                "companyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "codefresh:index/getUsersUserShortProfile:getUsersUserShortProfile": {
            "properties": {
                "userName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the codefresh package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiUrl": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "inputProperties": {
            "apiUrl": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "resources": {
        "codefresh:index/account:Account": {
            "description": "## # Account resource\n\nBy creating different accounts for different teams within the same company a customer can achieve complete segregation of assets between the teams.\nSee the [documentation](https://codefresh.io/docs/docs/administration/ent-account-mng/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst test = new codefresh.Account(\"test\", {\n    builds: [{\n        parallel: 27,\n    }],\n    features: {\n        OfflineLogging: true,\n        abac: true,\n        customKubernetesCluster: true,\n        launchDarklyManagement: false,\n        ssoManagement: true,\n        teamsManagement: true,\n    },\n    limits: [{\n        collaborators: 25,\n        dataRetentionWeeks: 5,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest = codefresh.Account(\"test\",\n    builds=[codefresh.AccountBuildArgs(\n        parallel=27,\n    )],\n    features={\n        \"OfflineLogging\": True,\n        \"abac\": True,\n        \"customKubernetesCluster\": True,\n        \"launchDarklyManagement\": False,\n        \"ssoManagement\": True,\n        \"teamsManagement\": True,\n    },\n    limits=[codefresh.AccountLimitArgs(\n        collaborators=25,\n        data_retention_weeks=5,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Codefresh.Account(\"test\", new()\n    {\n        Builds = new[]\n        {\n            new Codefresh.Inputs.AccountBuildArgs\n            {\n                Parallel = 27,\n            },\n        },\n        Features = \n        {\n            { \"OfflineLogging\", true },\n            { \"abac\", true },\n            { \"customKubernetesCluster\", true },\n            { \"launchDarklyManagement\", false },\n            { \"ssoManagement\", true },\n            { \"teamsManagement\", true },\n        },\n        Limits = new[]\n        {\n            new Codefresh.Inputs.AccountLimitArgs\n            {\n                Collaborators = 25,\n                DataRetentionWeeks = 5,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewAccount(ctx, \"test\", \u0026codefresh.AccountArgs{\n\t\t\tBuilds: AccountBuildArray{\n\t\t\t\t\u0026AccountBuildArgs{\n\t\t\t\t\tParallel: pulumi.Int(27),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFeatures: pulumi.BoolMap{\n\t\t\t\t\"OfflineLogging\":          pulumi.Bool(true),\n\t\t\t\t\"abac\":                    pulumi.Bool(true),\n\t\t\t\t\"customKubernetesCluster\": pulumi.Bool(true),\n\t\t\t\t\"launchDarklyManagement\":  pulumi.Bool(false),\n\t\t\t\t\"ssoManagement\":           pulumi.Bool(true),\n\t\t\t\t\"teamsManagement\":         pulumi.Bool(true),\n\t\t\t},\n\t\t\tLimits: AccountLimitArray{\n\t\t\t\t\u0026AccountLimitArgs{\n\t\t\t\t\tCollaborators:      pulumi.Int(25),\n\t\t\t\t\tDataRetentionWeeks: pulumi.Int(5),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.codefresh.AccountArgs;\nimport com.pulumi.codefresh.inputs.AccountBuildArgs;\nimport com.pulumi.codefresh.inputs.AccountLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Account(\"test\", AccountArgs.builder()        \n            .builds(AccountBuildArgs.builder()\n                .parallel(27)\n                .build())\n            .features(Map.ofEntries(\n                Map.entry(\"OfflineLogging\", true),\n                Map.entry(\"abac\", true),\n                Map.entry(\"customKubernetesCluster\", true),\n                Map.entry(\"launchDarklyManagement\", false),\n                Map.entry(\"ssoManagement\", true),\n                Map.entry(\"teamsManagement\", true)\n            ))\n            .limits(AccountLimitArgs.builder()\n                .collaborators(25)\n                .dataRetentionWeeks(5)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: codefresh:Account\n    properties:\n      builds:\n        - parallel: 27\n      features:\n        OfflineLogging: true\n        abac: true\n        customKubernetesCluster: true\n        launchDarklyManagement: false\n        ssoManagement: true\n        teamsManagement: true\n      limits:\n        - collaborators: 25\n          dataRetentionWeeks: 5\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/account:Account test xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "builds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/AccountBuild:AccountBuild"
                    },
                    "description": "A collection of `build` blocks as documented below.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "map of supported features toggles \n---\n"
                },
                "limits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/AccountLimit:AccountLimit"
                    },
                    "description": "A collection of `limits` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the account.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "builds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/AccountBuild:AccountBuild"
                    },
                    "description": "A collection of `build` blocks as documented below.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "map of supported features toggles \n---\n"
                },
                "limits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/AccountLimit:AccountLimit"
                    },
                    "description": "A collection of `limits` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the account.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "builds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/AccountBuild:AccountBuild"
                        },
                        "description": "A collection of `build` blocks as documented below.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "map of supported features toggles \n---\n"
                    },
                    "limits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/AccountLimit:AccountLimit"
                        },
                        "description": "A collection of `limits` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the account.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/accountAdmins:AccountAdmins": {
            "description": "## # Account Admins resource\n\nUse this resource to set a list of admins for any account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Example 2\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst testAccount = new codefresh.Account(\"testAccount\", {\n    limits: [{\n        collaborators: 25,\n        dataRetentionWeeks: 5,\n    }],\n    builds: [{\n        parallel: 2,\n    }],\n});\nconst admin = codefresh.getUser({\n    email: \"\u003cEXISTING USER EMAIL\u003e\",\n});\nconst testAccountAdmins = new codefresh.AccountAdmins(\"testAccountAdmins\", {\n    accountId: testAccount.id,\n    users: [admin.then(admin =\u003e admin.userId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_account = codefresh.Account(\"testAccount\",\n    limits=[codefresh.AccountLimitArgs(\n        collaborators=25,\n        data_retention_weeks=5,\n    )],\n    builds=[codefresh.AccountBuildArgs(\n        parallel=2,\n    )])\nadmin = codefresh.get_user(email=\"\u003cEXISTING USER EMAIL\u003e\")\ntest_account_admins = codefresh.AccountAdmins(\"testAccountAdmins\",\n    account_id=test_account.id,\n    users=[admin.user_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testAccount = new Codefresh.Account(\"testAccount\", new()\n    {\n        Limits = new[]\n        {\n            new Codefresh.Inputs.AccountLimitArgs\n            {\n                Collaborators = 25,\n                DataRetentionWeeks = 5,\n            },\n        },\n        Builds = new[]\n        {\n            new Codefresh.Inputs.AccountBuildArgs\n            {\n                Parallel = 2,\n            },\n        },\n    });\n\n    var admin = Codefresh.GetUser.Invoke(new()\n    {\n        Email = \"\u003cEXISTING USER EMAIL\u003e\",\n    });\n\n    var testAccountAdmins = new Codefresh.AccountAdmins(\"testAccountAdmins\", new()\n    {\n        AccountId = testAccount.Id,\n        Users = new[]\n        {\n            admin.Apply(getUserResult =\u003e getUserResult.UserId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestAccount, err := codefresh.NewAccount(ctx, \"testAccount\", \u0026codefresh.AccountArgs{\n\t\t\tLimits: AccountLimitArray{\n\t\t\t\t\u0026AccountLimitArgs{\n\t\t\t\t\tCollaborators:      pulumi.Int(25),\n\t\t\t\t\tDataRetentionWeeks: pulumi.Int(5),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBuilds: AccountBuildArray{\n\t\t\t\t\u0026AccountBuildArgs{\n\t\t\t\t\tParallel: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := codefresh.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"\u003cEXISTING USER EMAIL\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewAccountAdmins(ctx, \"testAccountAdmins\", \u0026codefresh.AccountAdminsArgs{\n\t\t\tAccountId: testAccount.ID(),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(admin.UserId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.codefresh.AccountArgs;\nimport com.pulumi.codefresh.inputs.AccountLimitArgs;\nimport com.pulumi.codefresh.inputs.AccountBuildArgs;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetUserArgs;\nimport com.pulumi.codefresh.AccountAdmins;\nimport com.pulumi.codefresh.AccountAdminsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAccount = new Account(\"testAccount\", AccountArgs.builder()        \n            .limits(AccountLimitArgs.builder()\n                .collaborators(25)\n                .dataRetentionWeeks(5)\n                .build())\n            .builds(AccountBuildArgs.builder()\n                .parallel(2)\n                .build())\n            .build());\n\n        final var admin = CodefreshFunctions.getUser(GetUserArgs.builder()\n            .email(\"\u003cEXISTING USER EMAIL\u003e\")\n            .build());\n\n        var testAccountAdmins = new AccountAdmins(\"testAccountAdmins\", AccountAdminsArgs.builder()        \n            .accountId(testAccount.id())\n            .users(admin.applyValue(getUserResult -\u003e getUserResult.userId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAccount:\n    type: codefresh:Account\n    properties:\n      limits:\n        - collaborators: 25\n          dataRetentionWeeks: 5\n      builds:\n        - parallel: 2\n  testAccountAdmins:\n    type: codefresh:AccountAdmins\n    properties:\n      accountId: ${testAccount.id}\n      users:\n        - ${admin.userId}\nvariables:\n  admin:\n    Fn::Invoke:\n      Function: codefresh:getUser\n      Arguments:\n        email: \u003cEXISTING USER EMAIL\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/accountAdmins:AccountAdmins test xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id where to set up a list of admins.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users to set up as account admins.\n"
                }
            },
            "required": [
                "accountId",
                "users"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id where to set up a list of admins.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users to set up as account admins.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "users"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountAdmins resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account id where to set up a list of admins.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users to set up as account admins.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/apiKey:ApiKey": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as random from \"@pulumi/random\";\n\nconst test = new codefresh.Account(\"test\", {});\nconst random = new random.RandomString(\"random\", {\n    length: 16,\n    special: false,\n});\nconst _new = new codefresh.ApiKey(\"new\", {\n    accountId: test.id,\n    userId: data.codefresh_account.test_account_user.user_id,\n    scopes: [\n        \"agent\",\n        \"agents\",\n        \"audit\",\n        \"build\",\n        \"cluster\",\n        \"clusters\",\n        \"environments-v2\",\n        \"github-action\",\n        \"helm\",\n        \"kubernetes\",\n        \"pipeline\",\n        \"project\",\n        \"repos\",\n        \"runner-installation\",\n        \"step-type\",\n        \"step-types\",\n        \"view\",\n        \"workflow\",\n    ],\n});\nconst newAccount = new codefresh.Provider(\"newAccount\", {\n    apiUrl: \"my API URL\",\n    token: _new.token,\n});\nconst team1 = new codefresh.Team(\"team1\", {}, {\n    provider: codefresh.new_account,\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\nimport pulumi_random as random\n\ntest = codefresh.Account(\"test\")\nrandom = random.RandomString(\"random\",\n    length=16,\n    special=False)\nnew = codefresh.ApiKey(\"new\",\n    account_id=test.id,\n    user_id=data[\"codefresh_account\"][\"test_account_user\"][\"user_id\"],\n    scopes=[\n        \"agent\",\n        \"agents\",\n        \"audit\",\n        \"build\",\n        \"cluster\",\n        \"clusters\",\n        \"environments-v2\",\n        \"github-action\",\n        \"helm\",\n        \"kubernetes\",\n        \"pipeline\",\n        \"project\",\n        \"repos\",\n        \"runner-installation\",\n        \"step-type\",\n        \"step-types\",\n        \"view\",\n        \"workflow\",\n    ])\nnew_account = codefresh.Provider(\"newAccount\",\n    api_url=\"my API URL\",\n    token=new.token)\nteam1 = codefresh.Team(\"team1\", opts=pulumi.ResourceOptions(provider=codefresh[\"new_account\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Codefresh.Account(\"test\");\n\n    var random = new Random.RandomString(\"random\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    var @new = new Codefresh.ApiKey(\"new\", new()\n    {\n        AccountId = test.Id,\n        UserId = data.Codefresh_account.Test_account_user.User_id,\n        Scopes = new[]\n        {\n            \"agent\",\n            \"agents\",\n            \"audit\",\n            \"build\",\n            \"cluster\",\n            \"clusters\",\n            \"environments-v2\",\n            \"github-action\",\n            \"helm\",\n            \"kubernetes\",\n            \"pipeline\",\n            \"project\",\n            \"repos\",\n            \"runner-installation\",\n            \"step-type\",\n            \"step-types\",\n            \"view\",\n            \"workflow\",\n        },\n    });\n\n    var newAccount = new Codefresh.Provider(\"newAccount\", new()\n    {\n        ApiUrl = \"my API URL\",\n        Token = @new.Token,\n    });\n\n    var team1 = new Codefresh.Team(\"team1\", new()\n    {\n    }, new CustomResourceOptions\n    {\n        Provider = codefresh.New_account,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := codefresh.NewAccount(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = random.NewRandomString(ctx, \"random\", \u0026random.RandomStringArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnew, err := codefresh.NewApiKey(ctx, \"new\", \u0026codefresh.ApiKeyArgs{\n\t\t\tAccountId: test.ID(),\n\t\t\tUserId:    pulumi.Any(data.Codefresh_account.Test_account_user.User_id),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"agent\"),\n\t\t\t\tpulumi.String(\"agents\"),\n\t\t\t\tpulumi.String(\"audit\"),\n\t\t\t\tpulumi.String(\"build\"),\n\t\t\t\tpulumi.String(\"cluster\"),\n\t\t\t\tpulumi.String(\"clusters\"),\n\t\t\t\tpulumi.String(\"environments-v2\"),\n\t\t\t\tpulumi.String(\"github-action\"),\n\t\t\t\tpulumi.String(\"helm\"),\n\t\t\t\tpulumi.String(\"kubernetes\"),\n\t\t\t\tpulumi.String(\"pipeline\"),\n\t\t\t\tpulumi.String(\"project\"),\n\t\t\t\tpulumi.String(\"repos\"),\n\t\t\t\tpulumi.String(\"runner-installation\"),\n\t\t\t\tpulumi.String(\"step-type\"),\n\t\t\t\tpulumi.String(\"step-types\"),\n\t\t\t\tpulumi.String(\"view\"),\n\t\t\t\tpulumi.String(\"workflow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewProvider(ctx, \"newAccount\", \u0026codefresh.ProviderArgs{\n\t\t\tApiUrl: pulumi.String(\"my API URL\"),\n\t\t\tToken:  new.Token,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewTeam(ctx, \"team1\", nil, pulumi.Provider(codefresh.New_account))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.random.RandomString;\nimport com.pulumi.random.RandomStringArgs;\nimport com.pulumi.codefresh.ApiKey;\nimport com.pulumi.codefresh.ApiKeyArgs;\nimport com.pulumi.pulumi.providers.codefresh;\nimport com.pulumi.pulumi.providers.ProviderArgs;\nimport com.pulumi.codefresh.Team;\nimport com.pulumi.codefresh.TeamArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Account(\"test\");\n\n        var random = new RandomString(\"random\", RandomStringArgs.builder()        \n            .length(16)\n            .special(false)\n            .build());\n\n        var new_ = new ApiKey(\"new\", ApiKeyArgs.builder()        \n            .accountId(test.id())\n            .userId(data.codefresh_account().test_account_user().user_id())\n            .scopes(            \n                \"agent\",\n                \"agents\",\n                \"audit\",\n                \"build\",\n                \"cluster\",\n                \"clusters\",\n                \"environments-v2\",\n                \"github-action\",\n                \"helm\",\n                \"kubernetes\",\n                \"pipeline\",\n                \"project\",\n                \"repos\",\n                \"runner-installation\",\n                \"step-type\",\n                \"step-types\",\n                \"view\",\n                \"workflow\")\n            .build());\n\n        var newAccount = new Provider(\"newAccount\", ProviderArgs.builder()        \n            .apiUrl(\"my API URL\")\n            .token(new_.token())\n            .build());\n\n        var team1 = new Team(\"team1\", TeamArgs.Empty, CustomResourceOptions.builder()\n            .provider(codefresh.new_account())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: codefresh:Account\n  random:\n    type: random:RandomString\n    properties:\n      length: 16\n      special: false\n  new:\n    type: codefresh:ApiKey\n    properties:\n      accountId: ${test.id}\n      userId: ${data.codefresh_account.test_account_user.user_id}\n      scopes:\n        - agent\n        - agents\n        - audit\n        - build\n        - cluster\n        - clusters\n        - environments-v2\n        - github-action\n        - helm\n        - kubernetes\n        - pipeline\n        - project\n        - repos\n        - runner-installation\n        - step-type\n        - step-types\n        - view\n        - workflow\n  newAccount:\n    type: pulumi:providers:codefresh\n    properties:\n      apiUrl: my API URL\n      token: ${new.token}\n  team1:\n    type: codefresh:Team\n    options:\n      provider: ${codefresh.new_account}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of account in which the API key will be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the API key.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of access scopes, that can be targeted. The possible values:\n- `agent`\n- `agents`\n- `audit`\n- `build`\n- `cluster`\n- `clusters`\n- `environments-v2`\n- `github-action`\n- `helm`\n- `kubernetes`\n- `pipeline`\n- `project`\n- `repos`\n- `runner-installation`\n- `step-type`\n- `step-types`\n- `view`\n- `workflow`\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Token, that should used as a new provider's token attribute.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of a user within the referenced `account_id` that will own the API key.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "token",
                "userId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of account in which the API key will be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the API key.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of access scopes, that can be targeted. The possible values:\n- `agent`\n- `agents`\n- `audit`\n- `build`\n- `cluster`\n- `clusters`\n- `environments-v2`\n- `github-action`\n- `helm`\n- `kubernetes`\n- `pipeline`\n- `project`\n- `repos`\n- `runner-installation`\n- `step-type`\n- `step-types`\n- `view`\n- `workflow`\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of a user within the referenced `account_id` that will own the API key.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The ID of account in which the API key will be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the API key.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of access scopes, that can be targeted. The possible values:\n- `agent`\n- `agents`\n- `audit`\n- `build`\n- `cluster`\n- `clusters`\n- `environments-v2`\n- `github-action`\n- `helm`\n- `kubernetes`\n- `pipeline`\n- `project`\n- `repos`\n- `runner-installation`\n- `step-type`\n- `step-types`\n- `view`\n- `workflow`\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The Token, that should used as a new provider's token attribute.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of a user within the referenced `account_id` that will own the API key.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/context:Context": {
            "description": "## # Context Resource\n\nA Context is an  authentication/configuration that is used by Codefresh system and engine.\nThere are multiple types of context available in Codefresh but they all have the following main components to define them:\n* Name: A unique identifier for the context\n* Type: A string representing the type of context\n* Data: A data structure that provide the information related to the Context. This differs based on the type of context selected\nFor more details of the Context spec see in the [CLI official documentation](https://codefresh-io.github.io/cli/contexts/spec/)\n\n## Supported types\n\nCurrently the provider support the following types of Context:\n* config (Shared Config )\n* secret (Shared Secret)\n* yaml (YAML Configuration Context)\n* secret-yaml (Secret YAML Configuration Context)\n\n### Shared Configuration\nA Shared Configuration is the entity in Codefresh that allow to create values in a central place that can then be consumed in pipelines to keep them DRY.\nMore details in the official [Shared Configuration documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)\n\n#### Example Usage of config (Shared Config)\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst test_config = new codefresh.Context(\"test-config\", {\n    spec: {\n        config: {\n            data: {\n                var1: \"value1\",\n                var2: \"value2\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_config = codefresh.Context(\"test-config\", spec=codefresh.ContextSpecArgs(\n    config=codefresh.ContextSpecConfigArgs(\n        data={\n            \"var1\": \"value1\",\n            \"var2\": \"value2\",\n        },\n    ),\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_config = new Codefresh.Context(\"test-config\", new()\n    {\n        Spec = new Codefresh.Inputs.ContextSpecArgs\n        {\n            Config = new Codefresh.Inputs.ContextSpecConfigArgs\n            {\n                Data = \n                {\n                    { \"var1\", \"value1\" },\n                    { \"var2\", \"value2\" },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewContext(ctx, \"test-config\", \u0026codefresh.ContextArgs{\n\t\t\tSpec: \u0026ContextSpecArgs{\n\t\t\t\tConfig: \u0026ContextSpecConfigArgs{\n\t\t\t\t\tData: pulumi.StringMap{\n\t\t\t\t\t\t\"var1\": pulumi.String(\"value1\"),\n\t\t\t\t\t\t\"var2\": pulumi.String(\"value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Context;\nimport com.pulumi.codefresh.ContextArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_config = new Context(\"test-config\", ContextArgs.builder()        \n            .spec(ContextSpecArgs.builder()\n                .config(ContextSpecConfigArgs.builder()\n                    .data(Map.ofEntries(\n                        Map.entry(\"var1\", \"value1\"),\n                        Map.entry(\"var2\", \"value2\")\n                    ))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-config:\n    type: codefresh:Context\n    properties:\n      spec:\n        config:\n          data:\n            var1: value1\n            var2: value2\n```\n\n#### Example Usage of secret (Shared Secret)\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst test_secret = new codefresh.Context(\"test-secret\", {\n    spec: {\n        secret: {\n            data: {\n                var1: \"value1\",\n                var2: \"value2\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_secret = codefresh.Context(\"test-secret\", spec=codefresh.ContextSpecArgs(\n    secret=codefresh.ContextSpecSecretArgs(\n        data={\n            \"var1\": \"value1\",\n            \"var2\": \"value2\",\n        },\n    ),\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_secret = new Codefresh.Context(\"test-secret\", new()\n    {\n        Spec = new Codefresh.Inputs.ContextSpecArgs\n        {\n            Secret = new Codefresh.Inputs.ContextSpecSecretArgs\n            {\n                Data = \n                {\n                    { \"var1\", \"value1\" },\n                    { \"var2\", \"value2\" },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewContext(ctx, \"test-secret\", \u0026codefresh.ContextArgs{\n\t\t\tSpec: \u0026ContextSpecArgs{\n\t\t\t\tSecret: \u0026ContextSpecSecretArgs{\n\t\t\t\t\tData: pulumi.StringMap{\n\t\t\t\t\t\t\"var1\": pulumi.String(\"value1\"),\n\t\t\t\t\t\t\"var2\": pulumi.String(\"value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Context;\nimport com.pulumi.codefresh.ContextArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_secret = new Context(\"test-secret\", ContextArgs.builder()        \n            .spec(ContextSpecArgs.builder()\n                .secret(ContextSpecSecretArgs.builder()\n                    .data(Map.ofEntries(\n                        Map.entry(\"var1\", \"value1\"),\n                        Map.entry(\"var2\", \"value2\")\n                    ))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-secret:\n    type: codefresh:Context\n    properties:\n      spec:\n        secret:\n          data:\n            var1: value1\n            var2: value2\n```\n\n#### Example Usage of yaml (YAML Configuration Context)\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst test_yaml = new codefresh.Context(\"test-yaml\", {\n    spec: {\n        // NOTE: you can also load the yaml from a file with `yaml = file(\"PATH-TO-FILE.yaml\")`\n        yaml: `test:\n  nested_value: value1\n  list:\n    - test2\n    - test3\nanother_element: value\n`,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_yaml = codefresh.Context(\"test-yaml\", spec=codefresh.ContextSpecArgs(\n    yaml=\"\"\"test:\n  nested_value: value1\n  list:\n    - test2\n    - test3\nanother_element: value\n\n\"\"\",\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_yaml = new Codefresh.Context(\"test-yaml\", new()\n    {\n        Spec = new Codefresh.Inputs.ContextSpecArgs\n        {\n            Yaml = @\"test:\n  nested_value: value1\n  list:\n    - test2\n    - test3\nanother_element: value\n\n\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewContext(ctx, \"test-yaml\", \u0026codefresh.ContextArgs{\n\t\t\tSpec: \u0026ContextSpecArgs{\n\t\t\t\tYaml: fmt.Sprintf(`test:\n  nested_value: value1\n  list:\n    - test2\n    - test3\nanother_element: value\n\n`),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Context;\nimport com.pulumi.codefresh.ContextArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_yaml = new Context(\"test-yaml\", ContextArgs.builder()        \n            .spec(ContextSpecArgs.builder()\n                .yaml(\"\"\"\ntest:\n  nested_value: value1\n  list:\n    - test2\n    - test3\nanother_element: value\n\n                \"\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-yaml:\n    type: codefresh:Context\n    properties:\n      spec:\n        yaml: |+\n          test:\n            nested_value: value1\n            list:\n              - test2\n              - test3\n          another_element: value\n```\n\n#### Example Usage of secret-yaml (Secret YAML Configuration Context)\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as fs from \"fs\";\n\nconst test_secret_yaml = new codefresh.Context(\"test-secret-yaml\", {spec: {\n    secretyaml: fs.readFileSync(\"test.yaml\"),\n}});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_secret_yaml = codefresh.Context(\"test-secret-yaml\", spec=codefresh.ContextSpecArgs(\n    secretyaml=(lambda path: open(path).read())(\"test.yaml\"),\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_secret_yaml = new Codefresh.Context(\"test-secret-yaml\", new()\n    {\n        Spec = new Codefresh.Inputs.ContextSpecArgs\n        {\n            Secretyaml = File.ReadAllText(\"test.yaml\"),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewContext(ctx, \"test-secret-yaml\", \u0026codefresh.ContextArgs{\n\t\t\tSpec: \u0026ContextSpecArgs{\n\t\t\t\tSecretyaml: readFileOrPanic(\"test.yaml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Context;\nimport com.pulumi.codefresh.ContextArgs;\nimport com.pulumi.codefresh.inputs.ContextSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_secret_yaml = new Context(\"test-secret-yaml\", ContextArgs.builder()        \n            .spec(ContextSpecArgs.builder()\n                .secretyaml(Files.readString(Paths.get(\"test.yaml\")))\n                .build())\n            .build());\n\n    }\n}\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The display name for the context.\n"
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/ContextSpec:ContextSpec",
                    "description": "A `spec` block as documented below.\n"
                }
            },
            "required": [
                "name",
                "spec"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The display name for the context.\n",
                    "willReplaceOnChanges": true
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/ContextSpec:ContextSpec",
                    "description": "A `spec` block as documented below.\n"
                }
            },
            "requiredInputs": [
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Context resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The display name for the context.\n",
                        "willReplaceOnChanges": true
                    },
                    "spec": {
                        "$ref": "#/types/codefresh:index/ContextSpec:ContextSpec",
                        "description": "A `spec` block as documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/idpAccounts:IdpAccounts": {
            "description": "## # IDP Admins resource\n\nThe resource adds the list of provided account IDs to the IDP.  \nBecause of the current Codefresh API limitation it's impossible to remove account from IDP, only adding is supporting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.codefresh.IdpAccounts;\nimport com.pulumi.codefresh.IdpAccountsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAccount = new Account(\"testAccount\");\n\n        var testIdpAccounts = new IdpAccounts(\"testIdpAccounts\", IdpAccountsArgs.builder()        \n            .idp(\"azure\")\n            .accounts(            \n                testAccount.id(),\n                \"\u003cANY ACCOUNT ID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAccount:\n    type: codefresh:Account\n  testIdpAccounts:\n    type: codefresh:IdpAccounts\n    properties:\n      idp: azure\n      accounts:\n        - ${testAccount.id}\n        - \u003cANY ACCOUNT ID\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/idpAccounts:IdpAccounts test xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "idpId": {
                    "type": "string"
                }
            },
            "required": [
                "accountIds",
                "idpId"
            ],
            "inputProperties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "idpId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "accountIds",
                "idpId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpAccounts resources.\n",
                "properties": {
                    "accountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "idpId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/permission:Permission": {
            "description": "## # resource codefresh.Permission\n\nPermission are used to setup access control and allow to define which teams have access to which clusters and pipelines based on tags\nSee the [documentation](https://codefresh.io/docs/docs/administration/access-control/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\n\nconst developersTeam = new codefresh.Team(\"developersTeam\", {users: [\n    \"5efc3cb6355c6647041b6e49\",\n    \"59009221c102763beda7cf04\",\n]});\nconst developersPermission = new codefresh.Permission(\"developersPermission\", {\n    team: developersTeam.id,\n    resource: \"pipeline\",\n    action: \"run\",\n    tags: [\n        \"demo\",\n        \"test\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ndevelopers_team = codefresh.Team(\"developersTeam\", users=[\n    \"5efc3cb6355c6647041b6e49\",\n    \"59009221c102763beda7cf04\",\n])\ndevelopers_permission = codefresh.Permission(\"developersPermission\",\n    team=developers_team.id,\n    resource=\"pipeline\",\n    action=\"run\",\n    tags=[\n        \"demo\",\n        \"test\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developersTeam = new Codefresh.Team(\"developersTeam\", new()\n    {\n        Users = new[]\n        {\n            \"5efc3cb6355c6647041b6e49\",\n            \"59009221c102763beda7cf04\",\n        },\n    });\n\n    var developersPermission = new Codefresh.Permission(\"developersPermission\", new()\n    {\n        Team = developersTeam.Id,\n        Resource = \"pipeline\",\n        Action = \"run\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"test\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevelopersTeam, err := codefresh.NewTeam(ctx, \"developersTeam\", \u0026codefresh.TeamArgs{\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5efc3cb6355c6647041b6e49\"),\n\t\t\t\tpulumi.String(\"59009221c102763beda7cf04\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewPermission(ctx, \"developersPermission\", \u0026codefresh.PermissionArgs{\n\t\t\tTeam:     developersTeam.ID(),\n\t\t\tResource: pulumi.String(\"pipeline\"),\n\t\t\tAction:   pulumi.String(\"run\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Team;\nimport com.pulumi.codefresh.TeamArgs;\nimport com.pulumi.codefresh.Permission;\nimport com.pulumi.codefresh.PermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developersTeam = new Team(\"developersTeam\", TeamArgs.builder()        \n            .users(            \n                \"5efc3cb6355c6647041b6e49\",\n                \"59009221c102763beda7cf04\")\n            .build());\n\n        var developersPermission = new Permission(\"developersPermission\", PermissionArgs.builder()        \n            .team(developersTeam.id())\n            .resource(\"pipeline\")\n            .action(\"run\")\n            .tags(            \n                \"demo\",\n                \"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  developersTeam:\n    type: codefresh:Team\n    properties:\n      users:\n        - 5efc3cb6355c6647041b6e49\n        - 59009221c102763beda7cf04\n  developersPermission:\n    type: codefresh:Permission\n    properties:\n      team: ${developersTeam.id}\n      resource: pipeline\n      action: run\n      tags:\n        - demo\n        - test\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "description": "Action to be allowed. Possible values:\n- __create__\n- __read__\n- __update__\n- __delete__\n- __run__ (Only valid for `pipeline` resource)\n- __approve__ (Only valid for `pipeline` resource)\n- __debug__ (Only valid for `pipeline` resource)\n"
                },
                "resource": {
                    "type": "string",
                    "description": "The type of resource the permission applies to. Possible values:\n- __pipeline__\n- __cluster__\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective tags to apply the permission. It supports 2 custom tags:\n- __untagged__ is a “tag” which refers to all clusters that don’t have any tag.\n- __*__ (the star character) means all tags.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The Id of the team the permissions apply to.\n"
                }
            },
            "required": [
                "_id",
                "action",
                "resource",
                "team"
            ],
            "inputProperties": {
                "_id": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "description": "Action to be allowed. Possible values:\n- __create__\n- __read__\n- __update__\n- __delete__\n- __run__ (Only valid for `pipeline` resource)\n- __approve__ (Only valid for `pipeline` resource)\n- __debug__ (Only valid for `pipeline` resource)\n"
                },
                "resource": {
                    "type": "string",
                    "description": "The type of resource the permission applies to. Possible values:\n- __pipeline__\n- __cluster__\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The effective tags to apply the permission. It supports 2 custom tags:\n- __untagged__ is a “tag” which refers to all clusters that don’t have any tag.\n- __*__ (the star character) means all tags.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The Id of the team the permissions apply to.\n"
                }
            },
            "requiredInputs": [
                "action",
                "resource",
                "team"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Permission resources.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action to be allowed. Possible values:\n- __create__\n- __read__\n- __update__\n- __delete__\n- __run__ (Only valid for `pipeline` resource)\n- __approve__ (Only valid for `pipeline` resource)\n- __debug__ (Only valid for `pipeline` resource)\n"
                    },
                    "resource": {
                        "type": "string",
                        "description": "The type of resource the permission applies to. Possible values:\n- __pipeline__\n- __cluster__\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The effective tags to apply the permission. It supports 2 custom tags:\n- __untagged__ is a “tag” which refers to all clusters that don’t have any tag.\n- __*__ (the star character) means all tags.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "The Id of the team the permissions apply to.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/pipeline:Pipeline": {
            "description": "## # Pipeline Resource\n\nThe central component of the Codefresh Platform. Pipelines are workflows that contain individual steps. Each step is responsible for a specific action in the process.\nSee the [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/introduction-to-codefresh-pipelines/) for the details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\n\nconst testProject = new codefresh.Project(\"testProject\", {});\nconst testPipeline = new codefresh.Pipeline(\"testPipeline\", {\n    tags: [\n        \"production\",\n        \"docker\",\n    ],\n    spec: {\n        concurrency: 1,\n        branchConcurrency: 1,\n        triggerConcurrency: 1,\n        priority: 5,\n        specTemplates: [{\n            repo: \"codefresh-contrib/react-sample-app\",\n            path: \"./codefresh.yml\",\n            revision: \"master\",\n            context: \"git\",\n        }],\n        contexts: [\n            \"context1-name\",\n            \"context2-name\",\n        ],\n        triggers: [\n            {\n                branchRegex: \"/.*/gi\",\n                context: \"git\",\n                description: \"Trigger for commits\",\n                disabled: false,\n                events: [\"push.heads\"],\n                modifiedFilesGlob: \"\",\n                name: \"commits\",\n                provider: \"github\",\n                repo: \"codefresh-contrib/react-sample-app\",\n                type: \"git\",\n            },\n            {\n                branchRegex: \"/.*/gi\",\n                context: \"git\",\n                description: \"Trigger for tags\",\n                disabled: false,\n                events: [\"push.tags\"],\n                modifiedFilesGlob: \"\",\n                commitStatusTitle: \"tags-trigger\",\n                name: \"tags\",\n                provider: \"github\",\n                repo: \"codefresh-contrib/react-sample-app\",\n                type: \"git\",\n            },\n        ],\n        variables: {\n            MY_PIP_VAR: \"value\",\n            ANOTHER_PIP_VAR: \"another_value\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest_project = codefresh.Project(\"testProject\")\ntest_pipeline = codefresh.Pipeline(\"testPipeline\",\n    tags=[\n        \"production\",\n        \"docker\",\n    ],\n    spec=codefresh.PipelineSpecArgs(\n        concurrency=1,\n        branch_concurrency=1,\n        trigger_concurrency=1,\n        priority=5,\n        spec_templates=[codefresh.PipelineSpecSpecTemplateArgs(\n            repo=\"codefresh-contrib/react-sample-app\",\n            path=\"./codefresh.yml\",\n            revision=\"master\",\n            context=\"git\",\n        )],\n        contexts=[\n            \"context1-name\",\n            \"context2-name\",\n        ],\n        triggers=[\n            codefresh.PipelineSpecTriggerArgs(\n                branch_regex=\"/.*/gi\",\n                context=\"git\",\n                description=\"Trigger for commits\",\n                disabled=False,\n                events=[\"push.heads\"],\n                modified_files_glob=\"\",\n                name=\"commits\",\n                provider=\"github\",\n                repo=\"codefresh-contrib/react-sample-app\",\n                type=\"git\",\n            ),\n            codefresh.PipelineSpecTriggerArgs(\n                branch_regex=\"/.*/gi\",\n                context=\"git\",\n                description=\"Trigger for tags\",\n                disabled=False,\n                events=[\"push.tags\"],\n                modified_files_glob=\"\",\n                commit_status_title=\"tags-trigger\",\n                name=\"tags\",\n                provider=\"github\",\n                repo=\"codefresh-contrib/react-sample-app\",\n                type=\"git\",\n            ),\n        ],\n        variables={\n            \"MY_PIP_VAR\": \"value\",\n            \"ANOTHER_PIP_VAR\": \"another_value\",\n        },\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testProject = new Codefresh.Project(\"testProject\");\n\n    var testPipeline = new Codefresh.Pipeline(\"testPipeline\", new()\n    {\n        Tags = new[]\n        {\n            \"production\",\n            \"docker\",\n        },\n        Spec = new Codefresh.Inputs.PipelineSpecArgs\n        {\n            Concurrency = 1,\n            BranchConcurrency = 1,\n            TriggerConcurrency = 1,\n            Priority = 5,\n            SpecTemplates = new[]\n            {\n                new Codefresh.Inputs.PipelineSpecSpecTemplateArgs\n                {\n                    Repo = \"codefresh-contrib/react-sample-app\",\n                    Path = \"./codefresh.yml\",\n                    Revision = \"master\",\n                    Context = \"git\",\n                },\n            },\n            Contexts = new[]\n            {\n                \"context1-name\",\n                \"context2-name\",\n            },\n            Triggers = new[]\n            {\n                new Codefresh.Inputs.PipelineSpecTriggerArgs\n                {\n                    BranchRegex = \"/.*/gi\",\n                    Context = \"git\",\n                    Description = \"Trigger for commits\",\n                    Disabled = false,\n                    Events = new[]\n                    {\n                        \"push.heads\",\n                    },\n                    ModifiedFilesGlob = \"\",\n                    Name = \"commits\",\n                    Provider = \"github\",\n                    Repo = \"codefresh-contrib/react-sample-app\",\n                    Type = \"git\",\n                },\n                new Codefresh.Inputs.PipelineSpecTriggerArgs\n                {\n                    BranchRegex = \"/.*/gi\",\n                    Context = \"git\",\n                    Description = \"Trigger for tags\",\n                    Disabled = false,\n                    Events = new[]\n                    {\n                        \"push.tags\",\n                    },\n                    ModifiedFilesGlob = \"\",\n                    CommitStatusTitle = \"tags-trigger\",\n                    Name = \"tags\",\n                    Provider = \"github\",\n                    Repo = \"codefresh-contrib/react-sample-app\",\n                    Type = \"git\",\n                },\n            },\n            Variables = \n            {\n                { \"MY_PIP_VAR\", \"value\" },\n                { \"ANOTHER_PIP_VAR\", \"another_value\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewProject(ctx, \"testProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewPipeline(ctx, \"testPipeline\", \u0026codefresh.PipelineArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"docker\"),\n\t\t\t},\n\t\t\tSpec: \u0026PipelineSpecArgs{\n\t\t\t\tConcurrency:        pulumi.Int(1),\n\t\t\t\tBranchConcurrency:  pulumi.Int(1),\n\t\t\t\tTriggerConcurrency: pulumi.Int(1),\n\t\t\t\tPriority:           pulumi.Int(5),\n\t\t\t\tSpecTemplates: PipelineSpecSpecTemplateArray{\n\t\t\t\t\t\u0026PipelineSpecSpecTemplateArgs{\n\t\t\t\t\t\tRepo:     pulumi.String(\"codefresh-contrib/react-sample-app\"),\n\t\t\t\t\t\tPath:     pulumi.String(\"./codefresh.yml\"),\n\t\t\t\t\t\tRevision: pulumi.String(\"master\"),\n\t\t\t\t\t\tContext:  pulumi.String(\"git\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tContexts: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"context1-name\"),\n\t\t\t\t\tpulumi.String(\"context2-name\"),\n\t\t\t\t},\n\t\t\t\tTriggers: PipelineSpecTriggerArray{\n\t\t\t\t\t\u0026PipelineSpecTriggerArgs{\n\t\t\t\t\t\tBranchRegex: pulumi.String(\"/.*/gi\"),\n\t\t\t\t\t\tContext:     pulumi.String(\"git\"),\n\t\t\t\t\t\tDescription: pulumi.String(\"Trigger for commits\"),\n\t\t\t\t\t\tDisabled:    pulumi.Bool(false),\n\t\t\t\t\t\tEvents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"push.heads\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tModifiedFilesGlob: pulumi.String(\"\"),\n\t\t\t\t\t\tName:              pulumi.String(\"commits\"),\n\t\t\t\t\t\tProvider:          pulumi.String(\"github\"),\n\t\t\t\t\t\tRepo:              pulumi.String(\"codefresh-contrib/react-sample-app\"),\n\t\t\t\t\t\tType:              pulumi.String(\"git\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026PipelineSpecTriggerArgs{\n\t\t\t\t\t\tBranchRegex: pulumi.String(\"/.*/gi\"),\n\t\t\t\t\t\tContext:     pulumi.String(\"git\"),\n\t\t\t\t\t\tDescription: pulumi.String(\"Trigger for tags\"),\n\t\t\t\t\t\tDisabled:    pulumi.Bool(false),\n\t\t\t\t\t\tEvents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"push.tags\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tModifiedFilesGlob: pulumi.String(\"\"),\n\t\t\t\t\t\tCommitStatusTitle: pulumi.String(\"tags-trigger\"),\n\t\t\t\t\t\tName:              pulumi.String(\"tags\"),\n\t\t\t\t\t\tProvider:          pulumi.String(\"github\"),\n\t\t\t\t\t\tRepo:              pulumi.String(\"codefresh-contrib/react-sample-app\"),\n\t\t\t\t\t\tType:              pulumi.String(\"git\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"MY_PIP_VAR\":      pulumi.String(\"value\"),\n\t\t\t\t\t\"ANOTHER_PIP_VAR\": pulumi.String(\"another_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Project;\nimport com.pulumi.codefresh.Pipeline;\nimport com.pulumi.codefresh.PipelineArgs;\nimport com.pulumi.codefresh.inputs.PipelineSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testProject = new Project(\"testProject\");\n\n        var testPipeline = new Pipeline(\"testPipeline\", PipelineArgs.builder()        \n            .tags(            \n                \"production\",\n                \"docker\")\n            .spec(PipelineSpecArgs.builder()\n                .concurrency(1)\n                .branchConcurrency(1)\n                .triggerConcurrency(1)\n                .priority(5)\n                .specTemplates(PipelineSpecSpecTemplateArgs.builder()\n                    .repo(\"codefresh-contrib/react-sample-app\")\n                    .path(\"./codefresh.yml\")\n                    .revision(\"master\")\n                    .context(\"git\")\n                    .build())\n                .contexts(                \n                    \"context1-name\",\n                    \"context2-name\")\n                .triggers(                \n                    PipelineSpecTriggerArgs.builder()\n                        .branchRegex(\"/.*/gi\")\n                        .context(\"git\")\n                        .description(\"Trigger for commits\")\n                        .disabled(false)\n                        .events(\"push.heads\")\n                        .modifiedFilesGlob(\"\")\n                        .name(\"commits\")\n                        .provider(\"github\")\n                        .repo(\"codefresh-contrib/react-sample-app\")\n                        .type(\"git\")\n                        .build(),\n                    PipelineSpecTriggerArgs.builder()\n                        .branchRegex(\"/.*/gi\")\n                        .context(\"git\")\n                        .description(\"Trigger for tags\")\n                        .disabled(false)\n                        .events(\"push.tags\")\n                        .modifiedFilesGlob(\"\")\n                        .commitStatusTitle(\"tags-trigger\")\n                        .name(\"tags\")\n                        .provider(\"github\")\n                        .repo(\"codefresh-contrib/react-sample-app\")\n                        .type(\"git\")\n                        .build())\n                .variables(Map.ofEntries(\n                    Map.entry(\"MY_PIP_VAR\", \"value\"),\n                    Map.entry(\"ANOTHER_PIP_VAR\", \"another_value\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testProject:\n    type: codefresh:Project\n  testPipeline:\n    type: codefresh:Pipeline\n    properties:\n      tags:\n        - production\n        - docker\n      spec:\n        concurrency: 1\n        branchConcurrency: 1\n        triggerConcurrency: 1\n        priority: 5\n        specTemplates:\n          - repo: codefresh-contrib/react-sample-app\n            path: ./codefresh.yml\n            revision: master\n            context: git\n        contexts:\n          - context1-name\n          - context2-name\n        triggers:\n          - branchRegex: /.*/gi\n            context: git\n            description: Trigger for commits\n            disabled: false\n            events:\n              - push.heads\n            modifiedFilesGlob:\n            name: commits\n            provider: github\n            repo: codefresh-contrib/react-sample-app\n            type: git\n          - branchRegex: /.*/gi\n            context: git\n            description: Trigger for tags\n            disabled: false\n            events:\n              - push.tags\n            modifiedFilesGlob:\n            commitStatusTitle: tags-trigger\n            name: tags\n            provider: github\n            repo: codefresh-contrib/react-sample-app\n            type: git\n        variables:\n          MY_PIP_VAR: value\n          ANOTHER_PIP_VAR: another_value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/pipeline:Pipeline test xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "isPublic": {
                    "type": "boolean",
                    "description": "Boolean that specifies if the build logs are publicly accessible. Default: false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the pipeline.\n"
                },
                "originalYamlString": {
                    "type": "string",
                    "description": "A string with original yaml pipeline.\n- `original_yaml_string = \"version: \\\"1.0\\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\\"ACC tests\\\"\"`\n- or `original_yaml_string = file(\"/path/to/my/codefresh.yml\")`\n"
                },
                "projectId": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer",
                    "description": "The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.\n"
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/PipelineSpec:PipelineSpec",
                    "description": "A collection of `spec` blocks as documented below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a project for easy management and access control.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "revision"
            ],
            "inputProperties": {
                "isPublic": {
                    "type": "boolean",
                    "description": "Boolean that specifies if the build logs are publicly accessible. Default: false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the pipeline.\n"
                },
                "originalYamlString": {
                    "type": "string",
                    "description": "A string with original yaml pipeline.\n- `original_yaml_string = \"version: \\\"1.0\\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\\"ACC tests\\\"\"`\n- or `original_yaml_string = file(\"/path/to/my/codefresh.yml\")`\n"
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/PipelineSpec:PipelineSpec",
                    "description": "A collection of `spec` blocks as documented below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a project for easy management and access control.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "isPublic": {
                        "type": "boolean",
                        "description": "Boolean that specifies if the build logs are publicly accessible. Default: false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the pipeline.\n"
                    },
                    "originalYamlString": {
                        "type": "string",
                        "description": "A string with original yaml pipeline.\n- `original_yaml_string = \"version: \\\"1.0\\\"\\nsteps:\\n  test:\\n    image: alpine:latest\\n    commands:\\n      - echo \\\"ACC tests\\\"\"`\n- or `original_yaml_string = file(\"/path/to/my/codefresh.yml\")`\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The pipeline's revision. Should be added to the **lifecycle/ignore_changes** or incremented mannually each update.\n"
                    },
                    "spec": {
                        "$ref": "#/types/codefresh:index/PipelineSpec:PipelineSpec",
                        "description": "A collection of `spec` blocks as documented below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to mark a project for easy management and access control.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/pipelineCronTrigger:PipelineCronTrigger": {
            "description": "## # Pipeline Cron Trigger resource\n\nPipeline Cron Trigger is used to create cron-based triggers for pipeilnes.\nSee the [documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/triggers/cron-triggers/).\n",
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message which will be passed to the pipeline upon each trigger.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "The pipeline to which this trigger belongs.\n"
                }
            },
            "required": [
                "expression",
                "message",
                "pipelineId"
            ],
            "inputProperties": {
                "expression": {
                    "type": "string",
                    "description": "The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message which will be passed to the pipeline upon each trigger.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "The pipeline to which this trigger belongs.\n"
                }
            },
            "requiredInputs": [
                "expression",
                "message",
                "pipelineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineCronTrigger resources.\n",
                "properties": {
                    "expression": {
                        "type": "string",
                        "description": "The cron expression. Visit [this page](https://github.com/codefresh-io/cronus/blob/master/docs/expression.md) to learn about the supported cron expression format and aliases.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message which will be passed to the pipeline upon each trigger.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "The pipeline to which this trigger belongs.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/project:Project": {
            "description": "## # Project Resource\n\nThe top-level concept in Codefresh. You can create projects to group pipelines that are related. In most cases a single project will be a single application (that itself contains many micro-services). You are free to use projects as you see fit. For example, you could create a project for a specific Kubernetes cluster or a specific team/department.\nMore about pipeline concepts see in the [official documentation](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/pipelines/#pipeline-concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst test = new codefresh.Project(\"test\", {\n    tags: [\n        \"production\",\n        \"docker\",\n    ],\n    variables: {\n        go_version: \"1.13\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest = codefresh.Project(\"test\",\n    tags=[\n        \"production\",\n        \"docker\",\n    ],\n    variables={\n        \"go_version\": \"1.13\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Codefresh.Project(\"test\", new()\n    {\n        Tags = new[]\n        {\n            \"production\",\n            \"docker\",\n        },\n        Variables = \n        {\n            { \"go_version\", \"1.13\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewProject(ctx, \"test\", \u0026codefresh.ProjectArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t\tpulumi.String(\"docker\"),\n\t\t\t},\n\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\"go_version\": pulumi.String(\"1.13\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Project;\nimport com.pulumi.codefresh.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Project(\"test\", ProjectArgs.builder()        \n            .tags(            \n                \"production\",\n                \"docker\")\n            .variables(Map.of(\"go_version\", \"1.13\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: codefresh:Project\n    properties:\n      tags:\n        - production\n        - docker\n      variables:\n        go_version: 1.13\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/project:Project test xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The display name for the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a project for easy management and access control.\n"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "project variables.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The display name for the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a project for easy management and access control.\n"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "project variables.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The display name for the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to mark a project for easy management and access control.\n"
                    },
                    "variables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "project variables.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/registry:Registry": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "_(Optional, Default = false)_ default registry\n"
                },
                "fallbackRegistry": {
                    "type": "string",
                    "description": "_(Optional)_ fallback registry\n"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "_(Required)_ some unique name for registry\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "_(Optional, Default = true)_ primary registry\n"
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/RegistrySpec:RegistrySpec",
                    "description": "_(Required)_ A `spec` block as documented below.\n"
                }
            },
            "required": [
                "kind",
                "name",
                "spec"
            ],
            "inputProperties": {
                "default": {
                    "type": "boolean",
                    "description": "_(Optional, Default = false)_ default registry\n"
                },
                "fallbackRegistry": {
                    "type": "string",
                    "description": "_(Optional)_ fallback registry\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "_(Required)_ some unique name for registry\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "_(Optional, Default = true)_ primary registry\n"
                },
                "spec": {
                    "$ref": "#/types/codefresh:index/RegistrySpec:RegistrySpec",
                    "description": "_(Required)_ A `spec` block as documented below.\n"
                }
            },
            "requiredInputs": [
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registry resources.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "_(Optional, Default = false)_ default registry\n"
                    },
                    "fallbackRegistry": {
                        "type": "string",
                        "description": "_(Optional)_ fallback registry\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "_(Required)_ some unique name for registry\n"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "_(Optional, Default = true)_ primary registry\n"
                    },
                    "spec": {
                        "$ref": "#/types/codefresh:index/RegistrySpec:RegistrySpec",
                        "description": "_(Required)_ A `spec` block as documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/stepTypes:StepTypes": {
            "description": "## # Step-types Resource\n\nThe Step-types resource allows to create your own typed step and manage all it's published versions.\nThe resource allows to handle the life-cycle of the version by allowing specifying multiple blocks `version` where the user provides a version number and the yaml file representing the plugin.\nMore about custom steps in the [official documentation](https://codefresh.io/docs/docs/codefresh-yaml/steps/#creating-a-typed-codefresh-plugin).\n\n## Known limitations and disclaimers\n\n### Version and name in yaml Metadata are ignored.\nThe version and name of the step declared in the yaml files are superseeded by the attributes specified at resource level:\n- `name` : at top level\n- `version_numer`: specified in the `version` block\nThe above are added/replaced at runtime time.\n\n### Number of API requests\nThis resource makes a lot of additional API calls to validate the steps and retrieve all the version available.\nCaution is recommended on the amount of versions maintained and the number of resources defined in a single project.\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the step-type\n"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/StepTypesVersion:StepTypesVersion"
                    },
                    "description": "A collection of `version` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "versions"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name for the step-type\n",
                    "willReplaceOnChanges": true
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/StepTypesVersion:StepTypesVersion"
                    },
                    "description": "A collection of `version` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "versions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StepTypes resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name for the step-type\n",
                        "willReplaceOnChanges": true
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/StepTypesVersion:StepTypesVersion"
                        },
                        "description": "A collection of `version` blocks as documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/team:Team": {
            "description": "## # Team resource\n\nTeam is used as a part of access control and allow to define what teams have access to which clusters and pipelines.\nSee the [documentation](https://codefresh.io/docs/docs/administration/access-control/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst developers = new codefresh.Team(\"developers\", {\n    users: [\n        \"5efc3cb6355c6647041b6e49\",\n        \"59009221c102763beda7cf04\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ndevelopers = codefresh.Team(\"developers\", users=[\n    \"5efc3cb6355c6647041b6e49\",\n    \"59009221c102763beda7cf04\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developers = new Codefresh.Team(\"developers\", new()\n    {\n        Users = new[]\n        {\n            \"5efc3cb6355c6647041b6e49\",\n            \"59009221c102763beda7cf04\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := codefresh.NewTeam(ctx, \"developers\", \u0026codefresh.TeamArgs{\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5efc3cb6355c6647041b6e49\"),\n\t\t\t\tpulumi.String(\"59009221c102763beda7cf04\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Team;\nimport com.pulumi.codefresh.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developers = new Team(\"developers\", TeamArgs.builder()        \n            .users(            \n                \"5efc3cb6355c6647041b6e49\",\n                \"59009221c102763beda7cf04\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  developers:\n    type: codefresh:Team\n    properties:\n      users:\n        - 5efc3cb6355c6647041b6e49\n        - 59009221c102763beda7cf04\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The relevant Account ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the team.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a team for easy management.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the team. Possible values:\n- __default__\n- __admin__\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user IDs that should be in the team.\n"
                }
            },
            "required": [
                "accountId",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The relevant Account ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the team.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to mark a team for easy management.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the team. Possible values:\n- __default__\n- __admin__\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user IDs that should be in the team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The relevant Account ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the team.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to mark a team for easy management.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the team. Possible values:\n- __default__\n- __admin__\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user IDs that should be in the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "codefresh:index/user:User": {
            "description": "## # User resource\n\nUse this resource to create a new user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\n\nconst test = new codefresh.Account(\"test\", {\n    limits: [{\n        collaborators: 25,\n        dataRetentionWeeks: 5,\n    }],\n    builds: [{\n        parallel: 2,\n    }],\n});\nconst _new = new codefresh.User(\"new\", {\n    email: \"\u003cEMAIL\u003e\",\n    userName: \"\u003cUSER\u003e\",\n    activate: true,\n    roles: [\n        \"Admin\",\n        \"User\",\n    ],\n    logins: [\n        {\n            idpId: data.codefresh_idps.idp_azure.id,\n            sso: true,\n        },\n        {\n            idpId: data.codefresh_idps.local.id,\n        },\n    ],\n    personal: {\n        firstName: \"John\",\n        lastName: \"Smith\",\n    },\n    accounts: [\n        test.id,\n        \"59009117c102763beda7ce71\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ntest = codefresh.Account(\"test\",\n    limits=[codefresh.AccountLimitArgs(\n        collaborators=25,\n        data_retention_weeks=5,\n    )],\n    builds=[codefresh.AccountBuildArgs(\n        parallel=2,\n    )])\nnew = codefresh.User(\"new\",\n    email=\"\u003cEMAIL\u003e\",\n    user_name=\"\u003cUSER\u003e\",\n    activate=True,\n    roles=[\n        \"Admin\",\n        \"User\",\n    ],\n    logins=[\n        codefresh.UserLoginArgs(\n            idp_id=data[\"codefresh_idps\"][\"idp_azure\"][\"id\"],\n            sso=True,\n        ),\n        codefresh.UserLoginArgs(\n            idp_id=data[\"codefresh_idps\"][\"local\"][\"id\"],\n        ),\n    ],\n    personal=codefresh.UserPersonalArgs(\n        first_name=\"John\",\n        last_name=\"Smith\",\n    ),\n    accounts=[\n        test.id,\n        \"59009117c102763beda7ce71\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Codefresh.Account(\"test\", new()\n    {\n        Limits = new[]\n        {\n            new Codefresh.Inputs.AccountLimitArgs\n            {\n                Collaborators = 25,\n                DataRetentionWeeks = 5,\n            },\n        },\n        Builds = new[]\n        {\n            new Codefresh.Inputs.AccountBuildArgs\n            {\n                Parallel = 2,\n            },\n        },\n    });\n\n    var @new = new Codefresh.User(\"new\", new()\n    {\n        Email = \"\u003cEMAIL\u003e\",\n        UserName = \"\u003cUSER\u003e\",\n        Activate = true,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"User\",\n        },\n        Logins = new[]\n        {\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = data.Codefresh_idps.Idp_azure.Id,\n                Sso = true,\n            },\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = data.Codefresh_idps.Local.Id,\n            },\n        },\n        Personal = new Codefresh.Inputs.UserPersonalArgs\n        {\n            FirstName = \"John\",\n            LastName = \"Smith\",\n        },\n        Accounts = new[]\n        {\n            test.Id,\n            \"59009117c102763beda7ce71\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := codefresh.NewAccount(ctx, \"test\", \u0026codefresh.AccountArgs{\n\t\t\tLimits: AccountLimitArray{\n\t\t\t\t\u0026AccountLimitArgs{\n\t\t\t\t\tCollaborators:      pulumi.Int(25),\n\t\t\t\t\tDataRetentionWeeks: pulumi.Int(5),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBuilds: AccountBuildArray{\n\t\t\t\t\u0026AccountBuildArgs{\n\t\t\t\t\tParallel: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewUser(ctx, \"new\", \u0026codefresh.UserArgs{\n\t\t\tEmail:    pulumi.String(\"\u003cEMAIL\u003e\"),\n\t\t\tUserName: pulumi.String(\"\u003cUSER\u003e\"),\n\t\t\tActivate: pulumi.Bool(true),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t},\n\t\t\tLogins: UserLoginArray{\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.Any(data.Codefresh_idps.Idp_azure.Id),\n\t\t\t\t\tSso:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.Any(data.Codefresh_idps.Local.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPersonal: \u0026UserPersonalArgs{\n\t\t\t\tFirstName: pulumi.String(\"John\"),\n\t\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\t},\n\t\t\tAccounts: pulumi.StringArray{\n\t\t\t\ttest.ID(),\n\t\t\t\tpulumi.String(\"59009117c102763beda7ce71\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.codefresh.AccountArgs;\nimport com.pulumi.codefresh.inputs.AccountLimitArgs;\nimport com.pulumi.codefresh.inputs.AccountBuildArgs;\nimport com.pulumi.codefresh.User;\nimport com.pulumi.codefresh.UserArgs;\nimport com.pulumi.codefresh.inputs.UserLoginArgs;\nimport com.pulumi.codefresh.inputs.UserPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Account(\"test\", AccountArgs.builder()        \n            .limits(AccountLimitArgs.builder()\n                .collaborators(25)\n                .dataRetentionWeeks(5)\n                .build())\n            .builds(AccountBuildArgs.builder()\n                .parallel(2)\n                .build())\n            .build());\n\n        var new_ = new User(\"new\", UserArgs.builder()        \n            .email(\"\u003cEMAIL\u003e\")\n            .userName(\"\u003cUSER\u003e\")\n            .activate(true)\n            .roles(            \n                \"Admin\",\n                \"User\")\n            .logins(            \n                UserLoginArgs.builder()\n                    .idpId(data.codefresh_idps().idp_azure().id())\n                    .sso(true)\n                    .build(),\n                UserLoginArgs.builder()\n                    .idpId(data.codefresh_idps().local().id())\n                    .build())\n            .personal(UserPersonalArgs.builder()\n                .firstName(\"John\")\n                .lastName(\"Smith\")\n                .build())\n            .accounts(            \n                test.id(),\n                \"59009117c102763beda7ce71\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: codefresh:Account\n    properties:\n      limits:\n        - collaborators: 25\n          dataRetentionWeeks: 5\n      builds:\n        - parallel: 2\n  new:\n    type: codefresh:User\n    properties:\n      email: \u003cEMAIL\u003e\n      userName: \u003cUSER\u003e\n      activate: true\n      roles:\n        - Admin\n        - User\n      logins:\n        - idpId: ${data.codefresh_idps.idp_azure.id}\n          sso: true\n        - idpId: ${data.codefresh_idps.local.id}\n      personal:\n        firstName: John\n        lastName: Smith\n      accounts:\n        - ${test.id}\n        - 59009117c102763beda7ce71\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import codefresh:index/user:User new xxxxxxxxxxxxxxxxxxx\n```\n\n ",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user roles. Possible values - `Admin`, `User`.\n"
                },
                "activate": {
                    "type": "boolean",
                    "description": "Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.\n"
                },
                "email": {
                    "type": "string",
                    "description": "A new user email.\n"
                },
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/UserLogin:UserLogin"
                    },
                    "description": "A collection of `login` blocks as documented below.\n"
                },
                "personal": {
                    "$ref": "#/types/codefresh:index/UserPersonal:UserPersonal",
                    "description": "A collection of `personal` blocks as documented below.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "shortProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/UserShortProfile:UserShortProfile"
                    }
                },
                "status": {
                    "type": "string"
                },
                "userName": {
                    "type": "string",
                    "description": "The new user name.\n"
                }
            },
            "required": [
                "accounts",
                "email",
                "shortProfiles",
                "status",
                "userName"
            ],
            "inputProperties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user roles. Possible values - `Admin`, `User`.\n"
                },
                "activate": {
                    "type": "boolean",
                    "description": "Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.\n"
                },
                "email": {
                    "type": "string",
                    "description": "A new user email.\n"
                },
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/codefresh:index/UserLogin:UserLogin"
                    },
                    "description": "A collection of `login` blocks as documented below.\n"
                },
                "personal": {
                    "$ref": "#/types/codefresh:index/UserPersonal:UserPersonal",
                    "description": "A collection of `personal` blocks as documented below.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userName": {
                    "type": "string",
                    "description": "The new user name.\n"
                }
            },
            "requiredInputs": [
                "accounts",
                "email",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user roles. Possible values - `Admin`, `User`.\n"
                    },
                    "activate": {
                        "type": "boolean",
                        "description": "Boolean. Activate the new use or not. If a new user is not activate, it'll be left pending.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "A new user email.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/UserLogin:UserLogin"
                        },
                        "description": "A collection of `login` blocks as documented below.\n"
                    },
                    "personal": {
                        "$ref": "#/types/codefresh:index/UserPersonal:UserPersonal",
                        "description": "A collection of `personal` blocks as documented below.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shortProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/UserShortProfile:UserShortProfile"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The new user name.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "codefresh:index/getAccount:getAccount": {
            "description": "## # account data module\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst acc = codefresh.getAccount({\n    name: \"acc1\",\n});\nconst user1 = new codefresh.User(\"user1\", {\n    email: \"user1@example.com\",\n    userName: \"user1\",\n    accounts: [acc.then(acc =\u003e acc.id)],\n    activate: true,\n    roles: [\n        \"Admin\",\n        \"User\",\n    ],\n    logins: [\n        {\n            idpId: data.codefresh_idps.idp_azure.id,\n            sso: true,\n        },\n        {\n            idpId: data.codefresh_idps.local.id,\n        },\n    ],\n    personal: {\n        firstName: \"John\",\n        lastName: \"Smith\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\nacc = codefresh.get_account(name=\"acc1\")\nuser1 = codefresh.User(\"user1\",\n    email=\"user1@example.com\",\n    user_name=\"user1\",\n    accounts=[acc.id],\n    activate=True,\n    roles=[\n        \"Admin\",\n        \"User\",\n    ],\n    logins=[\n        codefresh.UserLoginArgs(\n            idp_id=data[\"codefresh_idps\"][\"idp_azure\"][\"id\"],\n            sso=True,\n        ),\n        codefresh.UserLoginArgs(\n            idp_id=data[\"codefresh_idps\"][\"local\"][\"id\"],\n        ),\n    ],\n    personal=codefresh.UserPersonalArgs(\n        first_name=\"John\",\n        last_name=\"Smith\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acc = Codefresh.GetAccount.Invoke(new()\n    {\n        Name = \"acc1\",\n    });\n\n    var user1 = new Codefresh.User(\"user1\", new()\n    {\n        Email = \"user1@example.com\",\n        UserName = \"user1\",\n        Accounts = new[]\n        {\n            acc.Apply(getAccountResult =\u003e getAccountResult.Id),\n        },\n        Activate = true,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"User\",\n        },\n        Logins = new[]\n        {\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = data.Codefresh_idps.Idp_azure.Id,\n                Sso = true,\n            },\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = data.Codefresh_idps.Local.Id,\n            },\n        },\n        Personal = new Codefresh.Inputs.UserPersonalArgs\n        {\n            FirstName = \"John\",\n            LastName = \"Smith\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tacc, err := codefresh.LookupAccount(ctx, \u0026GetAccountArgs{\n\t\t\tName: pulumi.StringRef(\"acc1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewUser(ctx, \"user1\", \u0026codefresh.UserArgs{\n\t\t\tEmail:    pulumi.String(\"user1@example.com\"),\n\t\t\tUserName: pulumi.String(\"user1\"),\n\t\t\tAccounts: pulumi.StringArray{\n\t\t\t\tpulumi.String(acc.Id),\n\t\t\t},\n\t\t\tActivate: pulumi.Bool(true),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t},\n\t\t\tLogins: UserLoginArray{\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.Any(data.Codefresh_idps.Idp_azure.Id),\n\t\t\t\t\tSso:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.Any(data.Codefresh_idps.Local.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPersonal: \u0026UserPersonalArgs{\n\t\t\t\tFirstName: pulumi.String(\"John\"),\n\t\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetAccountArgs;\nimport com.pulumi.codefresh.User;\nimport com.pulumi.codefresh.UserArgs;\nimport com.pulumi.codefresh.inputs.UserLoginArgs;\nimport com.pulumi.codefresh.inputs.UserPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var acc = CodefreshFunctions.getAccount(GetAccountArgs.builder()\n            .name(\"acc1\")\n            .build());\n\n        var user1 = new User(\"user1\", UserArgs.builder()        \n            .email(\"user1@example.com\")\n            .userName(\"user1\")\n            .accounts(acc.applyValue(getAccountResult -\u003e getAccountResult.id()))\n            .activate(true)\n            .roles(            \n                \"Admin\",\n                \"User\")\n            .logins(            \n                UserLoginArgs.builder()\n                    .idpId(data.codefresh_idps().idp_azure().id())\n                    .sso(true)\n                    .build(),\n                UserLoginArgs.builder()\n                    .idpId(data.codefresh_idps().local().id())\n                    .build())\n            .personal(UserPersonalArgs.builder()\n                .firstName(\"John\")\n                .lastName(\"Smith\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user1:\n    type: codefresh:User\n    properties:\n      email: user1@example.com\n      userName: user1\n      accounts:\n        - ${acc.id}\n      activate: true\n      roles:\n        - Admin\n        - User\n      logins:\n        - idpId: ${data.codefresh_idps.idp_azure.id}\n          sso: true\n        - idpId: ${data.codefresh_idps.local.id}\n      personal:\n        firstName: John\n        lastName: Smith\nvariables:\n  acc:\n    Fn::Invoke:\n      Function: codefresh:getAccount\n      Arguments:\n        name: acc1\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "codefresh:index/getContext:getContext": {
            "description": "## # Data Source: codefresh.Context\n\nThis data source allows to retrieve information on any defined context\n",
            "inputs": {
                "description": "A collection of arguments for invoking getContext.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the context to be retrived\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContext.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The yaml string representing the context. Use the `yamldecode` function to access the values belonging the context.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "String identifying the type of extracted context. E.g. `config`, `secret`, `git.github-app`, etc.\n"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "codefresh:index/getCurrentAccount:getCurrentAccount": {
            "description": "## # current_account data module\n\nReturn current account (owner of the token) and its users \n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst acc = codefresh.getCurrentAccount({});\nexport const currentAc = acc;\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\nacc = codefresh.get_current_account()\npulumi.export(\"currentAc\", acc)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acc = Codefresh.GetCurrentAccount.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"currentAc\"] = acc.Apply(getCurrentAccountResult =\u003e getCurrentAccountResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tacc, err := codefresh.GetCurrentAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"currentAc\", acc)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetCurrentAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var acc = CodefreshFunctions.getCurrentAccount();\n\n        ctx.export(\"currentAc\", acc.applyValue(getCurrentAccountResult -\u003e getCurrentAccountResult));\n    }\n}\n```\n```yaml\nvariables:\n  acc:\n    Fn::Invoke:\n      Function: codefresh:getCurrentAccount\n      Arguments: {}\noutputs:\n  currentAc: ${acc}\n```\n\nThe output example: \n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCurrentAccount.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getCurrentAccountUser:getCurrentAccountUser"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getCurrentAccountUser:getCurrentAccountUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "codefresh:index/getIdps:getIdps": {
            "description": "## # data codefresh.getIdps\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst idpAzure = codefresh.getIdps({\n    displayName: \"codefresh-onprem-tst-2\",\n    clientType: \"azure\",\n});\nconst local = codefresh.getIdps({\n    displayName: \"local\",\n});\nconst acc = new codefresh.Account(\"acc\", {\n    features: _var.accountFeatures,\n    limits: [{\n        collaborators: 25,\n        dataRetentionWeeks: 5,\n    }],\n    builds: [{\n        parallel: 25,\n        nodes: 7,\n    }],\n});\nconst user1 = new codefresh.User(\"user1\", {\n    email: \"user1@example.com\",\n    userName: \"user1\",\n    activate: true,\n    roles: [\n        \"Admin\",\n        \"User\",\n    ],\n    logins: [\n        {\n            idpId: idpAzure.then(idpAzure =\u003e idpAzure.id),\n            sso: true,\n        },\n        {\n            idpId: local.then(local =\u003e local.id),\n        },\n    ],\n    personal: {\n        firstName: \"John\",\n        lastName: \"Smith\",\n    },\n    accounts: [acc.id],\n});\nconst accIdp = new codefresh.IdpAccounts(\"accIdp\", {\n    idpId: idpAzure.then(idpAzure =\u003e idpAzure.id),\n    accountIds: [acc.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\nidp_azure = codefresh.get_idps(display_name=\"codefresh-onprem-tst-2\",\n    client_type=\"azure\")\nlocal = codefresh.get_idps(display_name=\"local\")\nacc = codefresh.Account(\"acc\",\n    features=var[\"accountFeatures\"],\n    limits=[codefresh.AccountLimitArgs(\n        collaborators=25,\n        data_retention_weeks=5,\n    )],\n    builds=[codefresh.AccountBuildArgs(\n        parallel=25,\n        nodes=7,\n    )])\nuser1 = codefresh.User(\"user1\",\n    email=\"user1@example.com\",\n    user_name=\"user1\",\n    activate=True,\n    roles=[\n        \"Admin\",\n        \"User\",\n    ],\n    logins=[\n        codefresh.UserLoginArgs(\n            idp_id=idp_azure.id,\n            sso=True,\n        ),\n        codefresh.UserLoginArgs(\n            idp_id=local.id,\n        ),\n    ],\n    personal=codefresh.UserPersonalArgs(\n        first_name=\"John\",\n        last_name=\"Smith\",\n    ),\n    accounts=[acc.id])\nacc_idp = codefresh.IdpAccounts(\"accIdp\",\n    idp_id=idp_azure.id,\n    account_ids=[acc.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var idpAzure = Codefresh.GetIdps.Invoke(new()\n    {\n        DisplayName = \"codefresh-onprem-tst-2\",\n        ClientType = \"azure\",\n    });\n\n    var local = Codefresh.GetIdps.Invoke(new()\n    {\n        DisplayName = \"local\",\n    });\n\n    var acc = new Codefresh.Account(\"acc\", new()\n    {\n        Features = @var.AccountFeatures,\n        Limits = new[]\n        {\n            new Codefresh.Inputs.AccountLimitArgs\n            {\n                Collaborators = 25,\n                DataRetentionWeeks = 5,\n            },\n        },\n        Builds = new[]\n        {\n            new Codefresh.Inputs.AccountBuildArgs\n            {\n                Parallel = 25,\n                Nodes = 7,\n            },\n        },\n    });\n\n    var user1 = new Codefresh.User(\"user1\", new()\n    {\n        Email = \"user1@example.com\",\n        UserName = \"user1\",\n        Activate = true,\n        Roles = new[]\n        {\n            \"Admin\",\n            \"User\",\n        },\n        Logins = new[]\n        {\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = idpAzure.Apply(getIdpsResult =\u003e getIdpsResult.Id),\n                Sso = true,\n            },\n            new Codefresh.Inputs.UserLoginArgs\n            {\n                IdpId = local.Apply(getIdpsResult =\u003e getIdpsResult.Id),\n            },\n        },\n        Personal = new Codefresh.Inputs.UserPersonalArgs\n        {\n            FirstName = \"John\",\n            LastName = \"Smith\",\n        },\n        Accounts = new[]\n        {\n            acc.Id,\n        },\n    });\n\n    var accIdp = new Codefresh.IdpAccounts(\"accIdp\", new()\n    {\n        IdpId = idpAzure.Apply(getIdpsResult =\u003e getIdpsResult.Id),\n        AccountIds = new[]\n        {\n            acc.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tidpAzure, err := codefresh.GetIdps(ctx, \u0026GetIdpsArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"codefresh-onprem-tst-2\"),\n\t\t\tClientType:  pulumi.StringRef(\"azure\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlocal, err := codefresh.GetIdps(ctx, \u0026GetIdpsArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"local\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tacc, err := codefresh.NewAccount(ctx, \"acc\", \u0026codefresh.AccountArgs{\n\t\t\tFeatures: pulumi.Any(_var.AccountFeatures),\n\t\t\tLimits: AccountLimitArray{\n\t\t\t\t\u0026AccountLimitArgs{\n\t\t\t\t\tCollaborators:      pulumi.Int(25),\n\t\t\t\t\tDataRetentionWeeks: pulumi.Int(5),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBuilds: AccountBuildArray{\n\t\t\t\t\u0026AccountBuildArgs{\n\t\t\t\t\tParallel: pulumi.Int(25),\n\t\t\t\t\tNodes:    pulumi.Int(7),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewUser(ctx, \"user1\", \u0026codefresh.UserArgs{\n\t\t\tEmail:    pulumi.String(\"user1@example.com\"),\n\t\t\tUserName: pulumi.String(\"user1\"),\n\t\t\tActivate: pulumi.Bool(true),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Admin\"),\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t},\n\t\t\tLogins: UserLoginArray{\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.String(idpAzure.Id),\n\t\t\t\t\tSso:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026UserLoginArgs{\n\t\t\t\t\tIdpId: pulumi.String(local.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPersonal: \u0026UserPersonalArgs{\n\t\t\t\tFirstName: pulumi.String(\"John\"),\n\t\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\t},\n\t\t\tAccounts: pulumi.StringArray{\n\t\t\t\tacc.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewIdpAccounts(ctx, \"accIdp\", \u0026codefresh.IdpAccountsArgs{\n\t\t\tIdpId: pulumi.String(idpAzure.Id),\n\t\t\tAccountIds: pulumi.StringArray{\n\t\t\t\tacc.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetIdpsArgs;\nimport com.pulumi.codefresh.Account;\nimport com.pulumi.codefresh.AccountArgs;\nimport com.pulumi.codefresh.inputs.AccountLimitArgs;\nimport com.pulumi.codefresh.inputs.AccountBuildArgs;\nimport com.pulumi.codefresh.User;\nimport com.pulumi.codefresh.UserArgs;\nimport com.pulumi.codefresh.inputs.UserLoginArgs;\nimport com.pulumi.codefresh.inputs.UserPersonalArgs;\nimport com.pulumi.codefresh.IdpAccounts;\nimport com.pulumi.codefresh.IdpAccountsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var idpAzure = CodefreshFunctions.getIdps(GetIdpsArgs.builder()\n            .displayName(\"codefresh-onprem-tst-2\")\n            .clientType(\"azure\")\n            .build());\n\n        final var local = CodefreshFunctions.getIdps(GetIdpsArgs.builder()\n            .displayName(\"local\")\n            .build());\n\n        var acc = new Account(\"acc\", AccountArgs.builder()        \n            .features(var_.accountFeatures())\n            .limits(AccountLimitArgs.builder()\n                .collaborators(25)\n                .dataRetentionWeeks(5)\n                .build())\n            .builds(AccountBuildArgs.builder()\n                .parallel(25)\n                .nodes(7)\n                .build())\n            .build());\n\n        var user1 = new User(\"user1\", UserArgs.builder()        \n            .email(\"user1@example.com\")\n            .userName(\"user1\")\n            .activate(true)\n            .roles(            \n                \"Admin\",\n                \"User\")\n            .logins(            \n                UserLoginArgs.builder()\n                    .idpId(idpAzure.applyValue(getIdpsResult -\u003e getIdpsResult.id()))\n                    .sso(true)\n                    .build(),\n                UserLoginArgs.builder()\n                    .idpId(local.applyValue(getIdpsResult -\u003e getIdpsResult.id()))\n                    .build())\n            .personal(UserPersonalArgs.builder()\n                .firstName(\"John\")\n                .lastName(\"Smith\")\n                .build())\n            .accounts(acc.id())\n            .build());\n\n        var accIdp = new IdpAccounts(\"accIdp\", IdpAccountsArgs.builder()        \n            .idpId(idpAzure.applyValue(getIdpsResult -\u003e getIdpsResult.id()))\n            .accountIds(acc.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acc:\n    type: codefresh:Account\n    properties:\n      features: ${var.accountFeatures}\n      limits:\n        - collaborators: 25\n          dataRetentionWeeks: 5\n      builds:\n        - parallel: 25\n          nodes: 7\n  user1:\n    type: codefresh:User\n    properties:\n      email: user1@example.com\n      userName: user1\n      activate: true\n      roles:\n        - Admin\n        - User\n      logins:\n        - idpId: ${idpAzure.id}\n          sso: true\n        - idpId: ${local.id}\n      personal:\n        firstName: John\n        lastName: Smith\n      accounts:\n        - ${acc.id}\n  accIdp:\n    type: codefresh:IdpAccounts\n    properties:\n      idpId: ${idpAzure.id}\n      accountIds:\n        - ${acc.id}\nvariables:\n  idpAzure:\n    Fn::Invoke:\n      Function: codefresh:getIdps\n      Arguments:\n        displayName: codefresh-onprem-tst-2\n        clientType: azure\n  local:\n    Fn::Invoke:\n      Function: codefresh:getIdps\n      Arguments:\n        displayName: local\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIdps.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "clientName": {
                        "type": "string"
                    },
                    "clientType": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIdps.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "accessToken": {
                        "type": "string"
                    },
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "appId": {
                        "type": "string"
                    },
                    "clientHost": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientName": {
                        "type": "string"
                    },
                    "clientSecret": {
                        "type": "string"
                    },
                    "clientType": {
                        "type": "string"
                    },
                    "cookieIv": {
                        "type": "string"
                    },
                    "cookieKey": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenant": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "accounts",
                    "appId",
                    "clientHost",
                    "clientId",
                    "clientSecret",
                    "cookieIv",
                    "cookieKey",
                    "scopes",
                    "tenant",
                    "id"
                ]
            }
        },
        "codefresh:index/getRegistry:getRegistry": {
            "description": "## # Data Source: codefresh.Registry\n\nThis data source allows retrieving information on any existing registry\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst dockerhub = codefresh.getRegistry({\n    name: \"dockerhub\",\n});\n// example with using data reference to existing registry, not managed by terraform\n// \"dockerhub\" registry will be used as fallback for \"dockerhub1\"\nconst dockerhub1 = new codefresh.Registry(\"dockerhub1\", {\n    primary: dockerhub.then(dockerhub =\u003e !dockerhub.primary),\n    spec: {\n        dockerhub: {\n            username: \"test\",\n            password: \"test\",\n        },\n    },\n    fallbackRegistry: dockerhub.then(dockerhub =\u003e dockerhub.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\ndockerhub = codefresh.get_registry(name=\"dockerhub\")\n# example with using data reference to existing registry, not managed by terraform\n# \"dockerhub\" registry will be used as fallback for \"dockerhub1\"\ndockerhub1 = codefresh.Registry(\"dockerhub1\",\n    primary=not dockerhub.primary,\n    spec=codefresh.RegistrySpecArgs(\n        dockerhub=codefresh.RegistrySpecDockerhubArgs(\n            username=\"test\",\n            password=\"test\",\n        ),\n    ),\n    fallback_registry=dockerhub.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dockerhub = Codefresh.GetRegistry.Invoke(new()\n    {\n        Name = \"dockerhub\",\n    });\n\n    // example with using data reference to existing registry, not managed by terraform\n    // \"dockerhub\" registry will be used as fallback for \"dockerhub1\"\n    var dockerhub1 = new Codefresh.Registry(\"dockerhub1\", new()\n    {\n        Primary = !dockerhub.Apply(getRegistryResult =\u003e getRegistryResult.Primary),\n        Spec = new Codefresh.Inputs.RegistrySpecArgs\n        {\n            Dockerhub = new Codefresh.Inputs.RegistrySpecDockerhubArgs\n            {\n                Username = \"test\",\n                Password = \"test\",\n            },\n        },\n        FallbackRegistry = dockerhub.Apply(getRegistryResult =\u003e getRegistryResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdockerhub, err := codefresh.LookupRegistry(ctx, \u0026GetRegistryArgs{\n\t\t\tName: \"dockerhub\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewRegistry(ctx, \"dockerhub1\", \u0026codefresh.RegistryArgs{\n\t\t\tPrimary: !dockerhub.Primary,\n\t\t\tSpec: \u0026RegistrySpecArgs{\n\t\t\t\tDockerhub: \u0026RegistrySpecDockerhubArgs{\n\t\t\t\t\tUsername: pulumi.String(\"test\"),\n\t\t\t\t\tPassword: pulumi.String(\"test\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFallbackRegistry: pulumi.String(dockerhub.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistry.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the registry to be retrieved\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegistry.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "Bool.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "String.\n"
                    },
                    "fallbackRegistry": {
                        "type": "string",
                        "description": "String representing the id of the fallback registry.\n* `repository prefix` - String representing the optional prefix for registry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Bool.\n"
                    },
                    "registryProvider": {
                        "type": "string",
                        "description": "String identifying the type of registry. E.g. `dockerhub, ecr, acr` and others\n"
                    },
                    "repositoryPrefix": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "domain",
                    "fallbackRegistry",
                    "kind",
                    "name",
                    "primary",
                    "registryProvider",
                    "repositoryPrefix",
                    "id"
                ]
            }
        },
        "codefresh:index/getStepTypes:getStepTypes": {
            "description": "## # Data Source: codefresh.StepTypes\n\nThis data source allows to retrieve the published versions of a step-types\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStepTypes.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the step-types to be retrieved\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStepTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getStepTypesVersion:getStepTypesVersion"
                        },
                        "description": "A Set of `version` blocks as documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "versions",
                    "id"
                ]
            }
        },
        "codefresh:index/getTeam:getTeam": {
            "description": "## # data codefresh.Team\n\n*Note*: Teams resources should be called with account specific access token  \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst admin = codefresh.getTeam({\n    name: \"users\",\n});\nconst permission2 = new codefresh.Permission(\"permission2\", {\n    team: admin.then(admin =\u003e admin.id),\n    action: \"create\",\n    resource: \"pipeline\",\n    tags: [\"frontend\"],\n}, {\n    provider: codefresh.acc1,\n});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\nadmin = codefresh.get_team(name=\"users\")\npermission2 = codefresh.Permission(\"permission2\",\n    team=admin.id,\n    action=\"create\",\n    resource=\"pipeline\",\n    tags=[\"frontend\"],\n    opts=pulumi.ResourceOptions(provider=codefresh[\"acc1\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Codefresh.GetTeam.Invoke(new()\n    {\n        Name = \"users\",\n    });\n\n    var permission2 = new Codefresh.Permission(\"permission2\", new()\n    {\n        Team = admin.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Action = \"create\",\n        Resource = \"pipeline\",\n        Tags = new[]\n        {\n            \"frontend\",\n        },\n    }, new CustomResourceOptions\n    {\n        Provider = codefresh.Acc1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := codefresh.LookupTeam(ctx, \u0026GetTeamArgs{\n\t\t\tName: pulumi.StringRef(\"users\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewPermission(ctx, \"permission2\", \u0026codefresh.PermissionArgs{\n\t\t\tTeam:     pulumi.String(admin.Id),\n\t\t\tAction:   pulumi.String(\"create\"),\n\t\t\tResource: pulumi.String(\"pipeline\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"frontend\"),\n\t\t\t},\n\t\t}, pulumi.Provider(codefresh.Acc1))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetTeamArgs;\nimport com.pulumi.codefresh.Permission;\nimport com.pulumi.codefresh.PermissionArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = CodefreshFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"users\")\n            .build());\n\n        var permission2 = new Permission(\"permission2\", PermissionArgs.builder()        \n            .team(admin.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .action(\"create\")\n            .resource(\"pipeline\")\n            .tags(\"frontend\")\n            .build(), CustomResourceOptions.builder()\n                .provider(codefresh.acc1())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  permission2:\n    type: codefresh:Permission\n    properties:\n      team: ${admin.id}\n      action: create\n      resource: pipeline\n      tags:\n        - frontend\n    options:\n      provider: ${codefresh.acc1}\nvariables:\n  admin:\n    Fn::Invoke:\n      Function: codefresh:getTeam\n      Arguments:\n        name: users\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "codefresh:index/getUser:getUser": {
            "description": "## # User Data Source\n\nUse this data source to get the User from existing users for use in other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as codefresh from \"@pierskarsenbarg/codefresh\";\nimport * as codefresh from \"@pulumi/codefresh\";\n\nconst admin = codefresh.getUser({\n    email: \"admin@codefresh.io\",\n});\nconst admins = new codefresh.Team(\"admins\", {users: [\n    admin.then(admin =\u003e admin.userId),\n    \"\u003cANY USER ID\u003e\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_codefresh as codefresh\n\nadmin = codefresh.get_user(email=\"admin@codefresh.io\")\nadmins = codefresh.Team(\"admins\", users=[\n    admin.user_id,\n    \"\u003cANY USER ID\u003e\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Codefresh = PiersKarsenbarg.Codefresh;\nusing Codefresh = Pulumi.Codefresh;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Codefresh.GetUser.Invoke(new()\n    {\n        Email = \"admin@codefresh.io\",\n    });\n\n    var admins = new Codefresh.Team(\"admins\", new()\n    {\n        Users = new[]\n        {\n            admin.Apply(getUserResult =\u003e getUserResult.UserId),\n            \"\u003cANY USER ID\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi-codefresh/sdk/go/codefresh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := codefresh.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"admin@codefresh.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = codefresh.NewTeam(ctx, \"admins\", \u0026codefresh.TeamArgs{\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(admin.UserId),\n\t\t\t\tpulumi.String(\"\u003cANY USER ID\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.codefresh.CodefreshFunctions;\nimport com.pulumi.codefresh.inputs.GetUserArgs;\nimport com.pulumi.codefresh.Team;\nimport com.pulumi.codefresh.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = CodefreshFunctions.getUser(GetUserArgs.builder()\n            .email(\"admin@codefresh.io\")\n            .build());\n\n        var admins = new Team(\"admins\", TeamArgs.builder()        \n            .users(            \n                admin.applyValue(getUserResult -\u003e getUserResult.userId()),\n                \"\u003cANY USER ID\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admins:\n    type: codefresh:Team\n    properties:\n      users:\n        - ${admin.userId}\n        - \u003cANY USER ID\u003e\nvariables:\n  admin:\n    Fn::Invoke:\n      Function: codefresh:getUser\n      Arguments:\n        email: admin@codefresh.io\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of user to filter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getUserLogin:getUserLogin"
                        }
                    },
                    "personals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getUserPersonal:getUserPersonal"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shortProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getUserShortProfile:getUserShortProfile"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "logins",
                    "personals",
                    "roles",
                    "shortProfiles",
                    "status",
                    "userId",
                    "userName",
                    "id"
                ]
            }
        },
        "codefresh:index/getUsers:getUsers": {
            "description": "## `# Users Data Source\n\nUse this data source to get all existing users from Codefresh.\n",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/codefresh:index/getUsersUser:getUsersUser"
                        },
                        "description": "A list of user\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    }
}